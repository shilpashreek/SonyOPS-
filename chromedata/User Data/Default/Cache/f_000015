<!--Import all Required Components Here--><html><head><meta charset="UTF-8"><!--Components Section-->
<!--WorkOrder Components Section-->
<!--Task Components Section-->
<!--Distribution Component-->
</head><body><div hidden="" by-vulcanize=""><dom-module id="prog-table" assetpath="Legacy/">
    <style>
        .hidden_Field {
            display: none;
        }
    </style>

    <template>
        <div class="revTableHeader" id="inboxHeader">
            <table id="revTableHeader" class="revTableHeader">
                <tbody>
                    <tr>
                        <th class="revCol1 revRowHeaderValue">
                            <div>Program Details</div>
                        </th>
                        <th class="revCol2 revRowHeaderValue">
                            <div></div>
                        </th>
                        <th class="revCol3 revRowHeaderValueStatus">
                            <div>Status</div>
                        </th>
                        <th class="revCol4 revRowHeaderValue">
                            <div>Created On</div>
                        </th>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class="revTableBody container opsActData" id="revInboxDetails">
            <div class="content">
                <template is="dom-if" if="{{CheckForData(data)}}">
                    <p class="revRowValue">No Record(s) Found.</p>
                </template>
                <template is="dom-repeat" items="{{data}}" as="mydata">
                    <table id="revTableBody" class="revTableBody">
                        <tbody>
                            <tr>
                                <td class="revCol1" rowspan$="[[Increment(mydata.ObjectList.length)]]"><div><div class="revRowValue" title="{{mydata.GroupTitle}}">{{DueDateFormat(mydata.DueDate)}}<br><span class="SearchTextHighlight">{{mydata.GroupTitle}}</span></div></div></td>
                            </tr>
                            <template is="dom-repeat" items="{{mydata.ObjectList}}" as="ObjectList" index-as="Object_no">
                                <tr>
                                    <td class="revCol2"><div><div class="revRowValue" title=" Click to open for Review" on-tap="HandleOnClickToOpenReviewPopup"><span class="txSelector">[[TextSplit(ObjectList.Title,0)]]</span><span class="revRowLink">[[TextSplit(ObjectList.Title,1)]] [Mix]</span></div></div></td>
                                    <td class="revCol3">
                                        <pft-statusicon status="{{ObjectList.Status}}"></pft-statusicon>
                                    </td>
                                    <td class="revCol4"><div class="revRowValue" title$="[[DateFormat(ObjectList.CreatedOn)]]">[[DateFormat(ObjectList.CreatedOn)]] <br> <span class="hidden_Field">{{mydata.GroupTitle}}</span></div></td>
                                    <!--<td class="col5"><div></div></td>-->
                                </tr>
                            </template>
                        </tbody>
                    </table>

                </template>
            </div>
        </div>
    </template>

    <script>
        Polymer({
            is: "prog-table",
            HandleOnClickToOpenReviewPopup: function (e) {
                var model = e.model;
                HandleOnClickToOpenReviewPopup(this.isipadrequest, model.mydata.GroupTitle, model.ObjectList.ObjectDetails.ObjId, model.ObjectList.ReviewRequestId, model.ObjectList.Title, this.requestType, model.ObjectList.ObjectDetails.ObjTenantId, model.ObjectList.ObjectDetails.ObjType, model.ObjectList.ReviewContentId);
            },
            properties: {
                data: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                isipadrequest: {
                    type: Boolean,
                    value: false,
                    notify: true,
                    reflectToAttribute: true
                },
                requestType: {
                    type: String,
                    value: "",
                    notify: true,
                    reflectToAttribute: true
                },
            },
            Increment: function (index) {
                var a = parseInt(index);
                a = a + 1;
                return a;
            },
            DueDateFormat: function (date) {
                //alert(date);
                var d = new Date(date);
                var minutes = d.getMinutes();
                minutes = minutes > 9 ? minutes : '0' + minutes;
                var date_string = d.getHours() + ":" + minutes;
                return date_string;
            },
            DateFormat: function (date) {
                //alert(date);
                var d = new Date(date);
                var minutes = d.getMinutes();
                minutes = minutes > 9 ? minutes : '0' + minutes;

                var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"];
                var date_string = months[d.getMonth()] + " " + d.getDate() + ", " + d.getHours() + ":" + minutes;
                return date_string;
            },

            TextSplit: function (text, indx) {
                var returntxt;
                var txt = text.split(" ");
                switch (indx) {

                    case (0):
                        returntxt = txt[indx];
                        break;

                    case (1):
                        returntxt = txt[indx];
                        break;
                }
                return returntxt;
            },
            CheckForData: function (data) {
                if (data === null || data.length==0)
                    return true;    
            }

        });
    </script>
</dom-module><dom-module id="ops-table" assetpath="Legacy/">
    <template>
        <div id="InboxHeader">
            <table id="opsHeader" class="reviewOps">
                <thead class="reviewOpsHeader">
                    <tr>
                        <th class="col1">
                            <div>Tx Time</div>
                        </th>
                        <th class="col2">
                            <div>Program Title</div>
                        </th>
                        <th class="col3">
                            <div>Uploaded On</div>
                        </th>
                        <th class="col4">
                            <div>Playout Id</div>
                        </th>
                        <th class="col5">
                            <div>Drop-Box</div>
                        </th>
                        <th class="col6">
                            <div>TC Override</div>
                        </th>
                        <th class="col7">
                            <div>Ing.</div>
                        </th>
                        <th class="col8">
                            <div>Prog.</div>
                        </th>
                        <th class="col9">
                            <div>COMP</div>
                        </th>
                        <th class="col10">
                            <div>AQC</div>
                        </th>
                        <th class="col11">
                            <div>QC</div>
                        </th>
                        <th class="col12">
                            <div>Tx</div>
                        </th>
                        <th class="col13">
                            <div>Arch.</div>
                        </th>
                    </tr>
                </thead>
            </table>
        </div>

        <div id="reviewOpsdetails" class="container opsInboxData">
            <template is="dom-if" if="{{CheckForData(data)}}">
                <p class="revRowValue">No Record(s) Found.</p>
            </template>
            <template is="dom-repeat" items="{{data}}" as="OpsData" index-as="P_index">
                <table id="opsAssetDetails" class="reviewOps">
                    <tbody class="reviewOpsDetails">
                        <tr id$="mainTitle_[[P_index]]" class="mainTitle">
                            <td class="col1">
                                <div></div>
                            </td>
                            <td colspan="12" class="col2">
                                <div>{{OpsData.GroupTitle}} [{{OpsData.ChannelName}}]</div>
                            </td>
                        </tr>
                        <template is="dom-repeat" items="{{OpsData.ObjectList}}" as="ObjectList" index-as="Object_no">
                            <tr id="opsInboxDetails_[[Object_no]]" class="opsInboxDetails">
                                <td class="col1">
                                    <div>{{DueDateFormat(OpsData.DueDate)}}</div>
                                </td>
                                <td class="col2">
                                    <div>
                                        <span id="WorkFlow_ObjectList.WorkFlowId%>" class="wfStatusProcessingRestore WFIcon" title=" Order workflow" on-tap="openDiagramSmartTasker"></span>
                                        <span class="txSelector textSeparator">[[TextSplit(ObjectList.Title,0)]]</span>
                                        <span class="programTitle" on-tap="loadViewerforOps">[[TextSplit(ObjectList.Title,1)]] [Mix]</span>
                                    </div>
                                </td>
                                <td class="col3">
                                    <div>{{DateFormat(ObjectList.CreatedOn)}}</div>
                                </td>
                                <td class="col4">
                                    <!--need add a logic-->
                                    <div on-tap="AssignPlayoutID" class$="[[SetPlayoutIdClass(ObjectList.PlayOutId,'')]]">[[SetPlayoutIdLabel(ObjectList.PlayOutId)]]</div>
                                </td>
                                <td class="col5">
                                    <div>PFT Demo</div>
                                </td>
                                <td class="col6">
                                    <div>NA</div>
                                </td>
                                <template is="dom-repeat" items="{{ObjectList.WorkFlowStatus}}" as="wfstatus" index-as="idx_no">
                                    <td class="progressStatusBar">
                                        <clear-wfstatusbar status="{{wfstatus}}" wfid="{{ObjectList.WorkFlowId}}"></clear-wfstatusbar>
                                    </td>
                                </template>
                            </tr>
                        </template>
                </tbody></table>
            </template>
        </div>
    </template>


    <script>
        Polymer({
            is: 'ops-table',

            properties: {
                data: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                isipadrequest: {
                    type: Boolean,
                    value: false,
                    notify: true,
                    reflectToAttribute: true
                },
                requestType: {
                    type: String,
                    value: "",
                    notify: true,
                    reflectToAttribute: true
                }

            },
            Increment: function (index) {
                var a = parseInt(index);
                a = a + 1;
                return a;
            },
            DueDateFormat: function (date) {
                var d = new Date(date);
                var minutes = d.getMinutes();
                minutes = minutes > 9 ? minutes : '0' + minutes;
                var date_string = d.getHours() + ":" + minutes;
                return date_string;
            },
            DateFormat: function (date) {
                var d = new Date(date);
                var minutes = d.getMinutes();
                minutes = minutes > 9 ? minutes : '0' + minutes;
                var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"];
                var date_string = months[d.getMonth()] + " " + d.getDate() + " ," + d.getHours() + ":" + minutes;
                return date_string;
            },
            openDiagramSmartTasker: function (e) {
                var model = e.model;
                openDiagramSmartTasker(model.ObjectList.WorkFlowId, model.ObjectList.WorkFlowStatus[0].TemplateName, '0', model.ObjectList.Title);
            },
            loadViewerforOps: function (e) {
                var model = e.model;
                loadViewerforOps(model.ObjectList.ObjectDetails.ObjId, model.ObjectList.ObjectDetails.ObjTenantId, 'Ops', 'Library', this.isipadrequest, model.ObjectList.ReviewRequestId, model.ObjectList.Title, model.ObjectList.ReviewContentId, model.ObjectList.ObjectDetails.ObjType);
            },
            TextSplit: function (text, indx) {
                var returntxt;
                var txt = text.split(" ");
                switch (indx) {
                    case (0):
                        returntxt = txt[indx];
                        break;

                    case (1):
                        returntxt = txt[indx];
                        break;
                }
                return returntxt;
            },
            CheckForData: function (data) {
                if (data === null || data.length == 0)
                    return true;
            },
            AssignPlayoutID: function (e) {
                var playOutId = e.model.ObjectList.PlayOutId;
                var isIPadRequest = $jq('#isIPadRequest').val(); if (isIPadRequest == "True") { return; }
                else {
                    if (playOutId === null || playOutId.length == 0) {
                        loadPlayOutIdPopup(e.model.ObjectList.ObjectDetails.ObjId, e.model.ObjectList.ObjectDetails.ObjTenantId, e.model.OpsData.GroupTitle + " " + e.model.ObjectList.Title);
                    }
                    return;
                }
            },
            SetPlayoutIdLabel: function (PID) {
                var isIPadRequest = $jq('#isIPadRequest').val(); if (isIPadRequest == "True") { return "NA"; }
                else {
                    if (PID === null || PID.length == 0) {
                        return "Assign";
                    }
                    return PID;
                }
            },
            SetPlayoutIdClass: function (PID) {
                var isIPadRequest = $jq('#isIPadRequest').val(); if (isIPadRequest == "True") { return ""; }
                else {
                    if (PID === null || PID.length == 0) {
                        return "Assign linked linkedItem";
                    }
                    return "";
                }
            }

        });
    </script>


</dom-module>
<dom-module id="PFT-table" assetpath="Legacy/">
    <style>
        .align_horizontally {
            float: left;
        }
        /*.pft-table {
            font-size: 14px;
        }

        th {
            font-size: 13px;
        }*/
    </style>
    <template>
        <div class$="[[classData.hdr_div_cls]]" id$="[[classData.hdr_div_id]]">
            <table class$="[[classData.hdr_tbl_cls]]" id$="[[classData.hdr_tbl_id]]">
                <thead class$="[[classData.hdr_thead_cls]]">
                    <tr>
                        <template is="dom-repeat" items="{{headerData}}" as="header" index-as="header_indx">
                            <th class$="[[AssignTable_th_Class(header.HeaderType,header_indx,reviewType)]]"><div>{{header.HeaderName}}</div></th>
                        </template>
                    </tr>
                </thead>
            </table>
        </div>

        <div class$="[[classData.data_outerdiv_cls]]" id$="[[classData.data_outerdiv_id]]">
            <div class$="[[classData.data_innerdiv_cls]]">
                <table id$="[[classData.data_tbl_id]]" class$="[[classData.data_tbl_cls]]">
                    <tbody class$="[[classData.data_tbl_body_cls]]">
                        <template is="dom-repeat" items="{{data}}" as="tabledata" index-as="tbl_indx">
                            <template is="dom-repeat" items="{{tabledata.data}}" as="mydata" index-as="mydata_indx">
                                <tr>
                                    <td class$="[[classData.data_parent_td]]" rowspan$="[[CalculateSpan(mydata.Parent_Data.length,rowspanRequired,'row')]]">
                                        <div>
                                            <template is="dom-repeat" items="{{mydata.Parentcell_Value}}" as="Pcell" index-as="Pcell_indx">
                                                <pft-cell class$="{{Pcell.cellAlignment}}" on-tap="HandleTap_Pcell" value="{{Pcell.cellValue}}" cell-type="{{Pcell.cellType}}" custom-class="{{Pcell.cssClass}}"></pft-cell>
                                                <span class="hidden_Field">table index : [[tbl_indx]], data index :  [[mydata_indx]]</span>
                                            </template>
                                        </div>
                                    </td>
                                </tr>
                                <template is="dom-repeat" items="{{mydata.Parent_Data}}" as="ObjectList" index-as="row_indx">
                                    <tr>
                                        <template is="dom-repeat" items="{{ObjectList.Child_Data}}" as="ColoumnList" index-as="col_indx">

                                            <template is="dom-repeat" items="{{ColoumnList.cell_Value}}" as="cell" index-as="cell_indx">
                                                <td class$="[[AssignTable_td_Class(col_indx,reviewType,rowspanRequired,cell.cellType)]]" width$="{{ColoumnList.cellWidth}}">
                                                    <pft-cell class$="{{cell.cellAlignment}}" on-tap="HandleTap" value="{{cell.cellValue}}" cell-type="{{cell.cellType}}" custom-class="{{cell.cssClass}}"></pft-cell>
                                                    <span class="hidden_Field">table index : [[tbl_indx]], data index :  [[mydata_indx]], row index: [[row_indx]] , col index : [[col_indx]]</span>
                                                </td>
                                            </template>
                                           
                                        </template>
                                    </tr>
                                </template>
                            </template>
                        </template>
                    </tbody>
                </table>
            </div>
        </div>
    </template>

    <script>
        Polymer({
            is: "PFT-table",

            HandleTap: function (e) {
                var model = e.model;
                if (model.cell.clickFunction != null) {
                    var clickFunction = 'data.' + model.tbl_indx + '.data.' + model.mydata_indx + '.Parent_Data.' + model.row_indx + '.Child_Data.' + model.col_indx + '.cell_Value.' + model.cell_indx + '.clickFunction'
                    var FunctionToCall = this.get(clickFunction);

                    //To get the parameters from the function to call.
                    var start_pos = FunctionToCall.indexOf('(') + 1;
                    var end_pos = FunctionToCall.indexOf(')', start_pos);
                    var parameter = FunctionToCall.substring(start_pos, end_pos)



                    var func_name = FunctionToCall.split("(")[0];
                    window[func_name].apply(this, parameter.split(';'));
                    //functionCaller(parameter);

                    //HandleTapForTableDataCell(model);
                }
            },
            HandleTap_Pcell: function (e) {
                var model = e.model;
                if (model.Pcell.clickFunction != null) {
                    var clickFunction = 'data.' + model.tbl_indx + '.data.' + model.mydata_indx + '.Parentcell_Value.' + model.Pcell_indx + '.clickFunction';
                    var FunctionToCall = this.get(clickFunction);

                    //To get the parameters from the function to call.
                    var start_pos = FunctionToCall.indexOf('(') + 1;
                    var end_pos = FunctionToCall.indexOf(')', start_pos);
                    var parameter = FunctionToCall.substring(start_pos, end_pos)



                    var func_name = FunctionToCall.split("(")[0];
                    window[func_name].apply(this, parameter.split(';'));
                    //functionCaller(parameter);

                    //HandleTapForTableDataCell(model);
                }
            },


            properties: {
                data: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                headerData: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                classData:
                    {
                        type: Object,
                    },
                isipadrequest: {
                    type: Boolean,
                    value: false,
                    notify: true,
                    reflectToAttribute: true
                },
                reviewType: {
                    type: String,
                    value: "",
                    notify: true,
                    reflectToAttribute: true
                },
                rowspanRequired: {
                    type: Boolean,
                    value: false,
                    notify: true,
                    reflectToAttribute: true
                }
            },
            CalculateSpan: function (index, isrowspantype, caller) {
                var a;
                if (isrowspantype && caller === "row") {
                    a = parseInt(index);
                    a = a + 1;
                }
                else if (!isrowspantype && caller === "col") {

                    a = index;
                }
                else {
                    a = 1;
                }
                return a;
            },
            AssignTable_th_Class: function (headerstatus, header_indx, reviewType) {
                var indx = header_indx + 1;
                var hdrclass = "";
                //alert(reviewType)
                switch (reviewType) {
                    case ("Programming"):
                    case ("sandp"):

                        switch (headerstatus) {
                            case "Text":
                                hdrclass = "revcol" + indx + " " + "revRowHeaderValue";
                                break;
                            case "Status":
                                hdrclass = "revcol" + indx + " " + "revRowHeaderValueStatus";
                                break;
                            case "WF_Status":
                                break;
                            default:
                                hdrclass = "revcol" + indx + " " + "revRowHeaderValue";
                                break;
                        }
                        break;

                    default:
                        //alert("default class selected")
                        hdrclass = "col" + indx;
                        break;
                }

                return hdrclass;
            },
            AssignTable_td_Class: function (header_indx, reviewType, rowspanRequired, statusType) {
                var indx;
                if (rowspanRequired)
                    indx = header_indx + 2;
                else
                    indx = header_indx + 1;
                var hdrclass = "";
                switch (reviewType) {
                    case ("Programming"):
                    case ("sandp"):
                        hdrclass = "revCol" + indx;
                        break;

                    default:
                        //alert("default class selected")
                        hdrclass = "col" + indx;
                        break;
                }

                if (statusType == "WF")
                    hdrclass = "progressStatusBar";
                return hdrclass;
            },
            ready: function () {
                //To Assign class to  Dashboard specific Divs and table
                var review_type = this.reviewType;
                switch (review_type) {
                    case ("Programming"):
                    case ("sandp"):
                        this.classData = {
                            hdr_div_cls: "revTableHeader revRowBorder", hdr_div_id: "inboxHeader", hdr_tbl_cls: "revTableHeader", hdr_tbl_id: "revTableHeader", hdr_thead_cls: "",
                            data_outerdiv_cls: "revTableBody container opsActData", data_innerdiv_cls: "content", data_tbl_cls: "revTableBody", data_tbl_body_cls: "",
                            data_outerdiv_id: "revInboxDetails", data_tbl_id: "revTableBody", data_parent_td: "revCol1 revrowborder", data_parent_td_div: "revRowValue",
                            data_parent_td_span: "SearchTextHighlight"
                        }
                        break;

                    case ("Ops"):

                        this.classData = {
                            hdr_div_cls: "", hdr_tbl_cls: "reviewOps", hdr_tbl_id: "revTableHeader", hdr_thead_cls: "reviewOpsHeader", hdr_div_id: "inboxHeader",
                            data_outerdiv_cls: "container opsInboxData", data_innerdiv_cls: "", data_tbl_cls: "reviewOps", data_tbl_body_cls: "reviewOpsDetails",
                            data_outerdiv_id: "reviewOpsdetails", data_tbl_id: "opsAssetDetails", data_parent_td: "revCol1 revrowborder", data_parent_td_div: "revRowValue",
                            data_parent_td_span: "SearchTextHighlight"
                        }
                        break;

                    default:
                        this.classData = {
                            hdr_div_cls: review_type + '_hdrDiv', hdr_div_id: "inboxHeader", hdr_tbl_cls: review_type + '_hdrtbl', hdr_tbl_id: "revTableHeader", hdr_thead_cls: review_type + '_hdrthead',
                            data_outerdiv_cls: review_type + '_tblouterDiv container', data_innerdiv_cls: review_type + '_tblinnerDiv', data_tbl_cls: review_type + '_tbl', data_tbl_body_cls: review_type + '_tblcls',
                            data_outerdiv_id: review_type + '_tblouterDivId', data_tbl_id: review_type, data_parent_td: "revCol1 revrowborder", data_parent_td_div: "revRowValue",
                            data_parent_td_span: "SearchTextHighlight"
                        }
                }

            }
        });
    </script>
</dom-module><dom-module id="Clear-WFStatusBarold" assetpath="Legacy/">
    <template>
        <div id$="div_[[workflowId]][[WF_Status.StepGuid]]" onclick$="[[onclickFunction(WF_Status)]]" class$="[[ClassSelector(WF_Status)]]" title$="[[TitleSelector(WF_Status)]]"></div>
        <p>{{workflowId}}</p>
    </template>

    <script>
        Polymer({

            is: 'Clear-WFStatusBarold',
            ready: function () {
                this.WF_Status =
                    { StepGuid: "123", Status: 1, DisplayName: "Approved", TemplateName: "appsp" }
                ;
                this.workflowId = "1111";
            },
            properties: {
                WF_Status: {
                    type: Object,
                },
                workflowId:
                    {
                        type: String,
                    }
            },
            ClassSelector: function (WF_Status) {
                switch (WF_Status.Status) {
                    case 1:
                        return "opsProgressbarInProgress"
                        break;
                    case 2:
                        return "opsProgreesbarComplete"
                        break;
                    case 3:
                        return "opsProgressbarFailed"
                        break;
                    default:
                        return "opsProgressbarNotstarted"
                }
            },
            TitleSelector: function (WF_Status) {
                switch (WF_Status.Status) {
                    case 1:
                        return "InProgress";
                        break;
                    case 2:
                        return "Complete";
                        break;
                    case 3:
                        return "Failed";
                        break;
                    default:
                        return "NA";
                }
            },

        });
    </script>

</dom-module>




<dom-module id="Clear-WFStatusBar" assetpath="Legacy/">
    <template>
        <div id$="div_{{WFId}}" class$="{{ClassSelector}}" title$="{{DisplayValue}}" onclick$="{{onclickFunction}}"></div>
        <p>{{WFId}}</p>
    </template>

    <script>
        Polymer({

            is: 'Clear-WFStatusBar',
            properties: {

                status: Object,
                WFId: String,

                ClassSelector: {
                    type: String,
                    computed: 'computeClassName(status)'
                },
                DisplayValue: {
                    type: String,
                    computed: 'computeDisplay(status)'
                },
                onclickFunction: {
                    type: String,
                    computed: 'CallOnclickFunction(status)'
                },
                CheckOnclickFunction: {
                    type: String,
                    computed: 'CheckOnclickFunctionExist(status)'
                }

            },

            computeClassName: function (status) {
                if (!status)
                    return "opsProgressbarNotstarted";

                switch (status.StepStatusId) {
                    case "1":
                        return "opsProgressbarInProgress"
                        break;
                    case "2":
                        return "opsProgreesbarComplete"
                        break;
                    case "3":
                        return "opsProgressbarFailed"
                        break;
                    default:
                        return "opsProgressbarNotstarted"
                }
            },
            computeDisplay: function (status) {
                //switch (status.StepStatusId) {
                //    case "1":
                //        return "InProgress";
                //        break;
                //    case "2":
                //        return "Complete";
                //        break;
                //    case "3":
                //        return "Failed";
                //        break;
                //    default:
                //        return "NA";
                //}
                return status.ToolTip;
            },
            CallOnclickFunction: function (status) {
                //var model = e.model;
                // openDiagramSmartTasker(model.ObjectList.WorkFlowId, model.ObjectList.WorkFlowStatus[0].TemplateName, '0', model.ObjectList.Title);
                return status.JavscriptFunctionName;
            },
            CheckOnclickFunctionExist: function (status) {
                if (status.JavscriptFunctionName != undefined)
                    return "ExportTypeContainer FR";
            }

        });
    </script>

</dom-module>



<dom-module id="PFT-Cell" assetpath="Legacy/">
<style>

 /*.text {
                    text-align: center;
                    vertical-align: middle;
                }*/


    </style>
    <template>
        <div class$="{{ClassSelector}}" title$="{{TitleSelector}}"><div id="imgtag"></div> <div class="text">{{DisplayValue}}</div></div>
    </template>

    <script>
        Polymer({

            is: 'PFT-Cell',

            properties: {

                value:
                    {
                        Type: String,
                        observer: '_disabledChanged'


                    },
                cellType: String,
                customClass: String,

                ClassSelector: {
                    type: String,
                    computed: 'computeClassName(value,cellType,customClass)'
                },
                DisplayValue: {
                    type: String,
                    computed: 'computeDisplay(value,cellType)'
                },
                TitleSelector:
                    {
                        type: String,
                        computed: 'computeTitle(value,cellType)'

                    }

            },

            _disabledChanged: function (newValue, oldValue) {
                if (oldValue === undefined) {

                }
                else {
                    //alert("Old Value is : " + oldValue)
                    //alert("Old Value is : " + newValue)
                    this.firstChild.nextElementSibling.addClassName('updated')

                }
            },


            computeClassName: function (value, cellType, customClass) {

                if (cellType == "Text") {
                    return "revRowValue" + " " + customClass;


                }

                else if (cellType == "Image") {
                    return "bgimg";

                }
                    //venkat: even for work flow we need to find a composite key as a clkass
                else if (cellType == "WF") {
                    switch (value) {
                        case ("1"):
                            return "opsProgressbarInProgress" + " " + customClass;
                            break;
                        case ("2"):
                            return "opsProgreesbarComplete" + " " + customClass;
                            break;
                        case ("3"):
                            return "opsProgressbarFailed" + " " + customClass;
                            break;
                        default:
                            return "opsProgressbarNotstarted" + " " + customClass;
                    }
                }

                else {
                    //venkat: For multiple custom status we might end up adding more case here 
                    //recommendation must be status name should be the class name (or it could be )
                    //Acronym created for the status 
                    if (value == "Approved") {
                        return "revRowValueStatus clear-tick revStatusApproved" + " " + customClass;
                    }
                    else if (value == "Rejected") {

                        return "revRowValueStatus clear-cross revStatusRejected" + " " + customClass;
                    }
                    else if (value == "N/A") {
                        return "revRowValueStatus" + " " + customClass;
                    }

                }
            },
            computeDisplay: function (value, cellType) {

                if (cellType == "Text") {
                    return value;

                }

                else if (cellType == "Image") {
                    var x = document.createElement("IMG");
                    x.setAttribute("style", "margin-left:auto;margin-right:auto;display:block;margin-top:10px")
                    x.setAttribute("class", "displayed");
                    x.setAttribute("src", value);
                    x.setAttribute("width", "200");
                    x.setAttribute("height", "100");
                    x.setAttribute("alt", "Image");
                    this.$.imgtag.appendChild(x);
                    return "";
                }

                if (value == "N/A") {
                    return value;
                }
                else {
                    return "";
                }
            },
            computeTitle: function (value, cellType) {

                //alert(status);

                if (cellType == "Text") {
                    
                    return value;
                }
                    
                else if (cellType == "WF") {
                    switch (value) {
                        case "1":
                            return "InProgress";
                            break;
                        case "2":
                            return "Complete";
                            break;
                        case "3":
                            return "Failed";
                            break;
                        default:
                            return "NA";
                    }
                }
                else {
                    return value;
                }
            }


        });
    </script>

</dom-module><dom-module id="ClearTask-MyTasks" assetpath="Legacy/">
    <template>
        <style>
            .headerTable {
                background-color: #414141;
                color: White;
                width: 100%;
                font-size: 11px;
                border-bottom: 1px solid #515151;
            }

            .DataTable {
                width: 100%;
            }

                .DataTable tr {
                    border-bottom: 1px solid rgb(71, 71, 71);
                    width: 100%;
                }

                .headerTable th,
                .DataTable td {
                    padding: 6px 4px;
                    box-sizing: border-box;
                }
            #MyTaskContainer {
                height: 525px;
            } 
            .data1 {
                width: 15%;
                overflow: hidden;
                text-align: center;
            }

            .data2 {
                width: 19%;
                overflow: hidden;
                text-align: left;
            }

            .data3 {
                width: 17%;
                overflow: hidden;
                text-align: center;
            }

            .data4 {
                width: 17%;
                overflow: hidden;
                text-align: center;
            }

            .data5 {
                width: 15%;
                overflow: hidden;
                text-align: center;
            }

            .ToolPaneltbl {
                height: 30px;
                background-color: #474747;
                width: 100%;
            }

            .TaskDataContainer {
                width: 100%;
                float: left;
                color: #C0C0C0;
                background-color: #414141;
                height: 605px;
            }

            ClearTask-MyTasks {
                margin-top: 10px;
            }

            .DataTable tr:hover {
                background-color: #2f2f2f;
            }

            .nestedData {
                font-size: 11px;
            }

            .downloadiconWrap {
                text-align: center;
                font-size: 12px;
                cursor: pointer;
                margin-top: 5px;
            }

                .downloadiconWrap:hover {
                    color: #15d4f3;
                }

                .downloadiconWrap:after {
                    content: 'Download';
                }

            .downloadIcon {
                margin-right: 5px;
                vertical-align: top;
            }

            .ThumbImage {
                border-radius: 3px;
                width: 100px;
                height: 55px;
            }

            .ToolPanel {
                float: right;
            }

            .ToolPanelIcons, .crossIcon {
                font-size: 25px;
                cursor: pointer;
            }

            .crossIcon {
                font-size: 12px !important;
            }

            .SearchTxtBox {
                background: #212121;
                border: none;
                outline: none;
                width: 140px;
                height: auto;
                padding: 2px;
                color: #9c9c9c;
                border-radius: 2px;
                vertical-align: middle;
                overflow: hidden;
            }

            .Title {
                color: #EEEEEE;
                font-size: 12px;
            }

        </style>

        <div class="dataContainer ">
            <div id="DataContainer" class="TaskDataContainer container">

                <table id="headerTable" class="headerTable">
                    <tbody>
                        <tr>
                            <th class="data1">
                                <div>  </div>
                            </th>
                            <th class="data2">
                                <div>TASK TITLE</div>
                            </th>
                            <th class="data3">
                                <div>VERSION</div>
                            </th>
                            <th class="data4">
                                <div>UPLOAD ON</div>
                            </th>
                            <th class="data5">
                                <div>STATUS</div>
                            </th>
                        </tr>
                    </tbody>
                </table>
                <div id="MyTaskContainer" class="container">
                    <table id="BodyTable" class="DataTable">
                        <template is="dom-if" if="{{CheckForData(data)}}">
                            <p class="">No Record(s) Found.</p>
                        </template>
                        <template is="dom-repeat" items="{{data}}" as="MyList">
                            <template is="dom-repeat" items="{{MyList.ObjectList}}" as="obj">
                                <tr on-tap="QC_PopUp">
                                    <td class="data1">
                                        <div class="Image"><img alt="image" class="ThumbImage" src="{{MyList.GroupThumbnailUrl}}"></div>
                                        <!--<div class="downloadiconWrap"><span class="downloadIcon clear-download"></span></div>-->
                                    </td>
                                    <td class="data2">
                                        <div class="Title">{{MyList.GroupTitle}}</div>
                                        <div class="nestedData">{{obj.TaskTitle}}</div>
                                        <div class="nestedData">Due Date : {{DateFormat(MyList.DueDate)}}</div>
                                    </td>
                                    <td class="data3">{{obj.Version}}</td>
                                    <td class="data4">{{DateFormat(obj.CreatedOn)}}</td>
                                    <td class="data5" title$="{{getTitle(obj.Status)}}">
                                        <div class$="{{getStatus(obj.Status)}}"></div>
                                    </td>
                                </tr>
                            </template>
                        </template>
                    </table>
                </div>
            </div>
        </div>

    </template>

    <script>

        Polymer({
            is: "ClearTask-MyTasks",
            properties: {
                data:
                       {
                           type: Array,
                           value: function () {
                               return [];
                           }
                       }
            },
            QC_PopUp: function (e) {
                var model = e.model;
                //LoadQCPopup(model.obj.ObjectDetails.ObjId, model.obj.ObjectDetails.ObjTenantId, model.obj.TaskNodeId, model.obj.AdditionalParameters,model.obj.TaskUserId);
                LoadQCPopup(model.obj.ObjectDetails.ObjId, model.obj.ObjectDetails.ObjTenantId, model.obj.TaskId, model.obj.AdditionalParameters, model.obj.TaskAssignmentId);

            },
            DateFormat: function (date) {
                var d = new Date(date);
                var minutes = d.getMinutes();
                minutes = minutes > 9 ? minutes : '0' + minutes;
                var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"];
                //var date_string = d.getDate() + ", " + months[d.getMonth()] + " " + d.getFullYear();
                var date_string = months[d.getMonth()] + " " + d.getDate() + ", " + d.getFullYear();
                return date_string;
            },
            getStatus: function (status) {
                if (status == "Approved") {
                    return "revRowValueStatus clear-tick revStatusApproved ";
                }
                else if (status == "Rejected") {
                    return "revRowValueStatus clear-cross revStatusRejected "
                }
                else if (status == "In Progress") {
                    return "clear-hourglassEmpty InProgressClass"
                }
                else if (status == "Delivered") {
                    return "clear-tickAll  revRowValueStatus revStatusApproved"
                }
                
                else if (status == "N/A") {
                    return "revRowValueStatus ";
                }
            },
            getTitle: function (status) {
                return status;
            },
            CheckForData: function (data) {
                if (data === null || data.length == 0)
                    return true;
            }
        });
    </script>

</dom-module>
<dom-module id="PFT-Clear_ProcessMonitoringTemplate" assetpath="DashboardTemplates/">
    <template>
        <div id="Clear_ProcessMonitoringTemplate" class="processV2Wrap">
            <div id="PFTToolbar" class="PFTToolbar">
                <pft-toolbar id="toolBar" sort-data="{{sortData}}" filter-data="{{filterData}}" search-required="{{action.IsSearchRequired}}" static-filter="{{staticFilter}}" function-name="{{action.filterSortOnclickFunction}}"></pft-toolbar>
            </div>
            <div class="processV2HeaderWrap">
                <table id="clear_processmonitoringtemplateHeader" class="processV2 clear_processmonitoringtemplate">
                    <thead>
                        <tr>
                            <template is="dom-repeat" items="{{headerData.HeaderCollection}}" as="headerVal" index-as="h_index">
                                <th class$="cl{{incrementIndex(h_index)}} {{headerVal.headerCss}} {{SetStatusBarColumnCss(h_index,data.PFTBody.PFTRow)}}">
                                    <div class="headerDataCell" onclick$="loadAttributes('idHeader{{incrementIndex(h_index)}}', 'pft-header', 'headerName;headerCss')">{{headerVal.headerName}}</div>
                                </th>
                            </template>
                            <th class$="cl6 pftwfcomponent progressStatusCol{{dashboardType}}" style$="width:{{statusbarColwidth}}px"></th>
                        </tr>
                    </thead>
                </table>
            </div>
            <div id="clear_processmonitoringtemplateScroll" class="processV2Scroll container" dashboarddatacontainer="">
                <div class="content">
                    <table id="clear_processmonitoringtemplateData" class="processV2 clear_processmonitoringtemplate">
                        <tbody class="">
                            <template is="dom-if" if="{{CheckForData(data)}}">
                                <tr><td><div class="noData">No Records Found.</div></td></tr>
                            </template>
                            <template is="dom-repeat" items="{{data.PFTBody.PFTRow}}" as="rowdata" index-as="b_index">
                                <tr id$="pr{{incrementIndex(b_index)}}" class="wRow">
                                    <td class$="cl1 pftduedate {{headerData.HeaderCollection.0.headerCss}}">
                                        <div class="smartAlertWrapper" title="">
                                            <pft-smartalerts id$="Alert_{{rowdata.StdAttributes.S_WO_ID}}" tenantid="{{rowdata.StdAttributes.ObjTenantId}}"></pft-smartalerts>
                                        </div>
                                        <div class="dueDateWrapper"><pft-duedate uid="idDueDate" ignoreattr="due-date;onclick" due-date="{{rowdata.Attributes.S_DUE_DATE}}" onclick="loadAttributes('idDueDate', 'pft-duedate', 'due-date')"></pft-duedate></div>
                                    </td>
                                    <td class$="cl2 titleInfo {{headerData.HeaderCollection.1.headerCss}}">
                                        <div class="thumbWrapper"><pft-image parent-class="pr{{incrementIndex(b_index)}}" ignoreattr="value;onclick;css-classname" uid="idThumbURL" css-classname="" value="{{rowdata.Attributes.AssetDetails_ThumbURL}}" onclick="loadAttributes('idThumbURL', 'pft-image', 'value;function-name;function-params;css-classname')"></pft-image></div>
                                        <div class="metaDetails">
                                            <pft-title title="{{rowdata.Attributes.MAINTITLE}}" value="{{rowdata.Attributes.MAINTITLE}}" ignoreattr="value;onclick;title" uid="idTitle" onclick="loadAttributes('idTitle', 'pft-title', 'title;function-name;function-params')"></pft-title>
                                            <div class="pfttextcomponent">
                                                <pft-textcomponenthz textseparator="|" ignoreattr="data;labels" uid="idTxtCmptHzCx1" data="{{rowdata.Attributes.S_WO_ID}}" labels="Wo ID"></pft-textcomponenthz>
                                                <pft-textcomponenthz textseparator="|" ignoreattr="data;labels" uid="idTxtCmptHzCx2" data="{{rowdata.Attributes.S_DUE_DATE}}" labels="Due Date"></pft-textcomponenthz>
                                                <pft-textcomponenthz textseparator="|" ignoreattr="data;labels" uid="idTxtCmptHzCx3" data="{{rowdata.Attributes.CreatedBy}}" labels="Uploaded By"></pft-textcomponenthz>
                                            </div>
                                            <div id$="Chat_{{rowdata.StdAttributes.S_WO_ID}}" class="clear-chatBubbleOutline clearChat" value="{{rowdata.StdAttributes}}" on-click="ChatIconAction"></div>
                                            <div class="iconsContainer" id$="actionsMenu_[[b_index]]">
                                                <div class="clear-actionsF actionsIconMob" on-tap="ShowActionMenuForMobille" id="actions_mob"></div>
                                                <div class="iconsInnerContainer">
                                                    <div class="FL actionMob">
                                                        <pft-essenceupload row-data="{{rowdata}}" ignoreattr="onclick" uid="idEssenceUpload" onclick=" loadAttributes('idEssenceUpload', 'pft-essenceupload', 'hide-class')"></pft-essenceupload>
                                                    </div>
                                                    <div class="FL actionMob">
                                                        <template is="dom-if" if="{{CheckWOStatus(rowdata.StdAttributes.S_STATUS)}}">
                                                            <pft-actionstartwo row-data="{{rowdata}}"></pft-actionstartwo>
                                                        </template>
                                                    </div>
                                                    <div class="FL actionMob">
                                                        <pft-actioncomponenthz row-info="{{rowdata}}" ignoreattr="data;onclick;cssclass-name" uid="idActnCmptHzCx1" data="Action" cssclass-name="actEditWO"></pft-actioncomponenthz>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="clr"></div>
                                    </td>
                                    <td class$="cl3 pftcuscol {{headerData.HeaderCollection.2.headerCss}}">
                                        <pft-text ignoreattr="value;onclick" uid="custcol1" value="{{rowdata.Attributes.CusColumn1}}" onclick="loadAttributes('custcol1', 'pft-text', 'value')"></pft-text>
                                    </td>
                                    <td class$="cl4 pftcuscol {{headerData.HeaderCollection.3.headerCss}}">
                                        <pft-text ignoreattr="value;onclick" uid="custcol2" value="{{rowdata.Attributes.CusColumn2}}" onclick="loadAttributes('custcol2', 'pft-text', 'value')"></pft-text>
                                    </td>
                                    <td class$="cl5 pftcuscol {{headerData.HeaderCollection.4.headerCss}}">
                                        <pft-text ignoreattr="value;onclick" uid="custcol3" value="{{rowdata.Attributes.CusColumn3}}" onclick="loadAttributes('custcol3', 'pft-text', 'value')"></pft-text>
                                    </td>
                                    <td class$="cl6 pftwfcomponent progressStatusCol{{dashboardType}}" style$="width:{{statusbarColwidth}}px">
                                        <!-- Ignored Tag start -->
                                        <div id="parentWfWrapper" class="parentWfWrapper">
                                            <div id="parentWfTemplate" class="addWfTemplate" title="Click here to Add workflow templates" on-click="addWFTemplate">+ Add WF Template(s)</div>
                                            <div class="parentWfTempWrapper"></div>
                                        </div>
                                        <!-- Ignored Tag end -->
                                        <!--Consider Tag start
                                        <div class="wfStatusBars">
                                            <template is="dom-repeat" items="{{GetWorkflowStepsInfoObj(rowdata.Attributes.WorkflowInstances)}}" as="value" index-as="w_index">
                                                <pft-wfcomponent dashboard-type="{{dashboardType}}" wf-data="{{value}}" action="{{action}}" row-data="{{rowdata}}" statusbar-colwidth="{{statusbarColwidth}}"></pft-wfcomponent>
                                            </template>
                                        </div>
                                        Consider Tag end-->
                                    </td>
                                </tr>
                            </template>
                        </tbody>
                    </table>
                    <div id="subWOdataContainer_Clear_ProcessMonitoringTemplate" class="subWOdataContainer">
                        <div id="overlay_Clear_ProcessMonitoringTemplate" class="drillDownOverlay" style="display:none"></div>
                        <div id="subWorkorderData_Clear_ProcessMonitoringTemplate" class="subWorkOrderData"></div>
                        <div id="statusBarHilite_Clear_ProcessMonitoringTemplate" class="WFhilite"></div>
                    </div>
                </div>
            </div>
        </div>
    </template>
    <script>
        /* Ignored properties start */
        Polymer({
            is: "PFT-Clear_ProcessMonitoringTemplate",
            properties: {
                data: {
                    type: Object,
                    value: { "PFTBody": { "PFTRow": [{ "Attributes": { "MAINTITLE": "Title", "CreatedBy": "ABC", "CusColumn1": "Value1", "CusColumn2": "Value2", "CusColumn3": "Value3", "AssetDetails_ThumbURL": "/BC/Product/Images/Elements/Assets/Preview/sampleImage.jpg", "S_WO_ID": "Simple-TEXT-067587", "OBJID": "4002-467374", "ObjTenantId": "4002", "S_DUE_DATE": "Wed 01 Jun 2020" }, "StdAttributes": { "S_WO_ID": "QCFail--20171208203119210--7861--WO--4002", "WorkorderId": "", "TaskId": "", "S_DMGUID": "4002-335545", "ObjTenantId": "4002", "StatusAcronym": "", "TaskTypeAcronym": "" } }] }, "TotalPages": 22, "AdditionalInfo": null }
                    //  value: { "PFTBody": { "PFTRow": [{ "Attributes": { "MAINTITLE": "Title", "CreatedBy": "ABC", "CusColumn1": "Value1", "CusColumn2": "Value2", "CusColumn3": "Value3", "AssetDetails_ThumbURL": "/BC/Product/Images/Elements/Assets/Preview/sampleImage.jpg", "S_WO_ID": "Simple-TEXT-067587", "OBJID": "4002-467374", "ObjTenantId": "4002", "S_DUE_DATE": "Wed 01 Jun 2020", "WorkflowInstances": "[{\"WorkflowStepsInfo\":[{\"_id\":null,\"TenantID\":null,\"WorkflowInstanceID\":\"61510\",\"StepGuid\":null,\"WFTemplateName\":null,\"WorkflowItemID\":null,\"StepType\":null,\"StepStatus\":\"Completed\",\"StepStatusId\":null,\"TaskStatus\":null,\"LastUpdatedOn\":null,\"LastError\":null,\"TaskId\":null,\"TaskDisplayName\":null,\"NodeInstanceId\":null,\"Cng\":\"_DBF76B93-93E2-4454-9978-9BEEBCCD9506\"},{\"_id\":null,\"TenantID\":null,\"WorkflowInstanceID\":\"61520\",\"StepGuid\":null,\"WFTemplateName\":null,\"WorkflowItemID\":null,\"StepType\":null,\"StepStatus\":\"Failed\",\"StepStatusId\":null,\"TaskStatus\":null,\"LastUpdatedOn\":null,\"LastError\":null,\"TaskId\":null,\"TaskDisplayName\":null,\"NodeInstanceId\":null,\"Cng\":\"_DBF76B93-93E2-4454-9978-9BEEBCCD9506\"},{\"_id\":null,\"TenantID\":null,\"WorkflowInstanceID\":\"61620\",\"StepGuid\":null,\"WFTemplateName\":null,\"WorkflowItemID\":null,\"StepType\":null,\"StepStatus\":\"NA\",\"StepStatusId\":null,\"TaskStatus\":null,\"LastUpdatedOn\":null,\"LastError\":null,\"TaskId\":null,\"TaskDisplayName\":null,\"NodeInstanceId\":null,\"Cng\":\"_DBF76B93-93E2-4454-9978-9BEEBCCD9506\"},{\"_id\":null,\"TenantID\":null,\"WorkflowInstanceID\":\"61620\",\"StepGuid\":null,\"WFTemplateName\":null,\"WorkflowItemID\":null,\"StepType\":null,\"StepStatus\":\"NA\",\"StepStatusId\":null,\"TaskStatus\":null,\"LastUpdatedOn\":null,\"LastError\":null,\"TaskId\":null,\"TaskDisplayName\":null,\"NodeInstanceId\":null,\"Cng\":\"_DBF76B93-93E2-4454-9978-9BEEBCCD9506\"},{\"_id\":null,\"TenantID\":null,\"WorkflowInstanceID\":\"61620\",\"StepGuid\":null,\"WFTemplateName\":null,\"WorkflowItemID\":null,\"StepType\":null,\"StepStatus\":\"NA\",\"StepStatusId\":null,\"TaskStatus\":null,\"LastUpdatedOn\":null,\"LastError\":null,\"TaskId\":null,\"TaskDisplayName\":null,\"NodeInstanceId\":null,\"Cng\":\"_DBF76B93-93E2-4454-9978-9BEEBCCD9506\"},{\"_id\":null,\"TenantID\":null,\"WorkflowInstanceID\":\"61620\",\"StepGuid\":null,\"WFTemplateName\":null,\"WorkflowItemID\":null,\"StepType\":null,\"StepStatus\":\"NA\",\"StepStatusId\":null,\"TaskStatus\":null,\"LastUpdatedOn\":null,\"LastError\":null,\"TaskId\":null,\"TaskDisplayName\":null,\"NodeInstanceId\":null,\"Cng\":\"_DBF76B93-93E2-4454-9978-9BEEBCCD9506\"}], \"WFStatus\":\"Failed\", \"ProcessInstanceId\":\"69774\"}]" }, "StdAttributes": { "S_WO_ID": "QCFail--20171208203119210--7861--WO--4002", "WorkorderId": "", "TaskId": "", "S_DMGUID": "4002-335545", "ObjTenantId": "4002", "StatusAcronym": "", "TaskTypeAcronym": "" } }] }, "TotalPages": 22, "AdditionalInfo": null }
                },
                headerData: {
                    type: Object,
                    value: { HeaderCollection: [{ "headerName": "HDR1", "headerCss": "" }, { "headerName": "HDR2", "headerCss": "" }, { "headerName": "HDR3", "headerCss": "cusHeader" }, { "headerName": "HDR4", "headerCss": "cusHeader" }, { "headerName": "HDR5", "headerCss": "cusHeader" }] }
                },
                action: {
                    type: Object,
                    value: { "IsSearchRequired": "false", "CreateActionConfig": [{ "IsCreateActionRequired": "false" }], "EditActionConfig": [{ "IsEditActionRequired": "true", "EditActionFunction": "loadEditWOForm", "ToolTip": "Click here to edit workOrder" }], "DeleteActionConfig": [{ "IsDeleteActionRequired": "false" }], "QCDropDownConfig": [{ "DisplayName": "Download Report", "DropDownClassName": "" }, { "DisplayName": "QC Override", "DropDownClassName": "ovrRideStatusComplete clear-tick" }], "AQCDropDownConfig": [{ "DisplayName": "Download AQC Report", "DropDownClassName": "" }, { "DisplayName": "AQC Override Pass", "DropDownClassName": "ovrRideStatusComplete clear-tick" }, { "DisplayName": "AQC Override Fail", "DropDownClassName": "ovrRideStatusComplete clear-tick" }] }
                },
                defaultParams: {
                    type: Object,
                    //value: { "TemplateName": "Clear_ProcessMonitoringTemplate", "InstanceName": "sample", "Header": "[{\"headerName\":\"DUE DATE\",\"headerCss\":\"\"},{\"headerName\":\"TITLE\",\"headerCss\":\"\"},{\"headerName\":\"\",\"headerCss\":\"hideMe\"},{\"headerName\":\"\",\"headerCss\":\"hideMe\"},{\"headerName\":\"\",\"headerCss\":\"hideMe\"}]", "Components": [{ "UID": "idActnCmptHzCx1_0", "ColNumber": 0, "ComponentType": "pft-text", "ParentComponent": "idActnCmptHzCx1", "Attributes": [{ "AttrName": "data", "AttrValue": [{ "Value": "Re-Instantiate", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "cssclass-name", "AttrValue": [{ "Value": "actReInitWO", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "function-name", "AttrValue": [{ "Value": "InvokeReInstantiation", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "function-params", "AttrValue": [], "AttrFunctionParams": [{ "Params": [{ "ParamName": "workOrderId", "ParamValue": [{ "Value": "S_WO_ID", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }, { "ParamName": "status", "ParamValue": [{ "Value": "S_STATUS", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }, { "ParamName": "workOrderType", "ParamValue": [{ "Value": "S_WO_TYPE", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }] }], "IsStatic": false }] }, { "UID": "idDueDate", "ColNumber": 0, "ComponentType": "pft-duedate", "ParentComponent": "", "Attributes": [{ "AttrName": "due-date", "AttrValue": [{ "Value": "S_DUE_DATE", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }] }, { "UID": "idThumbURL", "ColNumber": 0, "ComponentType": "pft-image", "ParentComponent": "", "Attributes": [{ "AttrName": "value", "AttrValue": [{ "Value": "AssetDetails.ThumbURL", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }, { "AttrName": "function-name", "AttrValue": [{ "Value": "OpenAssetViewerTool", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "function-params", "AttrValue": [], "AttrFunctionParams": [{ "Params": [{ "ParamName": "objId", "ParamValue": [{ "Value": "S_DMGUID", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }, { "ParamName": "objTenantId", "ParamValue": [{ "Value": "ObjTenantId", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }] }], "IsStatic": false }] }, { "UID": "idTitle", "ColNumber": 0, "ComponentType": "pft-title", "ParentComponent": "", "Attributes": [{ "AttrName": "title", "AttrValue": [{ "Value": "MAINTITLE", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }, { "AttrName": "function-name", "AttrValue": [{ "Value": "InvokeEditActionMethod", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "function-params", "AttrValue": [], "AttrFunctionParams": [{ "Params": [{ "ParamName": "workOrderId", "ParamValue": [{ "Value": "S_WO_ID", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }, { "ParamName": "status", "ParamValue": [{ "Value": "S_STATUS", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }, { "ParamName": "workOrderType", "ParamValue": [{ "Value": "S_WO_TYPE", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }] }], "IsStatic": false }] }, { "UID": "idTxtCmptHzCx1_0", "ColNumber": 0, "ComponentType": "pft-text", "ParentComponent": "idTxtCmptHzCx1", "Attributes": [{ "AttrName": "labels", "AttrValue": [{ "Value": "Due Date", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "data", "AttrValue": [{ "Value": "S_DUE_DATE", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }] }, { "UID": "idTxtCmptVtCx1_0", "ColNumber": 0, "ComponentType": "pft-text", "ParentComponent": "idTxtCmptVtCx1", "Attributes": [{ "AttrName": "labels", "AttrValue": [{ "Value": "", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "data", "AttrValue": [{ "Value": "S_WO_ID", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }] }, { "UID": "idEssenceUpload", "ColNumber": 0, "ComponentType": "pft-essenceupload", "ParentComponent": "", "Attributes": [{ "AttrName": "hide-class", "AttrValue": [{ "Value": "hideMe", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }] }], "PageSize": 10 }
                      value: { "TemplateName": "Clear_ProcessMonitoringTemplate", "InstanceName": "sample", "Header": "[{\"headerName\":\"DUE DATE\",\"headerCss\":\"\"},{\"headerName\":\"TITLE\",\"headerCss\":\"\"},{\"headerName\":\"\",\"headerCss\":\"hideMe\"},{\"headerName\":\"\",\"headerCss\":\"hideMe\"},{\"headerName\":\"\",\"headerCss\":\"hideMe\"}]", "Components": [{ "UID": "idActnCmptHzCx1_0", "ColNumber": 0, "ComponentType": "pft-text", "ParentComponent": "idActnCmptHzCx1", "Attributes": [{ "AttrName": "data", "AttrValue": [{ "Value": "RESTART", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "cssclass-name", "AttrValue": [{ "Value": "actReInitWO", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "function-name", "AttrValue": [{ "Value": "InvokeReInstantiation", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "function-params", "AttrValue": [], "AttrFunctionParams": [{ "Params": [{ "ParamName": "workOrderId", "ParamValue": [{ "Value": "S_WO_ID", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }, { "ParamName": "status", "ParamValue": [{ "Value": "S_STATUS", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }, { "ParamName": "workOrderType", "ParamValue": [{ "Value": "S_WO_TYPE", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }] }], "IsStatic": false }] }, { "UID": "idDueDate", "ColNumber": 0, "ComponentType": "pft-duedate", "ParentComponent": "", "Attributes": [{ "AttrName": "due-date", "AttrValue": [{ "Value": "S_DUE_DATE", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }] }, { "UID": "idThumbURL", "ColNumber": 0, "ComponentType": "pft-image", "ParentComponent": "", "Attributes": [{ "AttrName": "value", "AttrValue": [{ "Value": "AssetDetails.ThumbURL", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }, { "AttrName": "cssclass-name", "AttrValue": [{ "Value": "", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }, { "AttrName": "function-name", "AttrValue": [{ "Value": "OpenAssetViewerTool", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "function-params", "AttrValue": [], "AttrFunctionParams": [{ "Params": [{ "ParamName": "objId", "ParamValue": [{ "Value": "S_DMGUID", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }, { "ParamName": "objTenantId", "ParamValue": [{ "Value": "ObjTenantId", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }] }], "IsStatic": false }] }, { "UID": "idTitle", "ColNumber": 0, "ComponentType": "pft-title", "ParentComponent": "", "Attributes": [{ "AttrName": "title", "AttrValue": [{ "Value": "MAINTITLE", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }, { "AttrName": "function-name", "AttrValue": [{ "Value": "InvokeEditActionMethod", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "function-params", "AttrValue": [], "AttrFunctionParams": [{ "Params": [{ "ParamName": "workOrderId", "ParamValue": [{ "Value": "S_WO_ID", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }, { "ParamName": "status", "ParamValue": [{ "Value": "S_STATUS", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }, { "ParamName": "workOrderType", "ParamValue": [{ "Value": "S_WO_TYPE", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }] }], "IsStatic": false }] }, { "UID": "idTxtCmptHzCx1_0", "ColNumber": 0, "ComponentType": "pft-text", "ParentComponent": "idTxtCmptHzCx1", "Attributes": [{ "AttrName": "labels", "AttrValue": [{ "Value": "Due Date", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "data", "AttrValue": [{ "Value": "S_DUE_DATE", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }] }, { "UID": "idTxtCmptVtCx1_0", "ColNumber": 0, "ComponentType": "pft-text", "ParentComponent": "idTxtCmptVtCx1", "Attributes": [{ "AttrName": "labels", "AttrValue": [{ "Value": "", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "data", "AttrValue": [{ "Value": "S_WO_ID", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }] }, { "UID": "idEssenceUpload", "ColNumber": 0, "ComponentType": "pft-essenceupload", "ParentComponent": "", "Attributes": [{ "AttrName": "hide-class", "AttrValue": [{ "Value": "hideMe", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }] }], "PageSize": 10 }
                },
                sortData: {
                    type: Array
                },
                filterData: {
                    type: Array
                },
                staticFilter: {
                    type: Array
                },
                dashboardType: {
                    type: String,
                    value: "chevron"
                },
                requestParams: {
                    type: Array
                },
            },
            ready: function () {
                this.async(function localInvoke() {
                    if (typeof _insAttrMap !== 'undefined' && _insAttrMap != "") {
                        for (var i = 0; i < _insAttrMap.Components.length; i++) {
                            if (_insAttrMap.Components[i].UID.includes('idActnCmptHzCx') && _insAttrMap.Components[i].UID != 'idActnCmptHzCx1_0') {
                                addMoreActionComps();
                            }
                        }
                    }
                    jQuery('.processV2HeaderWrap .cl1').addClass('pftduedate');
                    jQuery('.processV2HeaderWrap .cl3').addClass('pftcuscol');
                    jQuery('.processV2HeaderWrap .cl4').addClass('pftcuscol');
                    jQuery('.processV2HeaderWrap .cl5').addClass('pftcuscol');
                    jQuery('.style-scope').removeClass('style-scope');
                    jQuery('.pft-' + 'clear_processmonitoringtemplate').removeClass('pft-' + 'clear_processmonitoringtemplate');
                    indexedDBExists(this.defaultParams);
                }, 1)
                OnDashboardLoad(this.domHost, this.data);
            },
            CheckForData: function (data) {
                if (data === null || data == undefined || data.length == 0 || data.PFTBody.PFTRow.length == 0)
                    return true;
            },
            GetWorkflowStepsInfoObj: function (wfstepsInfo) {
                var wfStepsObj;
                if (wfstepsInfo != undefined && wfstepsInfo != "") {
                    wfStepsObj = JSON.parse(wfstepsInfo);
                }
                return wfStepsObj;
            },
            SUT_USR: function (date, y) {
                return SUT_USR(date, y);
            },
            addMoreActionComps: function () {
                addMoreActionComps();
            },
            incrementIndex: function (index) {
                return index + 1;
            },
            ShowActionMenuForMobille: function (event) {
                var id = event.target.parentElement.id;
                var actionIcon = $jq('#' + id).find('.iconsInnerContainer');
                if ($jq(actionIcon).hasClass('showActionMenu')) {
                    $jq('.iconsInnerContainer').removeClass('showActionMenu');
                    $jq(actionIcon).removeClass('showActionMenu');
                    document.body.removeEventListener('click', hideMoreActionMenu, false);
                }
                else {
                    $jq('.iconsInnerContainer').removeClass('showActionMenu');
                    $jq(actionIcon).addClass('showActionMenu');
                    document.body.addEventListener('click', hideMoreActionMenu, false);
                }
            },
            CheckWOStatus: function (data) {
                if (data != null && data.toLowerCase() == "new")
                    return true;
                else
                    return false;
            },
            addWFTemplate: function (event) {
                addWFTemplate(event.target.id);
            },
            SetStatusBarColumnCss: function (index, data) {
                if (index == 0)
                    this.statusbarColwidth = GetStatusBarColWidth(data);
                return GetCssClassNameforHeader(index);
            }
        })
        /* Ignored properties end *//*
        Polymer({
            is: "PFT-Clear_ProcessMonitoringTemplate",
            properties: {
                pageNo: {
                    type: Number,
                    value: 0
                },
                pageSize: {
                    type: Number
                },
                data: {
                    type: Array
                },
                headerData: {
                    type: Array
                },
                action: {
                    type: Array
                },
                sortData: {
                    type: Array
                },
                filterData: {
                    type: Array
                },
                staticFilter: {
                    type: Array
                },
                requestParams: {
                    type: Array
                },
                selectedTemplate: {
                    type: String
                }
            },
            attached: function () {
               OnDashboardLoad(this.domHost,this.data);
               ToggleToolBar(this.domHost);
            },
            loadData: function (isPaginationRequired) {
                LoadDashboardData(isPaginationRequired);
            },
            incrementIndex: function (index) {
                return index + 1;
            },
            CheckForData: function (data) {
                if (data === null || data == undefined || data.length == 0 || data.PFTBody.PFTRow.length == 0)
                    return true;
            },
            CheckForCustomData: function (customData) {
                if (customData != undefined || customData != null)
                    return true;
                else
                    return false;
            },
            GetWorkflowStepsInfoObj: function (wfstepsInfo) {
                var wfStepsObj;
                if (wfstepsInfo != undefined && wfstepsInfo != "") {
                    wfStepsObj = JSON.parse(wfstepsInfo);
                }
                return wfStepsObj;
            },
            SUT_USR: function (date, y) {
                return SUT_USR(date, y);
            },
            ShowActionMenuForMobille: function (event) {
                var id = event.target.parentElement.id;
                var actionIcon = $jq('#' + id).find('.iconsInnerContainer');
                if ($jq(actionIcon).hasClass('showActionMenu')) {
                    $jq('.iconsInnerContainer').removeClass('showActionMenu');
                    $jq(actionIcon).removeClass('showActionMenu');
                    document.body.removeEventListener('click', hideMoreActionMenu, false);
                }
                else {
                    $jq('.iconsInnerContainer').removeClass('showActionMenu');
                    $jq(actionIcon).addClass('showActionMenu');
                    document.body.addEventListener('click', hideMoreActionMenu, false);
                }
            },
            CheckWOStatus: function (data) {
                if(data!=null && data.toLowerCase()=="new")
                    return true;
                else
                    return false;
            },
            stringifyDefaultObj: function (value) {
                return stringifyDefaultObj(value);
            },
            SetStatusBarColumnCss: function (index, data) {
                if (index == 0)
                    this.statusbarColwidth = GetStatusBarColWidth(data);
                return GetCssClassNameforHeader(index);
            },
            CalculateTaskDuration: function(duration,frameRate){
                return CalculateTaskDuration(duration,frameRate);
            },
            ChatIconAction: function(e)
            {
                var rowStdAttr = $jq('#' + e.target.id).val();
                if((isMobile.any()))
                {
                    LoadChatView(rowStdAttr.S_WO_ID, rowStdAttr.MAINTITLE, null);
                }
            }
        });
        //*/
    </script>
</dom-module><dom-module id="PFT-Clear_ProcessMonitoringTemplateV2" assetpath="DashboardTemplates/">
    <template>
        <div id="Clear_ProcessMonitoringTemplateV2" class="processV3Wrap">
            <div id="PFTToolbar" class="PFTToolbar">
                <pft-toolbar id="toolBar" sort-data="{{sortData}}" filter-data="{{filterData}}" search-required="{{action.IsSearchRequired}}" static-filter="{{staticFilter}}" function-name="{{action.filterSortOnclickFunction}}"></pft-toolbar>
            </div>
            <div class="processV3HeaderWrap">
                <table id="clear_processmonitoringtemplateV2Header" class="processV3 clear_processmonitoringtemplate">
                    <thead>
                        <tr>
                            <template is="dom-repeat" items="{{headerData.HeaderCollection}}" as="headerVal" index-as="h_index">
                                <th class$="cl{{incrementIndex(h_index)}} {{headerVal.headerCss}} {{SetStatusBarColumnCss(h_index,data.PFTBody.PFTRow)}}">
                                    <div class="headerDataCell" onclick$="loadAttributes('idHeader{{incrementIndex(h_index)}}', 'pft-header', 'headerName;headerCss')">{{headerVal.headerName}}</div>
                                </th>
                            </template>
                            <th class$="cl3 pftwfcomponent progressStatusCol{{dashboardType}}" style$="width:{{statusbarColwidth}}px"></th>
                        </tr>
                    </thead>
                </table>
            </div>
            <div id="clear_processmonitoringtemplateV2Scroll" class="processV3Scroll container" dashboarddatacontainer="">
                <div class="content">
                    <table id="clear_processmonitoringtemplateV2Data" class="processV3 clear_processmonitoringtemplate">
                        <tbody class="">
                            <template is="dom-if" if="{{CheckForData(data)}}">
                                <tr><td><div class="noData">No Records Found.</div></td></tr>
                            </template>
                            <template is="dom-repeat" items="{{data.PFTBody.PFTRow}}" as="rowdata" index-as="b_index">
                                <tr id$="pr{{incrementIndex(b_index)}}" class="wRow" ignoreattr="woType">
                                    <td class$="cl1 pftduedate {{headerData.HeaderCollection.0.headerCss}}">
                                        <div class="smartAlertWrapper" title="">
                                            <pft-smartalerts id$="Alert_{{rowdata.StdAttributes.S_WO_ID}}" tenantid="{{rowdata.StdAttributes.ObjTenantId}}"></pft-smartalerts>
                                        </div>
                                        <div class="dueDateWrapper"><pft-duedate uid="idDueDate" ignoreattr="due-date;onclick" due-date="{{rowdata.Attributes.S_DUE_DATE}}" onclick="loadAttributes('idDueDate', 'pft-duedate', 'due-date')"></pft-duedate></div>
                                    </td>
                                    <td class$="cl2 titleInfo {{headerData.HeaderCollection.1.headerCss}}">
                                        <!--<div class="thumbWrapper"><pft-image parent-class="pr{{incrementIndex(b_index)}}" ignoreattr="value;onclick" uid="idThumbURL" value="{{rowdata.Attributes.AssetDetails_ThumbURL}}" onclick="loadAttributes('idThumbURL','pft-image','value;function-name;function-params')"></pft-image></div>-->
                                        <div class="thumbWrapper"><pft-image parent-class="pr{{incrementIndex(b_index)}}" ignoreattr="value;onclick;css-classname" uid="idThumbURL" value="{{rowdata.Attributes.AssetDetails_ThumbURL}}" css-classname="" onclick="loadAttributes('idThumbURL', 'pft-image', 'value;function-name;function-params;css-classname')"></pft-image></div>
                                        <div class="metaDetails">
                                            <pft-title title="{{rowdata.Attributes.MAINTITLE}}" value="{{rowdata.Attributes.MAINTITLE}}" ignoreattr="value;onclick;title" uid="idTitle" onclick="loadAttributes('idTitle', 'pft-title', 'title;function-name;function-params')"></pft-title>
                                            <div class="pfttextcomponent">
                                                <pft-textcomponenthz textseparator="|" ignoreattr="data;labels" uid="idTxtCmptHzCx1" data="{{rowdata.Attributes.S_WO_ID}}" labels="Wo ID"></pft-textcomponenthz>
                                                <pft-textcomponenthz textseparator="|" ignoreattr="data;labels" uid="idTxtCmptHzCx2" data="{{rowdata.Attributes.S_DUE_DATE}}" labels="Due Date"></pft-textcomponenthz>
                                                <pft-textcomponenthz textseparator="|" ignoreattr="data;labels" uid="idTxtCmptHzCx3" data="{{rowdata.Attributes.CreatedBy}}" labels="Uploaded By"></pft-textcomponenthz>
                                            </div>
                                            <div id$="Chat_{{rowdata.StdAttributes.S_WO_ID}}" class="clear-chatBubbleOutline clearChat" value="{{rowdata.StdAttributes}}" on-click="ChatIconAction"></div>
                                            <div class="iconsContainer" id$="actionsMenu_[[b_index]]">
                                                <div class="clear-actionsF actionsIconMob" on-tap="ShowActionMenuForMobille" id="actions_mob"></div>
                                                <div class="iconsInnerContainer">
                                                    <div class="FL actionMob">
                                                        <!--<pft-essenceupload row-data="{{rowdata}}"></pft-essenceupload>-->
                                                        <pft-essenceupload row-data="{{rowdata}}" ignoreattr="onclick" uid="idEssenceUpload" onclick=" loadAttributes('idEssenceUpload', 'pft-essenceupload', 'hide-class')"></pft-essenceupload>
                                                    </div>
                                                    <div class="FL actionMob">
                                                        <template is="dom-if" if="{{CheckWOStatus(rowdata.StdAttributes.S_STATUS)}}">
                                                            <pft-actionstartwo row-data="{{rowdata}}"></pft-actionstartwo>
                                                        </template>
                                                    </div>
                                                    <div class="FL actionMob">
                                                        <pft-actioncomponenthz row-info="{{rowdata}}" ignoreattr="data;onclick;cssclass-name" uid="idActnCmptHzCx1" data="Action" cssclass-name="actEditWO"></pft-actioncomponenthz>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="clr"></div>
                                    </td>
                                    <td class$="pad0 wfInstanceCol pftwfcomponent progressStatusCol{{dashboardType}}" style$="width:{{v2ColWidth}}px">
                                        <!-- Ignored Tag start -->
                                        <div id="parentWfWrapper" class="parentWfWrapper">
                                            <div id="parentWfTemplate" class="addWfTemplate" title="Click here to Add WF Template(s)" on-click="addWFTemplate">+ Add WF Template(s) (Parent WO) </div>
                                            <div class="parentWfTempWrapper"></div>
                                        </div>
                                        <div id="childWfWrapper" class="childWfWrapper">
                                            <div id="childWfTemplate" class="addWfTemplate" title="Click here to Add Secondary WO(s)" onclick="loadAttributes('idWfcomponent1', 'pft-wfcomponent', '')">+ Add Secondary WO(s)</div>
                                            <div class="childWOWrapper"></div>
                                        </div>
                                         <!-- Ignored Tag end -->
                                         <!--Consider Tag start
                                        <ul class="WFTblV2">
                                            <template is="dom-if" if="{{CheckForWFInstances(rowdata.Attributes.WorkflowInstances)}}">
                                                <li class="WFTblV2MetaWrapper" id$="[[AssignRowId(o_index)]]">
                                                    <div class="WFTblV2MetaData pfttext">
                                                        <pft-text value="PARENTMETADATA1"></pft-text>
                                                        <div class="pfttextcomponent subWOMetaData">
                                                            <pft-textcomponenthz textseparator="|" labels="" data="PARENTMETADATA2"></pft-textcomponenthz>
                                                        </div>
                                                    </div>
                                                    <div class$="progressStatusCol{{dashboardType}} WFTblV2ProgressCol" style$="width:{{statusbarColwidth}}px">
                                                        <div class="wfStatusBars">
                                                            <template is="dom-repeat" items="{{GetWorkflowStepsInfoObj(rowdata.Attributes.WorkflowInstances)}}" as="value" index-as="w_index">
                                                                <pft-wfcomponent dashboard-type="{{dashboardType}}" wf-data="{{value}}" action="{{action}}" row-data="{{rowdata}}" statusbar-colwidth="{{statusbarColwidth}}"></pft-wfcomponent>
                                                            </template>
                                                        </div>
                                                    </div>
                                                </li>
                                            </template>
                                            <template is="dom-repeat" items="{{GetSubWoDataObj(rowdata.Attributes.SubWOData)}}" as="SubWOData" index-as="r_index">
                                                <template is="dom-if" if="{{CheckForWFInstances(SubWOData.Attributes.WorkflowInstances)}}">
                                                    <li class="WFTblV2MetaWrapper" id$="[[AssignRowId(o_index)]]">
                                                       Repeat element start
                                                        <template is="dom-if" if="{{CheckForSubWOType(SubWOData.Attributes.S_WO_TYPE,'WOTYPENAME')}}">
                                                        <div class="WFTblV2MetaData pfttext">
                                                                <pft-text class="subWOTitle" value="SUBWOMETADATA1"></pft-text>
                                                                <div class="pfttextcomponent subWOMetaData">
                                                                    <pft-textcomponenthz textseparator="|" labels="" data="SUBWOMETADATA2"></pft-textcomponenthz>
                                                                </div>
                                                        </div>
                                                        </template>
                                                        Repeat element end
                                                        <div class$="progressStatusCol{{dashboardType}} WOmetadataTD2" style$="width:{{statusbarColwidth}}px">
                                                            <div class="wfStatusBars">
                                                                <template is="dom-repeat" items="{{GetWorkflowStepsInfoObj(SubWOData.Attributes.WorkflowInstances)}}" as="subWovalue" index-as="s_index">
                                                                    <pft-wfcomponent dashboard-type="{{dashboardType}}" wf-data="{{subWovalue}}" action="{{action}}" row-data="{{SubWOData}}" statusbar-colwidth="{{statusbarColwidth}}"></pft-wfcomponent>
                                                                </template>
                                                            </div>
                                                        </div>
                                                    </li>
                                                </template>
                                            </template>
                                        </ul>
                                        Consider Tag end-->
                                    </td>
                                </tr>
                            </template>
                        </tbody>
                    </table>
                    <div id="subWOdataContainer_Clear_ProcessMonitoringTemplateV2" class="subWOdataContainer">
                        <div id="overlay_Clear_ProcessMonitoringTemplateV2" class="drillDownOverlay" style="display:none"></div>
                        <div id="subWorkorderData_Clear_ProcessMonitoringTemplateV2" class="subWorkOrderData"></div>
                        <div id="statusBarHilite_Clear_ProcessMonitoringTemplateV2" class="WFhilite"></div>
                    </div>
                </div>
            </div>
        </div>
    </template>
    <script>
        /* Ignored properties start */
        Polymer({
            is: "PFT-Clear_ProcessMonitoringTemplateV2",
            properties: {
                data: {
                    type: Object,
                    value: { "PFTBody": { "PFTRow": [{ "Attributes": { "MAINTITLE": "ParentTitle", "CreatedBy": "ABC", "CusColumn1": "Value1", "CusColumn2": "Value2", "CusColumn3": "Value3", "AssetDetails_ThumbURL": "/BC/Product/Images/Elements/Assets/Preview/sampleImage.jpg", "S_WO_ID": "Simple-TEXT-067587", "OBJID": "4002-467374", "ObjTenantId": "4002", "S_DUE_DATE": "Wed 01 Jun 2020" }, "StdAttributes": { "S_WO_ID": "QCFail--20171208203119210--7861--WO--4002", "WorkorderId": "", "TaskId": "", "S_DMGUID": "4002-335545", "ObjTenantId": "4002", "StatusAcronym": "", "TaskTypeAcronym": "" } }] }, "TotalPages": 22, "AdditionalInfo": null }
                    //  value: { "PFTBody": { "PFTRow": [{ "Attributes": { "MAINTITLE": "ParentTitle", "CreatedBy": "ABC", "CusColumn1": "Value1", "CusColumn2": "Value2", "CusColumn3": "Value3", "AssetDetails_ThumbURL": "/BC/Product/Images/Elements/Assets/Preview/sampleImage.jpg", "S_WO_ID": "Simple-TEXT-067587", "OBJID": "4002-467374", "ObjTenantId": "4002", "S_DUE_DATE": "Wed 01 Jun 2020", "WorkflowInstances": "[{\"WorkflowStepsInfo\":[{\"DependentWFStepInfo\":null,\"_id\":\"9001--2858--10156\",\"TenantID\":\"9001\",\"WorkflowInstanceID\":\"2858\",\"StepGuid\":\"_84E33BD3-3EA4-49FB-9FB3-FB742F9B7253\",\"WFTemplateName\":\"Demo_Acquisition\",\"WorkflowItemID\":\"10156\",\"StepType\":\"TaskHandler\",\"StepStatus\":\"Initiated\",\"StepProgress\":\"0\",\"StepStatusId\":null,\"TaskStatus\":\"INPROGRESS\",\"CreatedOn\":\"2019/05/22 12:54:16\",\"LastUpdatedOn\":\"2019/05/22 12:54:15\",\"LastError\":\"\",\"TaskId\":\"1676\",\"TaskDisplayName\":null,\"NodeInstanceId\":null,\"Cng\":\"053E9B23769C5E22B92ECE3779FA8EC3\",\"AdditionalInfo\":null,\"DisplayName\":\"ING\",\"ActionType\":null,\"TotalSubWo\":null,\"CompletedSubWo\":null,\"FailedSubWo\":null,\"WOObjId\":null,\"hpid\":null,\"ParentWOWfId\":null},{\"DependentWFStepInfo\":null,\"_id\":null,\"TenantID\":null,\"WorkflowInstanceID\":\"2858\",\"StepGuid\":null,\"WFTemplateName\":null,\"WorkflowItemID\":null,\"StepType\":null,\"StepStatus\":\"NA\",\"StepProgress\":null,\"StepStatusId\":null,\"TaskStatus\":null,\"CreatedOn\":null,\"LastUpdatedOn\":null,\"LastError\":null,\"TaskId\":null,\"TaskDisplayName\":null,\"NodeInstanceId\":null,\"Cng\":\"E06A257E4918DC077F5562539C1CC59C\",\"AdditionalInfo\":null,\"DisplayName\":\"QC\",\"ActionType\":\"QC\",\"TotalSubWo\":null,\"CompletedSubWo\":null,\"FailedSubWo\":null,\"WOObjId\":null,\"hpid\":null,\"ParentWOWfId\":null},{\"DependentWFStepInfo\":null,\"_id\":null,\"TenantID\":null,\"WorkflowInstanceID\":\"2858\",\"StepGuid\":null,\"WFTemplateName\":null,\"WorkflowItemID\":null,\"StepType\":null,\"StepStatus\":\"NA\",\"StepProgress\":null,\"StepStatusId\":null,\"TaskStatus\":null,\"CreatedOn\":null,\"LastUpdatedOn\":null,\"LastError\":null,\"TaskId\":null,\"TaskDisplayName\":null,\"NodeInstanceId\":null,\"Cng\":\"3DB5C275E8FC3BE9FF7F0854498E4E6F\",\"AdditionalInfo\":null,\"DisplayName\":\"CAT\",\"ActionType\":null,\"TotalSubWo\":null,\"CompletedSubWo\":null,\"FailedSubWo\":null,\"WOObjId\":null,\"hpid\":null,\"ParentWOWfId\":null},{\"DependentWFStepInfo\":null,\"_id\":null,\"TenantID\":null,\"WorkflowInstanceID\":\"2858\",\"StepGuid\":null,\"WFTemplateName\":null,\"WorkflowItemID\":null,\"StepType\":null,\"StepStatus\":\"NA\",\"StepProgress\":null,\"StepStatusId\":null,\"TaskStatus\":null,\"CreatedOn\":null,\"LastUpdatedOn\":null,\"LastError\":null,\"TaskId\":null,\"TaskDisplayName\":null,\"NodeInstanceId\":null,\"Cng\":\"9DB2846864E6BAC863DC77170FFB4AFE\",\"AdditionalInfo\":null,\"DisplayName\":\"SUB\",\"ActionType\":null,\"TotalSubWo\":null,\"CompletedSubWo\":null,\"FailedSubWo\":null,\"WOObjId\":null,\"hpid\":null,\"ParentWOWfId\":null},{\"DependentWFStepInfo\":null,\"_id\":null,\"TenantID\":null,\"WorkflowInstanceID\":\"2858\",\"StepGuid\":null,\"WFTemplateName\":null,\"WorkflowItemID\":null,\"StepType\":null,\"StepStatus\":\"NA\",\"StepProgress\":null,\"StepStatusId\":null,\"TaskStatus\":null,\"CreatedOn\":null,\"LastUpdatedOn\":null,\"LastError\":null,\"TaskId\":null,\"TaskDisplayName\":null,\"NodeInstanceId\":null,\"Cng\":\"07D0AD33D8F8D3326BAA07A7C5AAB141\",\"AdditionalInfo\":null,\"DisplayName\":\"DUB\",\"ActionType\":null,\"TotalSubWo\":null,\"CompletedSubWo\":null,\"FailedSubWo\":null,\"WOObjId\":null,\"hpid\":null,\"ParentWOWfId\":null}],\"WFTemplateName\":\"Demo_Acquisition\",\"WFStatus\":\"In Progress\",\"ProcessInstanceId\":\"2858\",\"WFCngs\":\"\"}]", "SubWOData": "[{\"PFTRow\":null,\"Attributes\":{\"MAINTITLE\":\"SubWOTitle\",\"ThumbURL\":\"http://devstream.clearhub.tv/nmdcPH/20190219/others/33821.jpg?R=9\",\"WorkflowInstances\":\"[{\\\"WorkflowStepsInfo\\\":[{\\\"DependentWFStepInfo\\\":null,\\\"_id\\\":null,\\\"TenantID\\\":null,\\\"WorkflowInstanceID\\\":\\\"97182\\\",\\\"StepGuid\\\":null,\\\"WFTemplateName\\\":null,\\\"WorkflowItemID\\\":null,\\\"StepType\\\":null,\\\"StepStatus\\\":\\\"NA\\\",\\\"StepProgress\\\":null,\\\"StepStatusId\\\":null,\\\"TaskStatus\\\":null,\\\"CreatedOn\\\":null,\\\"LastUpdatedOn\\\":null,\\\"LastError\\\":null,\\\"TaskId\\\":null,\\\"TaskDisplayName\\\":null,\\\"NodeInstanceId\\\":null,\\\"Cng\\\":\\\"961AFEF16B2A2E2AC3B244A16C619139\\\",\\\"AdditionalInfo\\\":null,\\\"DisplayName\\\":\\\"APPR\\\",\\\"ActionType\\\":null,\\\"TotalSubWo\\\":null,\\\"CompletedSubWo\\\":null,\\\"FailedSubWo\\\":null,\\\"WOObjId\\\":null,\\\"hpid\\\":null,\\\"ParentWOWfId\\\":null},{\\\"DependentWFStepInfo\\\":null,\\\"_id\\\":null,\\\"TenantID\\\":null,\\\"WorkflowInstanceID\\\":\\\"97182\\\",\\\"StepGuid\\\":null,\\\"WFTemplateName\\\":null,\\\"WorkflowItemID\\\":null,\\\"StepType\\\":null,\\\"StepStatus\\\":\\\"NA\\\",\\\"StepProgress\\\":null,\\\"StepStatusId\\\":null,\\\"TaskStatus\\\":null,\\\"CreatedOn\\\":null,\\\"LastUpdatedOn\\\":null,\\\"LastError\\\":null,\\\"TaskId\\\":null,\\\"TaskDisplayName\\\":null,\\\"NodeInstanceId\\\":null,\\\"Cng\\\":\\\"961AFEF16B2A2E2AC3B244A16C619139\\\",\\\"AdditionalInfo\\\":null,\\\"DisplayName\\\":\\\"APPR\\\",\\\"ActionType\\\":null,\\\"TotalSubWo\\\":null,\\\"CompletedSubWo\\\":null,\\\"FailedSubWo\\\":null,\\\"WOObjId\\\":null,\\\"hpid\\\":null,\\\"ParentWOWfId\\\":null},{\\\"DependentWFStepInfo\\\":null,\\\"_id\\\":null,\\\"TenantID\\\":null,\\\"WorkflowInstanceID\\\":\\\"97182\\\",\\\"StepGuid\\\":null,\\\"WFTemplateName\\\":null,\\\"WorkflowItemID\\\":null,\\\"StepType\\\":null,\\\"StepStatus\\\":\\\"NA\\\",\\\"StepProgress\\\":null,\\\"StepStatusId\\\":null,\\\"TaskStatus\\\":null,\\\"CreatedOn\\\":null,\\\"LastUpdatedOn\\\":null,\\\"LastError\\\":null,\\\"TaskId\\\":null,\\\"TaskDisplayName\\\":null,\\\"NodeInstanceId\\\":null,\\\"Cng\\\":\\\"961AFEF16B2A2E2AC3B244A16C619139\\\",\\\"AdditionalInfo\\\":null,\\\"DisplayName\\\":\\\"APPR\\\",\\\"ActionType\\\":null,\\\"TotalSubWo\\\":null,\\\"CompletedSubWo\\\":null,\\\"FailedSubWo\\\":null,\\\"WOObjId\\\":null,\\\"hpid\\\":null,\\\"ParentWOWfId\\\":null},{\\\"DependentWFStepInfo\\\":null,\\\"_id\\\":null,\\\"TenantID\\\":null,\\\"WorkflowInstanceID\\\":\\\"97182\\\",\\\"StepGuid\\\":null,\\\"WFTemplateName\\\":null,\\\"WorkflowItemID\\\":null,\\\"StepType\\\":null,\\\"StepStatus\\\":\\\"NA\\\",\\\"StepProgress\\\":null,\\\"StepStatusId\\\":null,\\\"TaskStatus\\\":null,\\\"CreatedOn\\\":null,\\\"LastUpdatedOn\\\":null,\\\"LastError\\\":null,\\\"TaskId\\\":null,\\\"TaskDisplayName\\\":null,\\\"NodeInstanceId\\\":null,\\\"Cng\\\":\\\"761752B625DBAEDA53C4F9F73CB2148F\\\",\\\"AdditionalInfo\\\":null,\\\"DisplayName\\\":\\\"REST\\\",\\\"ActionType\\\":null,\\\"TotalSubWo\\\":null,\\\"CompletedSubWo\\\":null,\\\"FailedSubWo\\\":null,\\\"WOObjId\\\":null,\\\"hpid\\\":null,\\\"ParentWOWfId\\\":null},{\\\"DependentWFStepInfo\\\":null,\\\"_id\\\":null,\\\"TenantID\\\":null,\\\"WorkflowInstanceID\\\":\\\"97182\\\",\\\"StepGuid\\\":null,\\\"WFTemplateName\\\":null,\\\"WorkflowItemID\\\":null,\\\"StepType\\\":null,\\\"StepStatus\\\":\\\"NA\\\",\\\"StepProgress\\\":null,\\\"StepStatusId\\\":null,\\\"TaskStatus\\\":null,\\\"CreatedOn\\\":null,\\\"LastUpdatedOn\\\":null,\\\"LastError\\\":null,\\\"TaskId\\\":null,\\\"TaskDisplayName\\\":null,\\\"NodeInstanceId\\\":null,\\\"Cng\\\":\\\"46AF29374B5DE373D8D4D6886253549F\\\",\\\"AdditionalInfo\\\":null,\\\"DisplayName\\\":\\\"TRANS\\\",\\\"ActionType\\\":null,\\\"TotalSubWo\\\":null,\\\"CompletedSubWo\\\":null,\\\"FailedSubWo\\\":null,\\\"WOObjId\\\":null,\\\"hpid\\\":null,\\\"ParentWOWfId\\\":null},{\\\"DependentWFStepInfo\\\":null,\\\"_id\\\":null,\\\"TenantID\\\":null,\\\"WorkflowInstanceID\\\":\\\"97182\\\",\\\"StepGuid\\\":null,\\\"WFTemplateName\\\":null,\\\"WorkflowItemID\\\":null,\\\"StepType\\\":null,\\\"StepStatus\\\":\\\"NA\\\",\\\"StepProgress\\\":null,\\\"StepStatusId\\\":null,\\\"TaskStatus\\\":null,\\\"CreatedOn\\\":null,\\\"LastUpdatedOn\\\":null,\\\"LastError\\\":null,\\\"TaskId\\\":null,\\\"TaskDisplayName\\\":null,\\\"NodeInstanceId\\\":null,\\\"Cng\\\":\\\"6FB3D9546744900CCB179575E1649178\\\",\\\"AdditionalInfo\\\":null,\\\"DisplayName\\\":\\\"PUBL\\\",\\\"ActionType\\\":null,\\\"TotalSubWo\\\":null,\\\"CompletedSubWo\\\":null,\\\"FailedSubWo\\\":null,\\\"WOObjId\\\":null,\\\"hpid\\\":null,\\\"ParentWOWfId\\\":null}],\\\"WFTemplateName\\\":\\\"WOM_Subtitling\\\",\\\"WFStatus\\\":\\\"In Progress\\\",\\\"ProcessInstanceId\\\":\\\"97182\\\",\\\"WFCngs\\\":\\\"\\\"}]\",\"S_WO_ID\":\"ABCPortugese--20190219130455710--7862--WO--4002\",\"S_STATUS\":\"In Progress\",\"S_DUE_DATE\":\"2/27/2020 1:04:00 PM\"},\"StdAttributes\":{\"S_WO_ID\":\"ABCPortugese--20190219130455710--7862--WO--4002\",\"S_DMGUID\":\"4002-893390\",\"ObjTenantId\":\"4002\",\"S_STATUS\":\"In Progress\",\"MAINTITLE\":\"ABC-Portugese\"}}]" }, "StdAttributes": { "S_WO_ID": "QCFail--20171208203119210--7861--WO--4002", "WorkorderId": "", "TaskId": "", "S_DMGUID": "4002-335545", "ObjTenantId": "4002", "StatusAcronym": "", "TaskTypeAcronym": "" } }] }, "TotalPages": 22, "AdditionalInfo": null }
                },
                headerData: {
                    type: Object,
                    value: { HeaderCollection: [{ "headerName": "HDR1", "headerCss": "" }, { "headerName": "HDR2", "headerCss": "" }] }
                },
                action: {
                    type: Object,
                    value: { "IsSearchRequired": "false", "CreateActionConfig": [{ "IsCreateActionRequired": "false" }], "EditActionConfig": [{ "IsEditActionRequired": "true", "EditActionFunction": "loadEditWOForm", "ToolTip": "Click here to edit workOrder" }], "DeleteActionConfig": [{ "IsDeleteActionRequired": "false" }], "QCDropDownConfig": [{ "DisplayName": "Download Report", "DropDownClassName": "" }, { "DisplayName": "QC Override", "DropDownClassName": "ovrRideStatusComplete clear-tick" }], "AQCDropDownConfig": [{ "DisplayName": "Download AQC Report", "DropDownClassName": "" }, { "DisplayName": "AQC Override Pass", "DropDownClassName": "ovrRideStatusComplete clear-tick" }, { "DisplayName": "AQC Override Fail", "DropDownClassName": "ovrRideStatusComplete clear-tick" }] }
                },
                defaultParams: {
                    type: Object,
                    value: { "TemplateName": "Clear_ProcessMonitoringTemplateV2", "InstanceName": "sample", "Header": "[{\"headerName\":\"DUE DATE\",\"headerCss\":\"\"},{\"headerName\":\"TITLE\",\"headerCss\":\"\"}]", "WOTypes": [{ "WOTypeId": "", "Components": [{ "UID": "idActnCmptHzCx1_0", "ColNumber": 0, "ComponentType": "pft-text", "ParentComponent": "idActnCmptHzCx1", "Attributes": [{ "AttrName": "data", "AttrValue": [{ "Value": "RESTART", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "cssclass-name", "AttrValue": [{ "Value": "actReInitWO", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "function-name", "AttrValue": [{ "Value": "InvokeReInstantiation", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "function-params", "AttrValue": [], "AttrFunctionParams": [{ "Params": [{ "ParamName": "workOrderId", "ParamValue": [{ "Value": "S_WO_ID", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }, { "ParamName": "status", "ParamValue": [{ "Value": "S_STATUS", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }, { "ParamName": "workOrderType", "ParamValue": [{ "Value": "S_WO_TYPE", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }] }], "IsStatic": false }] }, { "UID": "idDueDate", "ColNumber": 0, "ComponentType": "pft-duedate", "ParentComponent": "", "Attributes": [{ "AttrName": "due-date", "AttrValue": [{ "Value": "S_DUE_DATE", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }] }, { "UID": "idThumbURL", "ColNumber": 0, "ComponentType": "pft-image", "ParentComponent": "", "Attributes": [{ "AttrName": "value", "AttrValue": [{ "Value": "AssetDetails.ThumbURL", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }, { "AttrName": "cssclass-name", "AttrValue": [{ "Value": "hideMe", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "function-name", "AttrValue": [{ "Value": "OpenAssetViewerTool", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "function-params", "AttrValue": [], "AttrFunctionParams": [{ "Params": [{ "ParamName": "objId", "ParamValue": [{ "Value": "S_DMGUID", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }, { "ParamName": "objTenantId", "ParamValue": [{ "Value": "ObjTenantId", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }] }], "IsStatic": false }] }, { "UID": "idTitle", "ColNumber": 0, "ComponentType": "pft-title", "ParentComponent": "", "Attributes": [{ "AttrName": "title", "AttrValue": [{ "Value": "MAINTITLE", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }, { "AttrName": "title", "AttrValue": [{ "Value": "MAINTITLE", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }, { "AttrName": "function-name", "AttrValue": [{ "Value": "InvokeEditActionMethod", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "function-params", "AttrValue": [], "AttrFunctionParams": [{ "Params": [{ "ParamName": "workOrderId", "ParamValue": [{ "Value": "S_WO_ID", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }, { "ParamName": "status", "ParamValue": [{ "Value": "S_STATUS", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }, { "ParamName": "workOrderType", "ParamValue": [{ "Value": "S_WO_TYPE", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }] }], "IsStatic": false }] }, { "UID": "idTxtCmptHzCx2_0", "ColNumber": 0, "ComponentType": "pft-text", "ParentComponent": "idTxtCmptHzCx2", "Attributes": [{ "AttrName": "labels", "AttrValue": [{ "Value": "Due Date", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "data", "AttrValue": [{ "Value": "S_DUE_DATE", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }] }, { "UID": "idTxtCmptHzCx1_0", "ColNumber": 0, "ComponentType": "pft-text", "ParentComponent": "idTxtCmptHzCx1", "Attributes": [{ "AttrName": "labels", "AttrValue": [{ "Value": "WO ID", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "data", "AttrValue": [{ "Value": "S_WO_ID", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }] }], "PageSize": 10 }] }
                },
                sortData: {
                    type: Array
                },
                filterData: {
                    type: Array
                },
                staticFilter: {
                    type: Array
                },
                dashboardType: {
                    type: String,
                    value: "chevron"
                },
                requestParams: {
                    type: Array
                }
            },
            ready: function () {
                this.async(function localInvoke() {
                    if (typeof _insAttrMap !== 'undefined' && _insAttrMap != "") {
                        for (var i = 0; i < _insAttrMap.Components.length; i++) {
                            if (_insAttrMap.Components[i].UID.includes('idActnCmptHzCx') && _insAttrMap.Components[i].UID != 'idActnCmptHzCx1_0') {
                                addMoreActionComps();
                            }
                        }
                    }
                    jQuery('.processV3HeaderWrap .cl1').addClass('pftduedate');
                    jQuery('.processV3HeaderWrap .cl3').addClass('pftcuscol');
                    jQuery('.processV3HeaderWrap .cl4').addClass('pftcuscol');
                    jQuery('.processV3HeaderWrap .cl5').addClass('pftcuscol');
                    jQuery('.style-scope').removeClass('style-scope');
                    jQuery('.pft-' + 'clear_processmonitoringtemplatev2').removeClass('pft-' + 'clear_processmonitoringtemplatev2');
                    this.defaultParams.WOTypes[0].WOTypeId = createNewInstanceObj.woTypeACRSelected;
                    indexedDBExists(this.defaultParams);
                }, 1)
                OnDashboardLoad(this.domHost, this.data);
            },
            CheckForData: function (data) {
                if (data === null || data == undefined || data.length == 0 || data.PFTBody.PFTRow.length == 0)
                    return true;
            },
            GetWorkflowStepsInfoObj: function (wfstepsInfo) {
                var wfStepsObj;
                if (wfstepsInfo != undefined && wfstepsInfo != "") {
                    wfStepsObj = JSON.parse(wfstepsInfo);
                }
                return wfStepsObj;
            },
            SUT_USR: function (date, y) {
                return SUT_USR(date, y);
            },
            addMoreActionComps: function () {
                addMoreActionComps();
            },
            incrementIndex: function (index) {
                return index + 1;
            },
            ShowActionMenuForMobille: function (event) {
                var id = event.target.parentElement.id;
                var actionIcon = $jq('#' + id).find('.iconsInnerContainer');
                if ($jq(actionIcon).hasClass('showActionMenu')) {
                    $jq('.iconsInnerContainer').removeClass('showActionMenu');
                    $jq(actionIcon).removeClass('showActionMenu');
                    document.body.removeEventListener('click', hideMoreActionMenu, false);
                }
                else {
                    $jq('.iconsInnerContainer').removeClass('showActionMenu');
                    $jq(actionIcon).addClass('showActionMenu');
                    document.body.addEventListener('click', hideMoreActionMenu, false);
                }
            },
            CheckWOStatus: function (data) {
                if (data != null && data.toLowerCase() == "new")
                    return true;
                else
                    return false;
            },
            CheckForWFInstances: function (wfInstances) {
                var wfStepsObj;
                if (wfInstances)
                    wfStepsObj = JSON.parse(wfInstances);
                if (wfStepsObj && wfStepsObj.length > 0)
                    return true;
                else
                    return false;
            },
            GetSubWoDataObj: function (subWoDataJson) {
                var subWoDataObj;
                if (subWoDataJson != undefined && subWoDataJson != "") {
                    subWoDataObj = JSON.parse(subWoDataJson);
                }
                return subWoDataObj;
            },
            addWFTemplate: function (event) {
                addWFTemplate(event.target.id);
            },
            SetStatusBarColumnCss: function (index, data) {
                if (index == 0)
                    this.statusbarColwidth = GetStatusBarColWidth(data);
                return GetCssClassNameforHeader(index);
            }
        })
        /* Ignored properties end *//*
        Polymer({
            is: "PFT-Clear_ProcessMonitoringTemplateV2",
            properties: {
                pageNo: {
                    type: Number,
                    value: 0
                },
                pageSize: {
                    type: Number
                },
                data: {
                    type: Array
                },
                headerData: {
                    type: Array
                },
                action: {
                    type: Array
                },
                sortData: {
                    type: Array
                },
                filterData: {
                    type: Array
                },
                staticFilter: {
                    type: Array
                },
                requestParams: {
                    type: Array
                },
                selectedTemplate: {
                    type: String
                }
            },
            attached: function () {
                OnDashboardLoad(this.domHost,this.data);
                ToggleToolBar(this.domHost);
                this.notClauseValue = GetNotClauseForGroupedDashboards(this.data.PFTBody.PFTRow, this.notClauseValue);
            },
            loadData: function (isPaginationRequired) {
                LoadDashboardData(isPaginationRequired);
            },
            onLoadData: function (isPaginationRequired) {
                this.notClauseValue = GetNotClauseForGroupedDashboards(this.data.PFTBody.PFTRow, this.notClauseValue);
            },
            incrementIndex: function (index) {
                return index + 1;
            },
            CheckForData: function (data) {
                if (data === null || data == undefined || data.length == 0 || data.PFTBody.PFTRow.length == 0)
                    return true;
            },
            CheckForCustomData: function (customData) {
                if (customData != undefined || customData != null)
                    return true;
                else
                    return false;
            },
            GetWorkflowStepsInfoObj: function (wfstepsInfo) {
                var wfStepsObj;
                if (wfstepsInfo != undefined && wfstepsInfo != "") {
                    wfStepsObj = JSON.parse(wfstepsInfo);
                }
                return wfStepsObj;
            },
            SUT_USR: function (date, y) {
                return SUT_USR(date, y);
            },
            ShowActionMenuForMobille: function (event) {
                var id = event.target.parentElement.id;
                var actionIcon = $jq('#' + id).find('.iconsInnerContainer');
                if ($jq(actionIcon).hasClass('showActionMenu')) {
                    $jq('.iconsInnerContainer').removeClass('showActionMenu');
                    $jq(actionIcon).removeClass('showActionMenu');
                    document.body.removeEventListener('click', hideMoreActionMenu, false);
                }
                else {
                    $jq('.iconsInnerContainer').removeClass('showActionMenu');
                    $jq(actionIcon).addClass('showActionMenu');
                    document.body.addEventListener('click', hideMoreActionMenu, false);
                }
            },
            CheckWOStatus: function (data) {
                if(data!=null && data.toLowerCase()=="new")
                    return true;
                else
                    return false;
            },
            CheckForWFInstances: function (wfInstances) {
                var wfStepsObj;
                if (wfInstances)
                    wfStepsObj = JSON.parse(wfInstances);
                if (wfStepsObj && wfStepsObj.length > 0)
                    return true;
                else
                    return false;
            },
            stringifyDefaultObj: function (value) {
                return stringifyDefaultObj(value);
            },
            SetStatusBarColumnCss: function (index, data) {
                if (index == 0){
                    this.statusbarColwidth = GetStatusBarColWidth(data);
                    this.v2ColWidth = this.statusbarColwidth + 135;
                }
                return GetCssClassNameforHeader(index);
            },
            GetSubWoDataObj: function (subWoDataJson) {
                var subWoDataObj;
                if (subWoDataJson != undefined && subWoDataJson != "") {
                    subWoDataObj = JSON.parse(subWoDataJson);
                }
                return subWoDataObj;
            },
            CheckForSubWOType: function(subWOType, value){
            if(subWOType == value)
                return true;
            else
                return false;
            },
            CalculateTaskDuration: function(duration,frameRate){
               return CalculateTaskDuration(duration,frameRate);
            },
             ChatIconAction: function(e)
             {
                var rowStdAttr = $jq('#' + e.target.id).val();
                if((isMobile.any()))
                {
                    LoadChatView(rowStdAttr.S_WO_ID, rowStdAttr.MAINTITLE, null);
                }
            }
        });
        //*/
    </script>
</dom-module><dom-module id="PFT-Clear_MyTasksTemplate" assetpath="DashboardTemplates/">
    <template>
        <div class="lhsGrid FL setWide">
            <div id="Clear_MyTasksTemplate" class="taskV2Wrap">
                <div id="PFTToolbar" class="PFTToolbar">
                    <pft-toolbar id="toolBar" sort-data="{{sortData}}" filter-data="{{filterData}}" static-filter="{{staticFilter}}" function-params="{{requestParams.TaskType}}" action-type="{{requestParams.actionType}}" context="{{requestParams.context}}" dashboardactiontype="{{requestParams.actionType}}" action="{{action}}"></pft-toolbar>
                </div>
                <div class="taskV2HeaderWrap">
                    <table id="clear_mytaskstemplateHeader" class="taskV2 clear_mytaskstemplate">
                        <tbody><tr>
                            <th class="cl1 chckbox">
                                <div id="checkAllBoxDiv" class="SelectBoxH SelectAllBox"><input id="checkAllBox" type="checkbox" on-tap="checkUncheckAllCheckbox"><label for="checkAllBox"></label></div>
                            </th>
                            <template is="dom-repeat" items="{{headerData.HeaderCollection}}" as="headerVal" index-as="h_index">
                                <th class$="cl{{headerIncrementIndex(h_index)}} {{headerVal.headerCss}}">
                                    <div class="headerDataCell" onclick$="loadAttributes('idHeader{{incrementIndex(h_index)}}', 'pft-header', 'headerName;headerCss')">{{headerVal.headerName}}</div>
                                </th>
                            </template>
                        </tr>
                    </tbody></table>
                </div>
                <div id="clear_mytaskstemplateScroll" class="taskV2Scroll container" dashboarddatacontainer="">
                    <div class="content">
                        <table id="clear_mytaskstemplateData" class="taskV2 clear_mytaskstemplate">
                            <template is="dom-if" if="{{isEmptyData(data.PFTBody.PFTRow)}}">
                                <tr><td><div class="noData">No Records Found.</div></td></tr>
                            </template>
                            <template is="dom-repeat" items="{{data.PFTBody.PFTRow}}" as="rowdata" index-as="task_Index">
                                <tr id$="tr{{incrementIndex(task_Index)}}" class="wRow">
                                    <td class="cl1 chckbox">
                                        <div id="checkboxDiv_[[task_Index]]" class="SelectBoxH"><input type="checkbox" id="checkbox_[[task_Index]]" on-tap="addorRemoveTaskAttributes"><label for$="checkbox_[[task_Index]]"></label></div>
                                    </td>
                                    <td class="cl2 pftpriority">
                                        <div class="priorityWrapper"><pft-priority priority="{{rowdata.StdAttributes.Priority}}" priorityname="{{rowdata.StdAttributes.PriorityName}}"></pft-priority></div>
                                    </td>
                                    <td class="cl3 pftduedate">
                                        <div class="smartAlertWrapper" title="{{obj.PFTColumn.1.PFTCell.0.Value}}">
                                            <pft-smartalerts id$="Alert_{{rowdata.StdAttributes.TaskId}}" tenantid="{{rowdata.StdAttributes.TaskTenantId}}" data=" []"></pft-smartalerts>
                                        </div>
                                        <div class="dueDateWrapper">
                                            <pft-duedate due-date="{{getActualDueDate(rowdata.Attributes.TaskAssignmentDetails,rowdata.Attributes.DueDate)}}" prev-due-date="{{getPrevDueDate(rowdata.Attributes.TaskAssignmentDetails)}}" completion-status="{{getUserCompletionStatus(rowdata.Attributes.TaskAssignmentDetails,rowdata.StdAttributes.StatusAcronym)}}">&gt;</pft-duedate>
                                        </div>
                                    </td>
                                    <td class="cl4 titleInfo">
                                        <div class="thumbWrapper"><pft-image value="{{rowdata.Attributes.AssetDetails_ThumbURL}}" parent-class="tr{{incrementIndex(task_Index)}}" ignoreattr="value;onclick;css-classname" css-classname="" uid="idThumbURL" onclick="loadAttributes('idThumbURL', 'pft-image', 'value;function-name;function-params;css-classname')"></pft-image></div>
                                        <div class="metaDetails">
                                            <pft-title title="{{rowdata.Attributes.TaskTitle}}" ignoreattr="value;onclick;title" uid="idTitle" onclick="loadAttributes('idTitle', 'pft-title', 'title;action;function-name;function-params')"></pft-title>
                                            <div class="pfttextcomponent">
                                                <pft-conditionalmetadata conditional-value="{{rowdata.StdAttributes}}" conditional-metadata="{{conditionalMetadata}}" row-data="{{rowdata}}" uid="idConditionalMetadata" ignoreattr="onclick" onclick="loadAttributes('idConditionalMetadata', 'pft-conditionalmetadata', 'value')"></pft-conditionalmetadata>
                                            </div>

                                            <div class="iconsContainer" id$="actionsMenu_[[task_Index]]">
                                                <div class="clear-actionsF actionsIconMob" on-tap="ShowActionMenuForMobille" id="actions_mob"></div>
                                                <div class="iconsInnerContainer">
                                                    <div id$="actionConfig_{{rowdata.StdAttributes.TaskId}}" class="FL actionMob">
                                                        <pft-actioncomponenthz style="float: left" row-data="{{rowdata}}" actionfor="EXECUTETASK" ignoreattr="data;onclick;cssclass-name" uid="idActnCmptHzCx1" data="Action" cssclass-name="actEditWO"></pft-actioncomponenthz>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </td>
                                    <td class="cl5 version">
                                        <div class="dateWrapper">
                                            <pft-date date="{{rowdata.Attributes.CreatedOn}}"></pft-date>
                                            <div class="clr"></div>
                                        </div>
                                    </td>
                                    <td class="cl6 pftmytaskassignmentcomponent">
                                        <div class="assignmentWrapper">
                                            <pft-mytaskassignmentcomponent status="{{getTaskStatus(rowdata.Attributes.TaskAssignmentDetails,rowdata.StdAttributes.StatusAcronym)}}" statusname="{{getTooltip(rowdata.Attributes.TaskAssignmentDetails,rowdata.Attributes.Status)}}" userdetails="{{rowdata.Attributes.TaskAssignmentDetails}}" taskid="{{rowdata.StdAttributes.TaskId}}" objtenantid="{{rowdata.StdAttributes.ObjTenantId}}" issplittable="{{rowdata.StdAttributes.IsSplittable}}" tasktenantid="{{rowdata.StdAttributes.TaskTenantId}}"></pft-mytaskassignmentcomponent>
                                        </div>
                                    </td>
                                    <td class="cl7 pftstatusicon">
                                        <div class="statusWrapper">
                                            <pft-statusicon status="{{getAction(rowdata.Attributes.TaskAssignmentDetails, rowdata.StdAttributes.StatusAcronym)}}" tooltip="{{getTooltip(rowdata.Attributes.TaskAssignmentDetails,rowdata.Attributes.Status)}}"></pft-statusicon>
                                        </div>
                                    </td>
                                </tr>
                            </template>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <div id="fusionCharts" class="PFTGraphWrap FL">
            <div class="chartsAreaMyTasks">
                <pft-chart id="Doughnut_TaskDueToday" chartconfig="{{chartData}}"></pft-chart>
            </div>
            <div class="chartsAreaMyTasks">
                <pft-chart id="Doughnut_TotalTasks" chartconfig="{{chartData}}"></pft-chart>
            </div>
        </div>
        <div class="clr"></div>
    </template>
    <script>
        /* Ignored properties start */
        Polymer({
            is: "PFT-Clear_MyTasksTemplate",
            ready: function () {
                this.async(function localInvoke() {
                    jQuery('.taskV2HeaderWrap .cl2').addClass('pftpriority');
                    jQuery('.taskV2HeaderWrap .cl3').addClass('pftduedate');
                    jQuery('.taskV2HeaderWrap .cl5').addClass('version');
                    jQuery('.taskV2HeaderWrap .cl6').addClass('pftmytaskassignmentcomponent');
                    jQuery('.taskV2HeaderWrap .cl7').addClass('pftstatusicon');
                    jQuery('.style-scope').removeClass('style-scope');
                    jQuery('.pft-' + 'clear_mytaskstemplate').removeClass('pft-' + 'clear_mytaskstemplate');
                    indexedDBExists(this.defaultParams);
                    document.getElementById("Doughnut_TaskDueToday").chartconfig = JSON.parse("{\"aggregationType\":\"Count\",\"aggregationColumn\":\"TaskAssignmentDetails.UserTaskStatus\",\"chartDataStore\":\"ElasticSearchIndex\",\"chartType\":\"DoughnutChart\",\"context\":\"Task\",\"caption\":\"Today's Task\",\"showPercentValues\":\"0\",\"bgColor\":\"#101010\",\"legendPosition\":\"BOTTOM\",\"defaultChartFilter\":[{\"Type\":\"DATE\",\"Name\":\"DueDate\",\"DisplayName\":\"Today\",\"Value\":\"TODAY\"}]}");
                    document.getElementById("Doughnut_TaskDueToday").renderChartData("[{\"label\":\"Approved\",\"value\":6.0},{\"label\":\"In Progress\",\"value\":1.0}]");

                    document.getElementById("Doughnut_TotalTasks").chartconfig = JSON.parse("{\"aggregationType\":\"Count\",\"aggregationColumn\":\"TaskAssignmentDetails.UserTaskStatus\",\"chartDataStore\":\"ElasticSearchIndex\",\"chartType\":\"DoughnutChart\",\"context\":\"Task\",\"caption\":\"My Tasks\",\"showPercentValues\":\"0\",\"bgColor\":\"#101010\",\"legendPosition\":\"BOTTOM\",\"chartFilter\":[{\"Type\":\"DATERANGE\",\"Name\":\"DueDate\",\"Value\":[{\"Span\":\"+/- 7 Days\",\"DisplayName\":\"+/- 7 Days\"},{\"Span\":\"+/- 4 Weeks\",\"DisplayName\":\"+/- 4 Weeks\"},{\"Span\":\"+/- 2 Months\",\"DisplayName\":\"+/- 2 Months\"}]}],\"defaultChartFilter\":[{\"Type\":\"DATERANGE\",\"Name\":\"DueDate\",\"DisplayName\":\"+/- 7 Days\",\"Value\":\"13 Mar 2019|+/- 7 Days\"}]}");
                    document.getElementById("Doughnut_TotalTasks").renderChartData("[{\"label\":\"In Progress\",\"value\":5.0},{\"label\":\"Completed\",\"value\":12.0}]");
                }, 1)
                OnDashboardLoad(this.domHost, this.data);
            },
            properties: {
                data: {
                    type: Object,
                    value: { "PFTBody": { "PFTRow": [{ "Attributes": { "TaskTitle": "Subtitling", "status": "Approved", "CusColumn1": "Value1", "CusColumn2": "Value2", "AssetDetails_ThumbURL": "/BC/Product/Images/Elements/Assets/Preview/sampleImage.jpg", "S_WO_ID": "Clear File Name", "OBJID": "4002-467374", "LANGUAGE": "English", "ObjTenantId": "4002", "DueDate": "Wed 01 Jun 2020", "GroupDetails_TaskDetails": "[{\"TaskTenantId\":0,\"ObjTenantId\":4002,\"Parent\":\"4002-418906\",\"ParentFolderId\":1,\"TaskId\":5231,\"TaskType\":\"Programming Task\",\"TaskTypeAcronym\":\"PRG_REV_TSK\",\"TaskTitle\":\"Trial WO for testing4\",\"PriorityId\":36,\"Priority\":\"NORMAL\",\"PriorityName\":\"Normal\",\"WorkflowId\":64636,\"WorkorderId\":\"TrialWOfortesting4--20180318181954660--7861--WO--4002\",\"DependentTaskId\":0,\"CreatedOn\":\"2018-03-18T20:48:25\",\"CreatedBy\":\"1Arunabg Testing6\",\"Status\":\"Approved\",\"StatusAcronym\":\"APPROVED\",\"DueDate\":\"2018-03-19T00:00:00\",\"S_PREV_DUE_DATE\":null,\"UserGroupId\":553234,\"UserGroupName\":\"QCGroup\",\"ProcessConfigId\":5231,\"Skill\":\"PRG_REV_TSK\",\"SkillId\":7,\"WorkflowTemplateName\":\"WOM_Mastering\",\"WorkItemId\":190617,\"Remarks\":\"\",\"Estimation\":\"240\",\"IsAssigned\":false,\"AssetId\":\"4002-418906\",\"S_DMGUID\":\"4002-418906\",\"Project\":\"\",\"IsSplittable\":true,\"IsAutoAssignment\":false,\"ContentType\":\"VIDEOS\",\"IsTaskCollaborated\":true,\"IsCompletionStatus\":true,\"WorkOrderType\":\"MASTERING\",\"TaskAssignmentDetails\":[{\"ActualDueDate\":\"2018-03-19T00:00:00+05:30\",\"GroupName\":\"QCGroup\",\"IsUserCollaborated\":false,\"UserTaskStatusAcronym\":\"INPROGRESS\",\"UserTaskStatus\":\"In Progress\",\"AssignerId\":41430,\"GroupId\":553234,\"TcOut\":\"00:00:26:08\",\"TcIn\":\"\",\"UserId\":41430,\"TaskAssignmentId\":2330,\"IsCompletionStatus\":true,\"UserDisplayName\":\"test66666 test66666\",\"AssignmentStatus\":\"Picked\",\"AssignedBy\":\"test66666 test66666\",\"UserType\":\"INTERNAL\",\"UserAbbreviation\":\"tt\",\"AssignmentStatusAcronym\":\"PICKED\"},{\"ActualDueDate\":\"2018-03-19T00:00:00+05:30\",\"GroupName\":\"QCGroup\",\"IsUserCollaborated\":true,\"UserTaskStatusAcronym\":\"APPROVED\",\"UserTaskStatus\":\"Approved\",\"AssignerId\":6942,\"GroupId\":553234,\"TcOut\":\"\",\"TcIn\":\"\",\"UserId\":6942,\"TaskAssignmentId\":7306,\"IsCompletionStatus\":true,\"UserDisplayName\":\"kukku.com11 isKhan\",\"AssignmentStatus\":\"Collaborated\",\"AssignedBy\":\"kukku.com11 isKhan\",\"UserType\":\"INTERNAL\",\"UserAbbreviation\":\"ki\",\"AssignmentStatusAcronym\":\"COLLABORATED\"}],\"S_TC_IN\":null,\"S_TC_OUT\":null,\"Language\":null,\"S_VERSION_TYPE\":\"\",\"UploadedOn\":\"2018-03-18T18:20:03\",\"AssociatedTasks\":[{\"TaskId\":5230,\"TaskType\":\"COMP_REV_TSK\",\"Status\":\"In Progress\",\"TaskTypeId\":271}]}]", "CreatedOn": "Wed 01 Jun 2020", "TaskAssignmentDetails": "[{\"ActualDueDate\":\"2018-03-23T00:00:00+05:30\",\"GroupName\":\"QCGroup\",\"IsUserCollaborated\":false,\"UserTaskStatusAcronym\":\"APPROVED\",\"UserTaskStatus\":\"Approved\",\"AssignerId\":6942,\"GroupId\":553234,\"TcOut\":\"00:00:26:08\",\"TcIn\":\"\",\"UserId\":6942,\"TaskAssignmentId\":2952,\"IsCompletionStatus\":true,\"UserDisplayName\":\"Jim Thorpe\",\"AssignmentStatus\":\"Picked\",\"AssignedBy\":\"Jim Thorpe\",\"UserType\":\"INTERNAL\",\"UserAbbreviation\":\"JT\",\"AssignmentStatusAcronym\":\"PICKED\"}]" }, "StdAttributes": { "ObjTenantId": "4002", "Priority": "NORMAL", "PriorityName": "Normal", "S_DMGUID": "4002-418035", "StatusAcronym": "APPROVED", "TaskId": "5176", "TaskTypeAcronym": "QC_TSK", "WorkorderId": "2035SignalR--20180316194325604--7861--WO--4002" } }] }, "TotalPages": 22, "AdditionalInfo": null }
                },
                headerData: {
                    type: Object,
                    value: { HeaderCollection: [{ "headerName": "", "headerCss": "" }, { "headerName": "HDR2", "headerCss": "" }, { "headerName": "HDR3", "headerCss": "" }, { "headerName": "HDR4", "headerCss": "" }, { "headerName": "HDR5", "headerCss": "" }, { "headerName": "HDR6", "headerCss": "" }] }
                },
                conditionalMetadata: {
                    type: String,
                    value: "[{\"ConditionalValue\":\"QC_TSK\",\"ConditionalMetaData\":[{\"GroupNumber\":\"1\",\"MetaData\":[{\"MetaDataKey\":\"Language\",\"MetaDataValue\":\"LANGUAGE\",\"MetaDataDefaultValue\":\"-NA-\",\"IsExpression\":false}]}]}]"
                },
                defaultParams: {
                    type: Object,
                    value: { "TemplateName": "Clear_MyTasksTemplate", "InstanceName": "sample", "Header": "[{\"headerName\":\"\",\"headerCss\":\"\"},{\"headerName\":\"DUE DATE\",\"headerCss\":\"\"},{\"headerName\":\"TITLE\",\"headerCss\":\"\"},{\"headerName\":\"VERSION\",\"headerCss\":\"\"},{\"headerName\":\"ASSIGN TO\",\"headerCss\":\"\"},{\"headerName\":\"STATUS\",\"headerCss\":\"\"}]", "Components": [{ "UID": "idDueDate", "ColNumber": 0, "ComponentType": "pft-duedate", "ParentComponent": "", "Attributes": [{ "AttrName": "data", "AttrValue": [{ "Value": "DueDate", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }] }, { "UID": "idThumbURL", "ColNumber": 0, "ComponentType": "pft-image", "ParentComponent": "", "Attributes": [{ "AttrName": "value", "AttrValue": [{ "Value": "AssetDetails.ThumbURL", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }, { "AttrName": "cssclass-name", "AttrValue": [{ "Value": "hideMe", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "function-name", "AttrValue": [{ "Value": "OpenAssetViewerTool", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "function-params", "AttrValue": [], "AttrFunctionParams": [{ "Params": [{ "ParamName": "objId", "ParamValue": [{ "Value": "S_DMGUID", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }, { "ParamName": "objTenantId", "ParamValue": [{ "Value": "ObjTenantId", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }] }], "IsStatic": false }] }, { "UID": "idMyTaskAssignment", "ColNumber": 0, "ComponentType": "pft-mytaskassignmentcomponent", "ParentComponent": "", "Attributes": [{ "AttrName": "data", "AttrValue": [{ "Value": "TaskAssignmentDetails", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }] }, { "UID": "idTitle", "ColNumber": 0, "ComponentType": "pft-title", "ParentComponent": "", "Attributes": [{ "AttrName": "title", "AttrValue": [{ "Value": "TaskTitle", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }, { "AttrName": "action", "AttrValue": [{ "Value": "", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "function-name", "AttrValue": [{ "Value": "", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "function-params", "AttrValue": [], "AttrFunctionParams": [{ "Params": [{ "ParamName": "", "ParamValue": [{ "Value": "", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }] }], "IsStatic": false }] }, { "UID": "idVersion", "ColNumber": 0, "ComponentType": "pft-text", "ParentComponent": "", "Attributes": [{ "AttrName": "data", "AttrValue": [{ "Value": "GroupDetails.TaskDetails", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }] }, { "UID": "idDate", "ColNumber": 0, "ComponentType": "pft-date", "ParentComponent": "", "Attributes": [{ "AttrName": "data", "AttrValue": [{ "Value": "CreatedOn", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }] }, { "UID": "idStatusIcon", "ColNumber": 0, "ComponentType": "pft-statusicon", "ParentComponent": "", "Attributes": [{ "AttrName": "data", "AttrValue": [{ "Value": "Status", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }] }], "PageSize": 10, "DefaultDataBodyMap": [{ "SourceProperty": "AssetDetails.OBJECTCLASS", "DestinationProperty": "AssetDetails_OBJECTCLASS" }, { "SourceProperty": "AssetDetails.MAINTITLE", "DestinationProperty": "AssetDetails_MAINTITLE" }, { "SourceProperty": "AssetDetails.ParentFolderId", "DestinationProperty": "AssetDetails_ParentFolderId" }, { "SourceProperty": "AssetDetails.OriginalFileName", "DestinationProperty": "AssetDetails_OriginalFileName" }, { "SourceProperty": "AssetDetails.S_ORIG_NA", "DestinationProperty": "AssetDetails_S_ORIG_NA" }, { "SourceProperty": "AssetDetails.FileExtension", "DestinationProperty": "AssetDetails_FileExtension" }, { "SourceProperty": "TaskType", "DestinationProperty": "TaskType" }, { "SourceProperty": "CreatedBy", "DestinationProperty": "CreatedBy" }, { "SourceProperty": "UploadedOn", "DestinationProperty": "UploadedOn" }, { "SourceProperty": "NotClauseValue.ObjIds", "DestinationProperty": "NotClauseValue" }, { "SourceProperty": "WO.S_LANGUAGE", "DestinationProperty": "WO_S_LANGUAGE" }, { "SourceProperty": "WO.S_EDIT_VER", "DestinationProperty": "WO_S_EDIT_VER" }, { "SourceProperty": "WO.S_QUALITY", "DestinationProperty": "WO_S_QUALITY" }, { "SourceProperty": "AssetDetails.S_DURATION", "DestinationProperty": "AssetDetails_S_DURATION" }, { "SourceProperty": "AssetDetails.S_FRAMERATE", "DestinationProperty": "AssetDetails_S_FRAMERATE" }, { "SourceProperty": "S_VERSION_TYPE", "DestinationProperty": "S_VERSION_TYPE" }, { "SourceProperty": "AssetDetails.CreatedOn", "DestinationProperty": "AssetDetails_CreatedOn" }, { "SourceProperty": "WorkflowId", "DestinationProperty": "WorkflowId" }, { "SourceProperty": "DC_Channel", "DestinationProperty": "DC_Channel" }, { "SourceProperty": "AssetId", "DestinationProperty": "AssetId" }, { "SourceProperty": "IsTaskCollaborated", "DestinationProperty": "IsTaskCollaborated" }, { "SourceProperty": "DependentTaskInfo", "DestinationProperty": "DependentTaskInfo" }, { "SourceProperty": "TaskId", "DestinationProperty": "TaskId" }, { "SourceProperty": "WO.S_COURSE_NA", "DestinationProperty": "WO_S_COURSE_NA" }, { "SourceProperty": "IsSkippable", "DestinationProperty": "IsSkippable" }] }
                },
                action: {
                    type: Array
                },
                sortData: {
                    type: Array
                },
                filterData: {
                    type: Array
                },
                requestParams: {
                    type: Array
                },
                staticFilter: {
                    type: Array
                },
                chartData: {
                    type: Array
                },
                pageNo: {
                    type: Number,
                    value: 0
                },
                pageSize: {
                    type: Number
                }
            },
            isEmptyData: function (data) {
                if (data === null || data == undefined || data.length == 0)
                    return true;
            },
            getActualDueDate: function (userDetails, taskDueDate) {
                return GetActualDueDate(userDetails, taskDueDate);
            },
            getTooltip: function (userDetails, taskTooltip) {
                var details = JSON.parse(userDetails);
                if (details.length == 1 && details[0].AssignmentStatusAcronym == "UNASSIGNED") {
                    return details[0].AssignmentStatus;
                }
                else {
                    var filtered = jQuery.grep(details, function (item, index) {
                        return (item.UserId == MasterVar.userId);
                    });
                    if (filtered.length > 0)
                        return filtered[0].UserTaskStatus ? filtered[0].UserTaskStatus : "Unassigned";
                    else
                        return taskTooltip;
                }
            },
            getUserTaskAssigner: function (userDetails, createdBy) {
                return GetTaskAssigner(userDetails, createdBy);
            },
            updateDuration: function (durationInMillisec, FramePerSec) {
                return CMPUtils.ConvertMillisecondsToTimeCode(durationInMillisec, FramePerSec);
            },
            addorRemoveTaskAttributes: function (data) {
                var model = data.model;
                var index = model.task_Index;
                var dataLength = this.data.PFTBody.PFTRow.length;
                var taskId = this.data.PFTBody.PFTRow[index].StdAttributes.TaskId;
                var objTenantId = this.data.PFTBody.PFTRow[index].StdAttributes.ObjTenantId;
                var userDeatils = this.data.PFTBody.PFTRow[index].Attributes.TaskAssignmentDetails;
                var taskStatus = this.data.PFTBody.PFTRow[index].StdAttributes.StatusAcronym;
                var workorderId = this.data.PFTBody.PFTRow[index].StdAttributes.WorkorderId;
                var taskTenantId = this.data.PFTBody.PFTRow[index].StdAttributes.TaskTenantId;
                AddorRemoveTaskAttributes(dataLength, taskId, objTenantId, userDeatils, index, taskStatus, workorderId, null, taskTenantId);
            },
            checkUncheckAllCheckbox: function (e) {
                if ($('checkAllBox').checked) {
                    for (var i = 0; i < this.data.PFTBody.PFTRow.length; i++) {
                        AddPickRejectTaskDetailsData(this.data.PFTBody.PFTRow[i].StdAttributes.TaskId,
                            this.data.PFTBody.PFTRow[i].StdAttributes.ObjTenantId,
                            this.data.PFTBody.PFTRow[i].Attributes.TaskAssignmentDetails,
                            this.data.PFTBody.PFTRow[i].StdAttributes.WorkorderId, i, null, this.data.PFTBody.PFTRow[i].StdAttributes.StatusAcronym,
                            this.data.PFTBody.PFTRow[i].StdAttributes.TaskTenantId);
                        ValidatePickOrAccept();
                        $('checkbox_' + i).checked = true;
                    }
                }
                else
                    RemoveAllCheckBoxInMyTask(this.data.PFTBody.PFTRow.length);
            },
            GetAssetName: function (clearFileName, fileExtension, originalFileName) {
                try {
                    var fullAssetName = '';
                    if (fileExtension) fullAssetName = clearFileName + fileExtension;
                    else {
                        if (typeof clearFileName != "undefined") {
                            var originalFileNameExtension = originalFileName.split('.')[1];
                            fullAssetName = clearFileName + '.' + originalFileNameExtension;
                        }
                    }
                    return fullAssetName;
                }
                catch (ex) {
                    console.log('Error from GetAssetName EX:' + ex.message);
                }
            },
            getUserCompletionStatus: function (userDetails, statusAcronym) {
                return GetUserCompletionStatus(userDetails, statusAcronym);
            },
            getAssignmentDetails: function (userDetails) {
                return GetAssignmentDetails(userDetails);
            },
            getAction: function (userDetails, statusAcronym) {
                var taskStatus = GetUserTaskStatus(userDetails, statusAcronym);
                var status = GetPickOrAccept(userDetails, taskStatus);
                if (status == 'UNASSIGNED') return status;
                else return taskStatus;
            },
            base64EncodingUTF8: function (title) {
                return base64EncodingUTF8(title);
            },
            headerIncrementIndex: function (index) {
                return index + 2;
            },
            incrementIndex: function (index) {
                return index + 1;
            },
            getTaskStatus: function (userDetails, taskStatus) {
                if (taskStatus.toUpperCase() == "ABORTED")
                    return taskStatus;

                var details = JSON.parse(userDetails);
                if (details.length == 1 && details[0].AssignmentStatusAcronym == "UNASSIGNED") {
                    return details[0].AssignmentStatusAcronym.toUpperCase();
                }
                else {
                    var filtered = jQuery.grep(details, function (item, index) {
                        return (item.UserId == MasterVar.userId);
                    });
                    if (filtered.length > 0)
                        return filtered[0].AssignmentStatusAcronym == "ASSIGNED" ? filtered[0].AssignmentStatusAcronym : !filtered[0].UserTaskStatusAcronym ? "NOTSTARTED" : filtered[0].UserTaskStatusAcronym;
                    else
                        return taskStatus.toUpperCase();
                }
            },
            GetTaskDetails: function (wfstepsInfo) {
                var wfStepsObj;
                if (wfstepsInfo != undefined && wfstepsInfo != "") {
                    wfStepsObj = JSON.parse(wfstepsInfo);
                }
                return wfStepsObj;
            },
            getTooltip: function (userDetails, taskTooltip) {
                var details = JSON.parse(userDetails);
                if (details.length == 1 && details[0].AssignmentStatusAcronym == "UNASSIGNED") {
                    return details[0].AssignmentStatus;
                }
                else {
                    var filtered = jQuery.grep(details, function (item, index) {
                        return (item.UserId == MasterVar.userId);
                    });
                    if (filtered.length > 0)
                        return filtered[0].UserTaskStatus ? filtered[0].UserTaskStatus : "Unassigned";
                    else
                        return taskTooltip;
                }
            }
        });
        /* Ignored properties end *//*
        Polymer({
            is: "PFT-Clear_MyTasksTemplate",
            properties: {
                pageNo: {
                    type: Number,
                    value: 0
                },
                pageSize: {
                    type: Number,
                    value: 0
                },
                requestType: {
                    type: String
                },
                data: {
                    type: Array
                },
                action: {
                    type: Array
                },
                sortData: {
                    type: Array
                },
                filterData: {
                    type: Array
                },
                requestParams: {
                    type: Array
                },
                staticFilter: {
                    type: Array
                },
                headerData: {
                    type: Array
                },
                chartData: {
                    type: Array
                }
            },
            attached: function () {
                this.async(function () {
                    jQuery('.taskV2HeaderWrap .cl2').addClass('pftpriority');
                    jQuery('.taskV2HeaderWrap .cl3').addClass('pftduedate');
                    jQuery('.taskV2HeaderWrap .cl5').addClass('version');
                    jQuery('.taskV2HeaderWrap .cl6').addClass('pftmytaskassignmentcomponent');
                    jQuery('.taskV2HeaderWrap .cl7').addClass('pftstatusicon');
                    jQuery('.headerDataCell').removeAttr('onclick');
                    jQuery('.style-scope').removeClass('style-scope');
                    jQuery('.pft-' + 'clear_mytaskstemplate').removeClass('pft-' + 'clear_mytaskstemplate');
                }, 1)
                OnDashboardLoad(this.domHost,this.data);
                InitializeTask();
            },
            isEmptyData: function (data) {
                return isEmptyData(data);
            },
            loadData: function (isPaginationRequired) {
                LoadDashboardData(isPaginationRequired);
            }, 
           // onLoadData: function () {
            //    LoadAlertIcons(this.data, "MYTASK");
           // },
            GetDataonScrollEnd: function () {
                var container = document.getElementById('clear_mytaskstemplateScroll');
                if (this.pageNo < 10) {
                    this.pageNo++;
                    this.loadData(true);
                    scrollbarPosition = container.scrollTop;
                }
            },
            getDurationValue: function (duration, framerate) {
                var duration = CMPUtils.ConvertMillisecondsToTimeCode(duration, framerate);
                if (duration == "NaN:NaN:NaN:NaN")
                    duration = "";
                return duration;
            },
            getActualDueDate: function (userDetails, taskDueDate) {
                return GetActualDueDate(userDetails, taskDueDate);
            },
            getPrevDueDate: function (userDetails) {
                return GetPrevDueDate(userDetails);
            },
            getTaskStatus: function (userDetails, taskStatus) {
                return GetUserTaskStatus(userDetails, taskStatus);
            },
            getTooltip: function (userDetails, taskTooltip) {
                return GetUserTaskTooltip(userDetails, taskTooltip);
            },
            getUserTaskAssigner: function (userDetails, createdBy) {
                return GetTaskAssigner(userDetails, createdBy);
            },
            updateDuration: function (durationInMillisec, FramePerSec) {
                return CMPUtils.ConvertMillisecondsToTimeCode(durationInMillisec, FramePerSec);
            },
            GetTaskDetails: function (wfstepsInfo) {
                var wfStepsObj;
                if (wfstepsInfo != undefined && wfstepsInfo != "") {
                    wfStepsObj = JSON.parse(wfstepsInfo);
                }
                return wfStepsObj;
            },
            addorRemoveTaskAttributes: function (data) {
                var model = data.model;
                var index = model.task_Index;
                var dataLength = this.data.PFTBody.PFTRow.length;
                var taskId = this.data.PFTBody.PFTRow[index].StdAttributes.TaskId;
                var objTenantId = this.data.PFTBody.PFTRow[index].StdAttributes.ObjTenantId;
                var userDeatils = this.data.PFTBody.PFTRow[index].Attributes.TaskAssignmentDetails;
                var taskStatus = this.data.PFTBody.PFTRow[index].StdAttributes.StatusAcronym;
                var workorderId = this.data.PFTBody.PFTRow[index].StdAttributes.WorkorderId;
                var taskTenantId = this.data.PFTBody.PFTRow[index].StdAttributes.TaskTenantId;
                var isSkippableTaskType = this.data.PFTBody.PFTRow[index].Attributes.IsSkippable ? this.data.PFTBody.PFTRow[index].Attributes.IsSkippable : false;
                AddorRemoveTaskAttributes(dataLength, taskId, objTenantId, userDeatils, index, taskStatus, workorderId, null, taskTenantId, isSkippableTaskType);
            },
            checkUncheckAllCheckbox: function (e) {
                if ($('checkAllBox').checked) {
                    for (var i = 0; i < this.data.PFTBody.PFTRow.length; i++) {
                        AddPickRejectTaskDetailsData(this.data.PFTBody.PFTRow[i].StdAttributes.TaskId,
                            this.data.PFTBody.PFTRow[i].StdAttributes.ObjTenantId,
                            this.data.PFTBody.PFTRow[i].Attributes.TaskAssignmentDetails,
                            this.data.PFTBody.PFTRow[i].StdAttributes.WorkorderId, i);
                        ValidatePickOrAccept();
                        $('checkbox_' + i).checked = true;
                    }
                }
                else
                    RemoveAllCheckBoxInMyTask(this.data.PFTBody.PFTRow.length);
            },
            InvokepickAcceptActionMethod: function (methodName) {
                LaunchPickOrAcceptTool(WOM_taskList);
            },
            InvokeRejectActionMethod: function (methodName) {
                LaunchRejectTool(WOM_taskList);
            },
            getAssignmentStatus: function (userDetails) {
                return GetAssignmentStatus(userDetails);
            },
            GetAssetName: function (clearFileName, fileExtension, originalFileName) {
                try {
                    var fullAssetName = '';
                    if (fileExtension) fullAssetName = clearFileName + fileExtension;
                    else {
                        if (typeof clearFileName != "undefined") {
                            var originalFileNameExtension = originalFileName.split('.')[1];
                            fullAssetName = clearFileName + '.' + originalFileNameExtension;
                        }
                    }
                    return fullAssetName;
                }
                catch (ex) {
                    console.log('Error from GetAssetName EX:' + ex.message);
                }
            },
            getUserCompletionStatus: function (userDetails, statusAcronym) {
                return GetUserCompletionStatus(userDetails, statusAcronym);
            },
            getAssignmentDetails: function (userDetails) {
                return GetAssignmentDetails(userDetails);
            },
            getAction: function (userDetails, statusAcronym) {
                var taskStatus = GetUserTaskStatus(userDetails, statusAcronym);
                var status = GetPickOrAccept(userDetails, taskStatus);
                if (status == 'UNASSIGNED') return status;
                else return taskStatus;
            },
            getLabel: function (list) {
                var list1 = list;
            },
            base64EncodingUTF8: function (title) {
                return base64EncodingUTF8(title);
            },
            headerIncrementIndex: function (index) {
                return index + 2;
            },
            incrementIndex: function (index) {
                return index + 1;
            },
            stringifyDefaultObj: function (value) {
                if (value) {
                    try {
                        if (JSON.parse(value) && isNaN(JSON.parse(value))) {
                            var stringifiedVal = JSON.stringify(JSON.stringify(JSON.parse(value)));
                            return stringifiedVal.substring(1, stringifiedVal.length - 1);
                        }
                        else
                            return value;
                    }
                    catch (err) {
                        return value;
                    }
                }
            },
            encodeData : function(data)
            {
                return base64EncodingUTF8(data);
            }
        });
        //*/
    </script>
</dom-module><dom-module id="PFT-Clear_MyTasksTemplateWithVersion" assetpath="DashboardTemplates/">
    <template>
        <div class="lhsGrid FL setWide">
            <div id="Clear_MyTasksTemplateWithVersion" class="taskV2Wrap">
                <div id="PFTToolbar" class="PFTToolbar">
                    <pft-toolbar id="toolBar" sort-data="{{sortData}}" filter-data="{{filterData}}" static-filter="{{staticFilter}}" function-params="{{requestParams.TaskType}}" action-type="{{requestParams.actionType}}" context="{{requestParams.context}}" dashboardactiontype="{{requestParams.actionType}}" action="{{action}}"></pft-toolbar>
                </div>
                <div class="taskV2HeaderWrap">
                    <input type="hidden" id="isUnified" value="true">
                    <table id="clear_mytaskstemplatewithversionHeader" class="taskV2 clear_mytaskstemplatewithversion">
                        <tbody><tr>
                            <th class="cl1 chckbox">
                                <div id="checkAllBoxDiv" class="SelectBoxH SelectAllBox"><input id="checkAllBox" type="checkbox" on-tap="checkUncheckAllCheckbox"><label for="checkAllBox"></label></div>
                            </th>
                            <template is="dom-repeat" items="{{headerData.HeaderCollection}}" as="headerVal" index-as="h_index">
                                <th class$="cl{{headerIncrementIndex(h_index)}} {{headerVal.headerCss}}">
                                    <div class="headerDataCell" onclick$="loadAttributes('idHeader{{incrementIndex(h_index)}}', 'pft-header', 'headerName;headerCss')">{{headerVal.headerName}}</div>
                                </th>
                            </template>
                        </tr>
                    </tbody></table>
                </div>
                <div id="clear_mytaskstemplatewithversionScroll" class="taskV2Scroll container" dashboarddatacontainer="">
                    <div class="content">
                        <table id="clear_mytaskstemplatewithversionData" class="taskV2 clear_mytaskstemplatewithversion">
                            <template is="dom-if" if="{{isEmptyData(data.PFTBody.PFTRow)}}">
                                <tr><td><div class="noData">No Records Found.</div></td></tr>
                            </template>
                            <template is="dom-repeat" items="{{data.PFTBody.PFTRow}}" as="rowdata" index-as="task_Index">
                                <template is="dom-repeat" items="{{GetTaskDetails(rowdata.Attributes.GroupDetails_TaskDetails)}}" as="value" index-as="w_index">
                                    <tr class$="taskRowHide tvR{{incrementIndex(w_index)}} tr{{incrementIndex(task_Index)}}" id$="tr{{incrementIndex(task_Index)}}">
                                        <template is="dom-if" if="{{CheckIfFirstRow(w_index)}}">
                                            <td class="cl1 chckbox" rowspan$="[[GetRowSpanValue(rowdata.Attributes.GroupDetails_TaskDetails)]]">
                                                <div id="checkboxDiv_[[task_Index]]" class="SelectBoxH"><input type="checkbox" id="checkbox_[[task_Index]]" on-tap="addorRemoveTaskAttributes"><label for$="checkbox_[[task_Index]]"></label></div>
                                            </td>
                                            <td class="cl2 pftpriority" rowspan$="[[GetRowSpanValue(rowdata.Attributes.GroupDetails_TaskDetails)]]">
                                                <div class="priorityWrapper"><pft-priority priority="{{rowdata.StdAttributes.Priority}}" priorityname="{{rowdata.StdAttributes.PriorityName}}"></pft-priority></div>
                                            </td>
                                            <td class="cl3 pftduedate" rowspan$="[[GetRowSpanValue(rowdata.Attributes.GroupDetails_TaskDetails)]]">
                                                <div class="smartAlertWrapper" title="{{obj.PFTColumn.1.PFTCell.0.Value}}">
                                                    <pft-smartalerts id$="Alert_{{rowdata.StdAttributes.TaskId}}" tenantid="{{rowdata.StdAttributes.TaskTenantId}}" data=" []"></pft-smartalerts>
                                                </div>
                                                <div class="dueDateWrapper">
                                                    <pft-duedate due-date="{{getActualDueDate(rowdata.Attributes.TaskAssignmentDetails,rowdata.Attributes.DueDate)}}" prev-due-date="{{getPrevDueDate(rowdata.Attributes.TaskAssignmentDetails)}}" completion-status="{{getUserCompletionStatus(rowdata.Attributes.TaskAssignmentDetails,rowdata.StdAttributes.StatusAcronym)}}">&gt;</pft-duedate>
                                                </div>
                                            </td>
                                            <td class="cl4 titleInfo" rowspan$="[[GetRowSpanValue(rowdata.Attributes.GroupDetails_TaskDetails)]]">
                                                <div class="thumbWrapper"><pft-image value="{{rowdata.Attributes.AssetDetails_ThumbURL}}" parent-class="tr{{incrementIndex(task_Index)}}" ignoreattr="value;onclick;css-classname" uid="idThumbURL" onclick="loadAttributes('idThumbURL', 'pft-image', 'value;function-name;function-params;css-classname')"></pft-image></div>
                                                <div class="metaDetails">
                                                    <pft-title title="{{rowdata.Attributes.TaskTitle}}" ignoreattr="value;onclick;title" uid="idTitle" onclick="loadAttributes('idTitle', 'pft-title', 'title;action;function-name;function-params')"></pft-title>
                                                    <div class="pfttextcomponent">
                                                        <pft-conditionalmetadata conditional-value="{{rowdata.StdAttributes}}" conditional-metadata="{{conditionalMetadata}}" row-data="{{rowdata}}" uid="idConditionalMetadata" ignoreattr="onclick" onclick="loadAttributes('idConditionalMetadata', 'pft-conditionalmetadata', 'value')"></pft-conditionalmetadata>
                                                    </div>
                                                    <div class="iconsContainer" id$="actionsMenu_[[task_Index]]">
                                                        <div class="clear-actionsF actionsIconMob" on-tap="ShowActionMenuForMobille" id="actions_mob"></div>
                                                        <div class="iconsInnerContainer">
                                                            <div id$="actionConfig_{{rowdata.StdAttributes.TaskId}}" class="FL actionMob">
                                                                <pft-actioncomponenthz style="float: left" row-data="{{rowdata}}" actionfor="EXECUTETASK" ignoreattr="data;onclick;cssclass-name" uid="idActnCmptHzCx1" data="Action" cssclass-name="actEditWO"></pft-actioncomponenthz>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </td>
                                        </template>
                                        <td class="cl5 version">
                                            <div class="versionWrapper">
                                                <!--<pft-text row-data={{rowdata}} row-value={{rowdata}} grouped-taskdetails={{value}} value="{{getVersion(value.S_VERSION_TYPE,w_index,rowdata.Attributes.GroupDetails_TaskDetails)}}" cssclass-name="FL marR5 prgVersionType" action="HandleClick('','','LaunchAssetReviewTool','displayName+{{base64EncodingUTF8(rowdata.Attributes.TaskTitle)}}&&objTenantId+{{value.ObjTenantId}}&&processTaskId+{{value.TaskId}}&&taskStatus+{{value.Status}}&&taskAssignmentDetails+{{getAssignmentDetails(rowdata.Attributes.TaskAssignmentDetails)}}&&assignmentDetails+{{getTaskAssignmentDetails(value.TaskAssignmentDetails)}}', this)" actionfor$="{{getActionFor(rowdata.Attributes.TaskAssignmentDetails, rowdata.Attributes.IsTaskCollaborated)}}">></pft-text>-->
                                                <pft-version version="{{value.S_VERSION_TYPE}}" index="{{w_index}}" data="{{rowdata.Attributes.GroupDetails_TaskDetails}}" row-data="{{rowdata}}" row-value="{{rowdata}}" grouped-taskdetails="{{value}}" cssclass-name="FL marR5 prgVersionType" ignoreattr="onclick" uid="idVersion1" version-type="v1"></pft-version>
                                                <pft-date date="{{rowdata.Attributes.CreatedOn}}"></pft-date>
                                                <div class="clr"></div>
                                            </div>
                                        </td>
                                        <td class="cl6 pftmytaskassignmentcomponent">
                                            <div class="assignmentWrapper">
                                                <pft-mytaskassignmentcomponent status="{{getTaskStatus(value.TaskAssignmentDetails,rowdata.StdAttributes.StatusAcronym)}}" statusname="{{getTooltip(value)}}" userdetails="{{getTaskAssignmentDetails(value.TaskAssignmentDetails)}}" taskid="{{value.TaskId}}" objtenantid="{{value.ObjTenantId}}" issplittable="{{value.IsSplittable}}" grouped-task-details="{{rowdata.Attributes.GroupDetails_TaskDetails}}" tasktenantid="{{value.TaskTenantId}}"></pft-mytaskassignmentcomponent>
                                            </div>
                                        </td>
                                        <td class="cl7 pftstatusicon" title$="{{getTooltip(value)">
                                            <div class="statusWrapper">
                                                <pft-statusicon status="{{getAction(value)}}" tooltip="{{getTooltip(value)}}"></pft-statusicon>
                                            </div>
                                        </td>
                                    </tr>
                                </template>
                            </template>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <div id="fusionCharts" class="PFTGraphWrap FL">
            <div class="chartsAreaMyTasks">
                <pft-chart id="Doughnut_TaskDueToday" chartconfig="{{chartData}}"></pft-chart>
            </div>
            <div class="chartsAreaMyTasks">
                <pft-chart id="Doughnut_TotalTasks" chartconfig="{{chartData}}"></pft-chart>
            </div>
        </div>
        <div class="clr"></div>
    </template>
    <script>
        /* Ignored properties start */
        Polymer({
            is: "PFT-Clear_MyTasksTemplateWithVersion",
            ready: function () {
                this.async(function localInvoke() {
                    jQuery('.taskV2HeaderWrap .cl2').addClass('pftpriority');
                    jQuery('.taskV2HeaderWrap .cl3').addClass('pftduedate');
                    jQuery('.taskV2HeaderWrap .cl5').addClass('version');
                    jQuery('.taskV2HeaderWrap .cl6').addClass('pftmytaskassignmentcomponent');
                    jQuery('.taskV2HeaderWrap .cl7').addClass('pftstatusicon');
                    jQuery('.style-scope').removeClass('style-scope');
                    jQuery('.pft-' + 'clear_mytaskstemplatewithversion').removeClass('pft-' + 'clear_mytaskstemplatewithversion');
                    indexedDBExists(this.defaultParams);
                    document.getElementById("Doughnut_TaskDueToday").chartconfig = JSON.parse("{\"aggregationType\":\"Count\",\"aggregationColumn\":\"TaskAssignmentDetails.UserTaskStatus\",\"chartDataStore\":\"ElasticSearchIndex\",\"chartType\":\"DoughnutChart\",\"context\":\"Task\",\"caption\":\"Today's Task\",\"showPercentValues\":\"0\",\"bgColor\":\"#101010\",\"legendPosition\":\"BOTTOM\",\"defaultChartFilter\":[{\"Type\":\"DATE\",\"Name\":\"DueDate\",\"DisplayName\":\"Today\",\"Value\":\"TODAY\"}]}");
                    document.getElementById("Doughnut_TaskDueToday").renderChartData("[{\"label\":\"Approved\",\"value\":6.0},{\"label\":\"In Progress\",\"value\":1.0}]");
                    document.getElementById("Doughnut_TotalTasks").chartconfig = JSON.parse("{\"aggregationType\":\"Count\",\"aggregationColumn\":\"TaskAssignmentDetails.UserTaskStatus\",\"chartDataStore\":\"ElasticSearchIndex\",\"chartType\":\"DoughnutChart\",\"context\":\"Task\",\"caption\":\"My Tasks\",\"showPercentValues\":\"0\",\"bgColor\":\"#101010\",\"legendPosition\":\"BOTTOM\",\"chartFilter\":[{\"Type\":\"DATERANGE\",\"Name\":\"DueDate\",\"Value\":[{\"Span\":\"+/- 7 Days\",\"DisplayName\":\"+/- 7 Days\"},{\"Span\":\"+/- 4 Weeks\",\"DisplayName\":\"+/- 4 Weeks\"},{\"Span\":\"+/- 2 Months\",\"DisplayName\":\"+/- 2 Months\"}]}],\"defaultChartFilter\":[{\"Type\":\"DATERANGE\",\"Name\":\"DueDate\",\"DisplayName\":\"+/- 7 Days\",\"Value\":\"13 Mar 2019|+/- 7 Days\"}]}");
                    document.getElementById("Doughnut_TotalTasks").renderChartData("[{\"label\":\"In Progress\",\"value\":5.0},{\"label\":\"Completed\",\"value\":12.0}]");
                }, 1);
                OnDashboardLoad(this.domHost, this.data);
            },
            properties: {
                data: {
                    type: Object,
                    value: { "PFTBody": { "PFTRow": [{ "Attributes": { "TaskTitle": "Subtitling", "status": "Approved", "CusColumn1": "Value1", "CusColumn2": "Value2", "AssetDetails_ThumbURL": "/BC/Product/Images/Elements/Assets/Preview/sampleImage.jpg", "S_WO_ID": "Clear File Name", "OBJID": "4002-467374", "LANGUAGE": "French", "ObjTenantId": "4002", "DueDate": "Wed 01 Jun 2020", "GroupDetails_TaskDetails": "[{\"TaskTenantId\":0,\"ObjTenantId\":4002,\"Parent\":\"4002-418906\",\"ParentFolderId\":1,\"TaskId\":5231,\"TaskType\":\"Programming Task\",\"TaskTypeAcronym\":\"PRG_REV_TSK\",\"TaskTitle\":\"Trial WO for testing4\",\"PriorityId\":36,\"Priority\":\"NORMAL\",\"PriorityName\":\"Normal\",\"WorkflowId\":64636,\"WorkorderId\":\"TrialWOfortesting4--20180318181954660--7861--WO--4002\",\"DependentTaskId\":0,\"CreatedOn\":\"2018-03-18T20:48:25\",\"CreatedBy\":\"1Arunabg Testing6\",\"Status\":\"Approved\",\"StatusAcronym\":\"APPROVED\",\"DueDate\":\"2018-03-19T00:00:00\",\"S_PREV_DUE_DATE\":null,\"UserGroupId\":553234,\"UserGroupName\":\"QCGroup\",\"ProcessConfigId\":5231,\"Skill\":\"PRG_REV_TSK\",\"SkillId\":7,\"WorkflowTemplateName\":\"WOM_Mastering\",\"WorkItemId\":190617,\"Remarks\":\"\",\"Estimation\":\"240\",\"IsAssigned\":false,\"AssetId\":\"4002-418906\",\"S_DMGUID\":\"4002-418906\",\"Project\":\"\",\"IsSplittable\":true,\"IsAutoAssignment\":false,\"ContentType\":\"VIDEOS\",\"IsTaskCollaborated\":true,\"IsCompletionStatus\":true,\"WorkOrderType\":\"MASTERING\",\"TaskAssignmentDetails\":[{\"ActualDueDate\":\"2018-03-19T00:00:00+05:30\",\"GroupName\":\"QCGroup\",\"IsUserCollaborated\":false,\"UserTaskStatusAcronym\":\"INPROGRESS\",\"UserTaskStatus\":\"In Progress\",\"AssignerId\":41430,\"GroupId\":553234,\"TcOut\":\"00:00:26:08\",\"TcIn\":\"\",\"UserId\":41430,\"TaskAssignmentId\":2330,\"IsCompletionStatus\":true,\"UserDisplayName\":\"test66666 test66666\",\"AssignmentStatus\":\"Picked\",\"AssignedBy\":\"test66666 test66666\",\"UserType\":\"INTERNAL\",\"UserAbbreviation\":\"tt\",\"AssignmentStatusAcronym\":\"PICKED\"},{\"ActualDueDate\":\"2018-03-19T00:00:00+05:30\",\"GroupName\":\"QCGroup\",\"IsUserCollaborated\":true,\"UserTaskStatusAcronym\":\"APPROVED\",\"UserTaskStatus\":\"Approved\",\"AssignerId\":6942,\"GroupId\":553234,\"TcOut\":\"\",\"TcIn\":\"\",\"UserId\":6942,\"TaskAssignmentId\":7306,\"IsCompletionStatus\":true,\"UserDisplayName\":\"kukku.com11 isKhan\",\"AssignmentStatus\":\"Collaborated\",\"AssignedBy\":\"kukku.com11 isKhan\",\"UserType\":\"INTERNAL\",\"UserAbbreviation\":\"ki\",\"AssignmentStatusAcronym\":\"COLLABORATED\"}],\"S_TC_IN\":null,\"S_TC_OUT\":null,\"Language\":null,\"S_VERSION_TYPE\":\"\",\"UploadedOn\":\"2018-03-18T18:20:03\",\"AssociatedTasks\":[{\"TaskId\":5230,\"TaskType\":\"COMP_REV_TSK\",\"Status\":\"In Progress\",\"TaskTypeId\":271}],\"DependentTaskInfo\":[{\"IsCompletionStatus\":false,\"UserId\":0}]}]", "CreatedOn": "Wed 01 Jun 2020", "TaskAssignmentDetails": "[{\"ActualDueDate\":\"2018-03-23T00:00:00+05:30\",\"GroupName\":\"QCGroup\",\"IsUserCollaborated\":false,\"UserTaskStatusAcronym\":\"APPROVED\",\"UserTaskStatus\":\"Approved\",\"AssignerId\":6942,\"GroupId\":553234,\"TcOut\":\"00:00:26:08\",\"TcIn\":\"\",\"UserId\":6942,\"TaskAssignmentId\":2952,\"IsCompletionStatus\":true,\"UserDisplayName\":\"Jim Thorpe\",\"AssignmentStatus\":\"Picked\",\"AssignedBy\":\"Jim Thorpe\",\"UserType\":\"INTERNAL\",\"UserAbbreviation\":\"JT\",\"AssignmentStatusAcronym\":\"PICKED\"}]" }, "StdAttributes": { "ObjTenantId": "4002", "Priority": "NORMAL", "PriorityName": "Normal", "S_DMGUID": "4002-418035", "StatusAcronym": "APPROVED", "TaskId": "5176", "TaskTypeAcronym": "QC_TSK", "WorkorderId": "2035SignalR--20180316194325604--7861--WO--4002" } }] }, "TotalPages": 22, "AdditionalInfo": null }
                },
                headerData: {
                    type: Object,
                    value: { HeaderCollection: [{ "headerName": "", "headerCss": "" }, { "headerName": "HDR2", "headerCss": "" }, { "headerName": "HDR3", "headerCss": "" }, { "headerName": "HDR4", "headerCss": "" }, { "headerName": "HDR5", "headerCss": "" }, { "headerName": "HDR6", "headerCss": "" }] }
                },
                conditionalMetadata: {
                    type: String,
                    value: "[{\"ConditionalValue\":\"QC_TSK\",\"ConditionalMetaData\":[{\"GroupNumber\":\"1\",\"MetaData\":[{\"MetaDataKey\":\"Language\",\"MetaDataValue\":\"LANGUAGE\",\"MetaDataDefaultValue\":\"-NA-\",\"IsExpression\":false}]}]}]"
                },
                defaultParams: {
                    type: Object,
                    value: { "TemplateName": "Clear_MyTasksTemplateWithVersion", "InstanceName": "sample", "Header": "[{\"headerName\":\"\",\"headerCss\":\"\"},{\"headerName\":\"DUE DATE\",\"headerCss\":\"\"},{\"headerName\":\"TITLE\",\"headerCss\":\"\"},{\"headerName\":\"VERSION\",\"headerCss\":\"\"},{\"headerName\":\"ASSIGN TO\",\"headerCss\":\"\"},{\"headerName\":\"STATUS\",\"headerCss\":\"\"}]", "Components": [{ "UID": "idDueDate", "ColNumber": 0, "ComponentType": "pft-duedate", "ParentComponent": "", "Attributes": [{ "AttrName": "data", "AttrValue": [{ "Value": "DueDate", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }] }, { "UID": "idThumbURL", "ColNumber": 0, "ComponentType": "pft-image", "ParentComponent": "", "Attributes": [{ "AttrName": "value", "AttrValue": [{ "Value": "AssetDetails.ThumbURL", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }, { "AttrName": "cssclass-name", "AttrValue": [{ "Value": "hideMe", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "function-name", "AttrValue": [{ "Value": "OpenAssetViewerTool", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "function-params", "AttrValue": [], "AttrFunctionParams": [{ "Params": [{ "ParamName": "objId", "ParamValue": [{ "Value": "S_DMGUID", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }, { "ParamName": "objTenantId", "ParamValue": [{ "Value": "ObjTenantId", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }] }], "IsStatic": false }] }, { "UID": "idMyTaskAssignment", "ColNumber": 0, "ComponentType": "pft-mytaskassignmentcomponent", "ParentComponent": "", "Attributes": [{ "AttrName": "data", "AttrValue": [{ "Value": "TaskAssignmentDetails", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }] }, { "UID": "idTitle", "ColNumber": 0, "ComponentType": "pft-title", "ParentComponent": "", "Attributes": [{ "AttrName": "title", "AttrValue": [{ "Value": "TaskTitle", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }, { "AttrName": "action", "AttrValue": [{ "Value": "", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "function-name", "AttrValue": [{ "Value": "", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "function-params", "AttrValue": [], "AttrFunctionParams": [{ "Params": [{ "ParamName": "", "ParamValue": [{ "Value": "", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }] }], "IsStatic": false }] }, { "UID": "idVersion", "ColNumber": 0, "ComponentType": "pft-text", "ParentComponent": "", "Attributes": [{ "AttrName": "data", "AttrValue": [{ "Value": "GroupDetails.TaskDetails", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }] }, { "UID": "idDate", "ColNumber": 0, "ComponentType": "pft-date", "ParentComponent": "", "Attributes": [{ "AttrName": "data", "AttrValue": [{ "Value": "CreatedOn", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }] }, { "UID": "idStatusIcon", "ColNumber": 0, "ComponentType": "pft-statusicon", "ParentComponent": "", "Attributes": [{ "AttrName": "data", "AttrValue": [{ "Value": "Status", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }] }], "PageSize": 10, "DefaultDataBodyMap": [{ "SourceProperty": "AssetDetails.OBJECTCLASS", "DestinationProperty": "AssetDetails_OBJECTCLASS" }, { "SourceProperty": "AssetDetails.MAINTITLE", "DestinationProperty": "AssetDetails_MAINTITLE" }, { "SourceProperty": "AssetDetails.ParentFolderId", "DestinationProperty": "AssetDetails_ParentFolderId" }, { "SourceProperty": "AssetDetails.OriginalFileName", "DestinationProperty": "AssetDetails_OriginalFileName" }, { "SourceProperty": "AssetDetails.S_ORIG_NA", "DestinationProperty": "AssetDetails_S_ORIG_NA" }, { "SourceProperty": "AssetDetails.FileExtension", "DestinationProperty": "AssetDetails_FileExtension" }, { "SourceProperty": "TaskType", "DestinationProperty": "TaskType" }, { "SourceProperty": "CreatedBy", "DestinationProperty": "CreatedBy" }, { "SourceProperty": "UploadedOn", "DestinationProperty": "UploadedOn" }, { "SourceProperty": "NotClauseValue.ObjIds", "DestinationProperty": "NotClauseValue" }, { "SourceProperty": "WO.S_LANGUAGE", "DestinationProperty": "WO_S_LANGUAGE" }, { "SourceProperty": "WO.S_EDIT_VER", "DestinationProperty": "WO_S_EDIT_VER" }, { "SourceProperty": "WO.S_QUALITY", "DestinationProperty": "WO_S_QUALITY" }, { "SourceProperty": "AssetDetails.S_DURATION", "DestinationProperty": "AssetDetails_S_DURATION" }, { "SourceProperty": "AssetDetails.S_FRAMERATE", "DestinationProperty": "AssetDetails_S_FRAMERATE" }, { "SourceProperty": "S_VERSION_TYPE", "DestinationProperty": "S_VERSION_TYPE" }, { "SourceProperty": "AssetDetails.CreatedOn", "DestinationProperty": "AssetDetails_CreatedOn" }, { "SourceProperty": "WorkflowId", "DestinationProperty": "WorkflowId" }, { "SourceProperty": "DC_Channel", "DestinationProperty": "DC_Channel" }, { "SourceProperty": "AssetId", "DestinationProperty": "AssetId" }, { "SourceProperty": "IsTaskCollaborated", "DestinationProperty": "IsTaskCollaborated" }, { "SourceProperty": "DependentTaskInfo", "DestinationProperty": "DependentTaskInfo" }, { "SourceProperty": "TaskId", "DestinationProperty": "TaskId" }, { "SourceProperty": "WO.S_COURSE_NA", "DestinationProperty": "WO_S_COURSE_NA" }, { "SourceProperty": "IsSkippable", "DestinationProperty": "IsSkippable" }] }
                },
                action: {
                    type: Array
                },
                sortData: {
                    type: Array
                },
                filterData: {
                    type: Array
                },
                requestParams: {
                    type: Array
                },
                staticFilter: {
                    type: Array
                },
                chartData: {
                    type: Array
                },
                pageNo: {
                    type: Number,
                    value: 0
                },
                pageSize: {
                    type: Number
                }
            },
            isEmptyData: function (data) {
                if (data === null || data == undefined || data.length == 0)
                    return true;
            },
            getActualDueDate: function (userDetails, taskDueDate) {
                return GetActualDueDate(userDetails, taskDueDate);
            },
            getTooltip: function (value) {
                var userDetails = value.TaskAssignmentDetails;
                var taskTooltip = value.Status;
                var dependentTaskInfo = value.DependentTaskInfo;

                var details = GetUserDetailsObj(userDetails);
                if (details.length == 1 && details[0].AssignmentStatusAcronym == "UNASSIGNED") {
                    return details[0].AssignmentStatus;
                }
                else {
                    var filtered = jQuery.grep(details, function (item, index) {
                        return (item.UserId == MasterVar.userId);
                    });
                    if (filtered.length > 0) {
                        if (filtered[0].IsCompletionStatus && dependentTaskInfo && dependentTaskInfo.IsCompletionStatus)
                            return "Review " + dependentTaskInfo.TaskStatus;
                        else
                            return filtered[0].UserTaskStatus ? filtered[0].UserTaskStatus : "Unassigned";
                    }
                    else
                        return taskTooltip;
                }
            },
            getUserTaskAssigner: function (userDetails, createdBy) {
                return GetTaskAssigner(userDetails, createdBy);
            },
            updateDuration: function (durationInMillisec, FramePerSec) {
                return CMPUtils.ConvertMillisecondsToTimeCode(durationInMillisec, FramePerSec);
            },
            addorRemoveTaskAttributes: function (data) {
                var model = data.model;
                var index = model.task_Index;
                var dataLength = this.data.PFTBody.PFTRow.length;
                var taskId = this.data.PFTBody.PFTRow[index].StdAttributes.TaskId;
                var objTenantId = this.data.PFTBody.PFTRow[index].StdAttributes.ObjTenantId;
                var userDeatils = this.data.PFTBody.PFTRow[index].Attributes.TaskAssignmentDetails;
                var taskStatus = this.data.PFTBody.PFTRow[index].StdAttributes.StatusAcronym;
                var workorderId = this.data.PFTBody.PFTRow[index].StdAttributes.WorkorderId;
                var taskTenantId = this.data.PFTBody.PFTRow[index].StdAttributes.TaskTenantId;
                AddorRemoveTaskAttributes(dataLength, taskId, objTenantId, userDeatils, index, taskStatus, workorderId, null, taskTenantId);
            },
            checkUncheckAllCheckbox: function (e) {
                if ($('checkAllBox').checked) {
                    for (var i = 0; i < this.data.PFTBody.PFTRow.length; i++) {
                        AddPickRejectTaskDetailsData(this.data.PFTBody.PFTRow[i].StdAttributes.TaskId,
                            this.data.PFTBody.PFTRow[i].StdAttributes.ObjTenantId,
                            this.data.PFTBody.PFTRow[i].Attributes.TaskAssignmentDetails,
                            this.data.PFTBody.PFTRow[i].StdAttributes.WorkorderId, i, null, this.data.PFTBody.PFTRow[i].StdAttributes.StatusAcronym,
                            this.data.PFTBody.PFTRow[i].StdAttributes.TaskTenantId);
                        ValidatePickOrAccept();
                        $('checkbox_' + i).checked = true;
                    }
                }
                else
                    RemoveAllCheckBoxInMyTask(this.data.PFTBody.PFTRow.length);
            },
            GetAssetName: function (clearFileName, fileExtension, originalFileName) {
                try {
                    var fullAssetName = '';
                    if (fileExtension) fullAssetName = clearFileName + fileExtension;
                    else {
                        if (typeof clearFileName != "undefined") {
                            var originalFileNameExtension = originalFileName.split('.')[1];
                            fullAssetName = clearFileName + '.' + originalFileNameExtension;
                        }
                    }
                    return fullAssetName;
                }
                catch (ex) {
                    console.log('Error from GetAssetName EX:' + ex.message);
                }
            },
            getUserCompletionStatus: function (userDetails, statusAcronym) {
                return GetUserCompletionStatus(userDetails, statusAcronym);
            },
            getAssignmentDetails: function (userDetails) {
                return GetAssignmentDetails(userDetails);
            },
            getAction: function (value) {
                var userDetails = value.TaskAssignmentDetails;
                var statusAcronym = value.StatusAcronym;
                var dependentTaskInfo = value.DependentTaskInfo;
                var taskStatus = GetUserTaskStatus(userDetails, statusAcronym, dependentTaskInfo);
                var status = GetPickOrAccept(userDetails, taskStatus);
                if (status == 'UNASSIGNED') return status;
                else return taskStatus;
            },
            base64EncodingUTF8: function (title) {
                return base64EncodingUTF8(title);
            },
            headerIncrementIndex: function (index) {
                return index + 2;
            },
            incrementIndex: function (index) {
                return index + 1;
            },
            getTaskStatus: function (userDetails, taskStatus) {
                if (taskStatus.toUpperCase() == "ABORTED")
                    return taskStatus;

                var details = GetUserDetailsObj(userDetails);
                if (details.length == 1 && details[0].AssignmentStatusAcronym == "UNASSIGNED") {
                    return details[0].AssignmentStatusAcronym.toUpperCase();
                }
                else {
                    var filtered = jQuery.grep(details, function (item, index) {
                        return (item.UserId == MasterVar.userId);
                    });
                    if (filtered.length > 0)
                        return filtered[0].AssignmentStatusAcronym == "ASSIGNED" ? filtered[0].AssignmentStatusAcronym : !filtered[0].UserTaskStatusAcronym ? "NOTSTARTED" : filtered[0].UserTaskStatusAcronym;
                    else
                        return taskStatus.toUpperCase();
                }
            },
            GetTaskDetails: function (wfstepsInfo) {
                var wfStepsObj;
                if (wfstepsInfo != undefined && wfstepsInfo != "") {
                    wfStepsObj = JSON.parse(wfstepsInfo);
                }
                return wfStepsObj;
            },
            isPickActionRequired: function (userDetails, isCollaborated) {
                var status = GetPickOrAccept(userDetails, null, isCollaborated);
                if (status != "" && (status == 'UNASSIGNED' || status == 'ASSIGNED'))
                    return true;
                else return false;
            },
            getTaskAssignmentDetails: function (userDetails) {
                if (userDetails != "" || userDetails != undefined) {
                    return JSON.stringify(userDetails);
                }
                else
                    return null;
            },
            getActionFor: function (userDetails, isCollaborated) {
                if (this.isPickActionRequired(userDetails, isCollaborated) == true)
                    return "PICKACCEPTTASK";
                else
                    return "EXECUTETASK";
            },
            CheckIfFirstRow: function (index) {
                if (index == 0)
                    return true;
                else
                    return false;
            },
            GetRowSpanValue: function (wfStepsInfo) {
                var wfStepObj;
                var rowSpanValue
                if (wfStepsInfo != undefined && wfStepsInfo != "")
                    rowSpanValue = JSON.parse(wfStepsInfo).length;
                else
                    rowSpanValue = 1;
                return rowSpanValue;
            }
        });
        /* Ignored properties end *//*
        Polymer({
            is: "PFT-Clear_MyTasksTemplateWithVersion",
            properties: {
                pageNo: {
                    type: Number,
                    value: 0
                },
                pageSize: {
                    type: Number,
                    value: 0
                },
                requestType: {
                    type: String
                },
                data: {
                    type: Array
                },
                action: {
                    type: Array
                },
                sortData: {
                    type: Array
                },
                filterData: {
                    type: Array
                },
                requestParams: {
                    type: Array
                },
                staticFilter: {
                    type: Array
                },
                headerData: {
                    type: Array
                },
                chartData: {
                    type: Array
                }
            },
            attached: function () {
                this.async(function () {
                    AttachScrollEventToContainer('clear_mytaskstemplatewithversionScroll');
                    jQuery('.taskV2HeaderWrap .cl2').addClass('pftpriority');
                    jQuery('.taskV2HeaderWrap .cl3').addClass('pftduedate');
                    jQuery('.taskV2HeaderWrap .cl5').addClass('version');
                    jQuery('.taskV2HeaderWrap .cl6').addClass('pftmytaskassignmentcomponent');
                    jQuery('.taskV2HeaderWrap .cl7').addClass('pftstatusicon');
                    jQuery('.headerDataCell').removeAttr('onclick');
                    jQuery('.style-scope').removeClass('style-scope');
                    jQuery('.pft-' + 'clear_mytaskstemplatewithversion').removeClass('pft-' + 'clear_mytaskstemplatewithversion');
                }, 1);
                this.notClauseValue = GetNotClauseForGroupedDashboards(this.data.PFTBody.PFTRow, this.notClauseValue);
                OnDashboardLoad(this.domHost,this.data);
                InitializeTask();
            },
            isEmptyData: function (data) {
                return isEmptyData(data);
            },
            loadData: function (isPaginationRequired) {
                LoadDashboardData(isPaginationRequired);
            },
			onLoadData: function (isPaginationRequired) {
                this.notClauseValue = GetNotClauseForGroupedDashboards(this.data.PFTBody.PFTRow, this.notClauseValue);
            },
            GetDataonScrollEnd: function () {
                var container = document.getElementById('clear_mytaskstemplatewithversionScroll');
                if (this.pageNo < 10) {
                    this.pageNo++;
                    this.loadData(true);
                    scrollbarPosition = container.scrollTop;
                }
            },
            getActualDueDate: function (userDetails, taskDueDate) {
                return GetActualDueDate(userDetails, taskDueDate);
            },
            getPrevDueDate: function (userDetails) {
                return GetPrevDueDate(userDetails);
            },
            getTaskStatus: function (userDetails, taskStatus) {
                return GetUserTaskStatus(userDetails, taskStatus);
            },
            getTooltip: function (value) {
                var userDetails = value.TaskAssignmentDetails;
                var taskTooltip = value.Status;
                var dependentTaskStatus = value.DependentTaskInfo;
                return GetUserTaskTooltip(userDetails, taskTooltip, dependentTaskStatus);
            },
            getUserTaskAssigner: function (userDetails, createdBy) {
                return GetTaskAssigner(userDetails, createdBy);
            },
            updateDuration: function (durationInMillisec, FramePerSec) {
                return CMPUtils.ConvertMillisecondsToTimeCode(durationInMillisec, FramePerSec);
            },
            GetTaskDetails: function (wfstepsInfo) {
                var wfStepsObj;
                if (wfstepsInfo != undefined && wfstepsInfo != "") {
                    wfStepsObj = JSON.parse(wfstepsInfo);
                }
                return wfStepsObj;
            },
            addorRemoveTaskAttributes: function (data) {
                var model = data.model;
                var index = model.task_Index;
                var dataLength = this.data.PFTBody.PFTRow.length;
                var taskId = this.data.PFTBody.PFTRow[index].StdAttributes.TaskId;
                var objTenantId = this.data.PFTBody.PFTRow[index].StdAttributes.ObjTenantId;
                var userDeatils = this.data.PFTBody.PFTRow[index].Attributes.TaskAssignmentDetails;
                var taskStatus = this.data.PFTBody.PFTRow[index].StdAttributes.StatusAcronym;
                var workorderId = this.data.PFTBody.PFTRow[index].StdAttributes.WorkorderId;
                var taskTenantId = this.data.PFTBody.PFTRow[index].StdAttributes.TaskTenantId;
                var isSkippableTaskType = this.data.PFTBody.PFTRow[index].Attributes.IsSkippable ? this.data.PFTBody.PFTRow[index].Attributes.IsSkippable : false;
                AddorRemoveTaskAttributes(dataLength, taskId, objTenantId, userDeatils, index, taskStatus, workorderId, null, taskTenantId, isSkippableTaskType);
            },
            checkUncheckAllCheckbox: function (e) {
                if ($('checkAllBox').checked) {
                    for (var i = 0; i < this.data.PFTBody.PFTRow.length; i++) {
                        AddPickRejectTaskDetailsData(this.data.PFTBody.PFTRow[i].StdAttributes.TaskId,
                            this.data.PFTBody.PFTRow[i].StdAttributes.ObjTenantId,
                            this.data.PFTBody.PFTRow[i].Attributes.TaskAssignmentDetails,
                            this.data.PFTBody.PFTRow[i].StdAttributes.WorkorderId, i);
                        ValidatePickOrAccept();
                        $('checkbox_' + i).checked = true;
                    }
                }
                else
                    RemoveAllCheckBoxInMyTask(this.data.PFTBody.PFTRow.length);
            },
            getDurationValue: function (duration, framerate) {
                var duration = CMPUtils.ConvertMillisecondsToTimeCode(duration, framerate);
                if (duration == "NaN:NaN:NaN:NaN")
                    duration = "";
                return duration;
            },
            InvokepickAcceptActionMethod: function (methodName) {
                LaunchPickOrAcceptTool(WOM_taskList);
            },
            InvokeRejectActionMethod: function (methodName) {
                LaunchRejectTool(WOM_taskList);
            },
            getAssignmentStatus: function (userDetails) {
                return GetAssignmentStatus(userDetails);
            },
            GetAssetName: function (clearFileName, fileExtension, originalFileName) {
                try {
                    var fullAssetName = '';
                    if (fileExtension) fullAssetName = clearFileName + fileExtension;
                    else {
                        if (typeof clearFileName != "undefined") {
                            var originalFileNameExtension = originalFileName.split('.')[1];
                            fullAssetName = clearFileName + '.' + originalFileNameExtension;
                        }
                    }
                    return fullAssetName;
                }
                catch (ex) {
                    console.log('Error from GetAssetName EX:' + ex.message);
                }
            },
            getUserCompletionStatus: function (userDetails, statusAcronym) {
                return GetUserCompletionStatus(userDetails, statusAcronym);
            },
            getAssignmentDetails: function (userDetails) {
                return GetAssignmentDetails(userDetails);
            },
            getAction: function (value) {
                var userDetails = value.TaskAssignmentDetails;
                var statusAcronym = value.StatusAcronym;
                var dependentTaskInfo = value.DependentTaskInfo;
                var taskStatus = GetUserTaskStatus(userDetails, statusAcronym, dependentTaskInfo);
                var status = GetPickOrAccept(userDetails, taskStatus);
                if (status == 'UNASSIGNED') return status;
                else return taskStatus;
            },
            getLabel: function (list) {
                var list1 = list;
            },
            base64EncodingUTF8: function (title) {
                return base64EncodingUTF8(title);
            },
            headerIncrementIndex: function (index) {
                return index + 2;
            },
            incrementIndex: function (index) {
                return index + 1;
            },
            getTaskAssignmentDetails: function (userDetails) {
                if (userDetails != "" || userDetails != undefined) {
                    return JSON.stringify(userDetails);
                }
                else
                    return null;
            },
            getActionFor: function (userDetails, isCollaborated) {
                if (this.isPickActionRequired(userDetails, isCollaborated) == true)
                    return "PICKACCEPTTASK";
                else
                    return "EXECUTETASK";
            },
            CheckIfFirstRow: function (index) {
                if (index == 0)
                    return true;
                else
                    return false;
            },
            GetRowSpanValue: function (wfStepsInfo) {
                var wfStepObj;
                var rowSpanValue
                if (wfStepsInfo != undefined && wfStepsInfo != "")
                    rowSpanValue = JSON.parse(wfStepsInfo).length;
                else
                    rowSpanValue = 1;
                return rowSpanValue;
            },
            stringifyDefaultObj: function (value) {
                if (value) {
                    try {
                        if (JSON.parse(value) && isNaN(JSON.parse(value))) {
                            var stringifiedVal = JSON.stringify(JSON.stringify(JSON.parse(value)));
                            return stringifiedVal.substring(1, stringifiedVal.length - 1);
                        }
                        else
                            return value;
                    }
                    catch (err) {
                        return value;
                    }
                }
            },
            encodeData : function(data)
            {
                return base64EncodingUTF8(data);
            }
        });
        //*/
    </script>
</dom-module><dom-module id="PFT-Clear_ProgrammingReviewTemplate" assetpath="DashboardTemplates/">
    <template>
        <div class="lhsGrid FL setWide review-Dashboard">
            <div id="Clear_ProgrammingReviewTemplate" class="taskV2Wrap">
                <div id="PFTToolbar" class="PFTToolbar">
                    <pft-toolbar id="toolBar" sort-data="{{sortData}}" filter-data="{{filterData}}" static-filter="{{staticFilter}}" function-params="{{requestParams.TaskType}}" action-type="{{requestParams.actionType}}" context="{{requestParams.context}}" dashboardactiontype="{{requestParams.actionType}}" action="{{action}}"></pft-toolbar>
                </div>
                <div class="taskV2HeaderWrap">
                    <table id="Clear_ProgrammingReviewTemplateHeader" class="taskV2 Clear_ProgrammingReviewTemplate">
                        <tbody><tr>
                            <th class="cl1 chckbox">
                                <div id="checkAllBoxDiv" class="SelectBoxH SelectAllBox"><input id="checkAllBox" type="checkbox" on-tap="checkUncheckAllCheckbox"><label for="checkAllBox"></label></div>
                            </th>
                            <template is="dom-repeat" items="{{headerData.HeaderCollection}}" as="headerVal" index-as="h_index">
                                <th class$="cl{{headerIncrementIndex(h_index)}} {{headerVal.headerCss}}">
                                    <div class="headerDataCell" onclick$="loadAttributes('idHeader{{incrementIndex(h_index)}}', 'pft-header', 'headerName;headerCss')">{{headerVal.headerName}}</div>
                                </th>
                            </template>
                        </tr>
                    </tbody></table>
                </div>
                <div id="clear_programmingreviewtemplateScroll" class="taskV2Scroll container" dashboarddatacontainer="">
                    <div class="content">
                        <table id="clear_programmingreviewtemplateData" class="taskV2 clear_programmingreviewtemplate">
                            <template is="dom-if" if="{{isEmptyData(data.PFTBody.PFTRow)}}">
                                <tr><td><div class="noData">No Records Found.</div></td></tr>
                            </template>
                            <template is="dom-repeat" items="{{data.PFTBody.PFTRow}}" as="rowdata" index-as="task_Index">
                                <template is="dom-repeat" items="{{GetTaskDetails(rowdata.Attributes.GroupDetails_TaskDetails)}}" as="value" index-as="w_index">
                                    <tr class$="taskRowHide tvR{{incrementIndex(w_index)}} tr{{incrementIndex(task_Index)}}" id$="tr{{incrementIndex(task_Index)}}">
                                        <template is="dom-if" if="{{CheckIfFirstRow(w_index)}}">
                                            <td class="cl1 chckbox" rowspan$="[[GetRowSpanValue(rowdata.Attributes.GroupDetails_TaskDetails)]]">
                                                <div id="checkboxDiv_[[task_Index]]" class="SelectBoxH"><input type="checkbox" id="checkbox_[[task_Index]]" on-tap="addorRemoveTaskAttributes"><label for$="checkbox_[[task_Index]]"></label></div>
                                            </td>
                                            <td class="cl2 pftpriority" rowspan$="[[GetRowSpanValue(rowdata.Attributes.GroupDetails_TaskDetails)]]">
                                                <div class="priorityWrapper"><pft-priority priority="{{rowdata.StdAttributes.Priority}}" priorityname="{{rowdata.StdAttributes.PriorityName}}"></pft-priority></div>
                                            </td>
                                            <td class="cl3 pftduedate" rowspan$="[[GetRowSpanValue(rowdata.Attributes.GroupDetails_TaskDetails)]]">
                                                <div class="smartAlertWrapper" title="{{obj.PFTColumn.1.PFTCell.0.Value}}">
                                                    <pft-smartalerts id$="Alert_{{rowdata.StdAttributes.TaskId}}" tenantid="{{rowdata.StdAttributes.TaskTenantId}}" data=" []"></pft-smartalerts>
                                                </div>
                                                <div class="dueDateWrapper">
                                                    <pft-duedate due-date="{{getActualDueDate(rowdata.Attributes.TaskAssignmentDetails,rowdata.Attributes.DueDate)}}" prev-due-date="{{getPrevDueDate(rowdata.Attributes.TaskAssignmentDetails)}}" completion-status="{{getUserCompletionStatus(rowdata.Attributes.TaskAssignmentDetails,rowdata.StdAttributes.StatusAcronym)}}">&gt;</pft-duedate>
                                                </div>
                                            </td>
                                            <td class="cl4 titleInfo" rowspan$="[[GetRowSpanValue(rowdata.Attributes.GroupDetails_TaskDetails)]]">
                                                <div class="thumbWrapper"><pft-image value="{{rowdata.Attributes.AssetDetails_ThumbURL}}" parent-class="tr{{incrementIndex(task_Index)}}" ignoreattr="value;onclick;css-classname" uid="idThumbURL" onclick="loadAttributes('idThumbURL', 'pft-image', 'value;function-name;function-params;css-classname')"></pft-image></div>
                                                <div class="metaDetails">
                                                    <pft-title title="{{rowdata.Attributes.TaskTitle}}" ignoreattr="value;onclick;title" uid="idTitle" onclick="loadAttributes('idTitle', 'pft-title', 'title;function-name;function-params;action')"></pft-title>
                                                    <div class="pfttextcomponent">
                                                        <pft-conditionalmetadata conditional-value="{{rowdata.StdAttributes}}" conditional-metadata="{{conditionalMetadata}}" row-data="{{rowdata}}" uid="idConditionalMetadata" ignoreattr="onclick" onclick="loadAttributes('idConditionalMetadata', 'pft-conditionalmetadata', 'value')"></pft-conditionalmetadata>
                                                    </div>
                                                    <div class="iconsContainer" id$="actionsMenu_[[task_Index]]">
                                                        <div class="clear-actionsF actionsIconMob" on-tap="ShowActionMenuForMobille" id="actions_mob"></div>
                                                        <div class="iconsInnerContainer">
                                                            <div id$="actionConfig_{{rowdata.StdAttributes.TaskId}}" class="FL actionMob">
                                                                <pft-actioncomponenthz style="float: left" row-data="{{rowdata}}" actionfor="EXECUTETASK" ignoreattr="data;onclick;cssclass-name" uid="idActnCmptHzCx1" data="Action" cssclass-name="actEditWO"></pft-actioncomponenthz>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </td>
                                        </template>
                                        <td class="cl5 version">
                                            <div class="versionWrapper">
                                                <!--<pft-text row-data={{rowdata}} row-value={{rowdata}} grouped-taskdetails={{value}} value="{{getVersion(value.S_VERSION_TYPE,w_index,rowdata.Attributes.GroupDetails_TaskDetails)}}" cssclass-name="FL marR5 prgVersionType" action="HandleClick('','','LaunchAssetReviewTool','displayName+{{base64EncodingUTF8(rowdata.Attributes.TaskTitle)}}&&objTenantId+{{value.ObjTenantId}}&&processTaskId+{{value.TaskId}}&&taskStatus+{{value.Status}}&&taskAssignmentDetails+{{getAssignmentDetails(rowdata.Attributes.TaskAssignmentDetails)}}&&assignmentDetails+{{getTaskAssignmentDetails(value.TaskAssignmentDetails)}}', this)" actionfor$="{{getActionFor(rowdata.Attributes.TaskAssignmentDetails, rowdata.Attributes.IsTaskCollaborated)}}">></pft-text>-->
                                                <pft-version version="{{value.S_VERSION_TYPE}}" index="{{w_index}}" data="{{rowdata.Attributes.GroupDetails_TaskDetails}}" row-data="{{rowdata}}" row-value="{{rowdata}}" grouped-taskdetails="{{value}}" cssclass-name="FL marR5 prgVersionType" ignoreattr="onclick" uid="idVersion1" version-type="v1"></pft-version>
                                                <pft-date date="{{rowdata.Attributes.CreatedOn}}"></pft-date>
                                                <div class="clr"></div>
                                            </div>
                                        </td>
                                        <td class="cl6 pftmytaskassignmentcomponent">
                                            <div class="assignmentWrapper">
                                                <pft-mytaskassignmentcomponent status="{{getTaskStatus(value.TaskAssignmentDetails,rowdata.StdAttributes.StatusAcronym)}}" statusname="{{getTooltip(value)}}" userdetails="{{getTaskAssignmentDetails(value.TaskAssignmentDetails)}}" taskid="{{value.TaskId}}" objtenantid="{{value.ObjTenantId}}" issplittable="{{value.IsSplittable}}" grouped-task-details="{{rowdata.Attributes.GroupDetails_TaskDetails}}" tasktenantid="{{value.IsSplittable}}"></pft-mytaskassignmentcomponent>
                                            </div>
                                        </td>
                                        <!--<td class="cl7 pftstatusicon" title$={{getTooltip(value)>
                                            <div class="statusWrapper">
                                                <pft-statusicon status="{{getAction(value)}}" tooltip={{getTooltip(value)}}></pft-statusicon>
                                            </div>
                                        </td>-->

                                        <td class="cl7 pftstatusicon" title$="{{value.Status}}">
                                            <div class="statusWrapper">
                                                <pft-statusicon status="{{getProramingTaskStatusvalue(value.Status,rowdata.StdAttributes.StatusAcronym)}}" labels=""></pft-statusicon>
                                            </div>
                                        </td>
                                        <td class="cl8 pftstatusicon">
                                            <div class="statusWrapper">
                                                <pft-statusicon status="{{getSNADPTaskStatus(value.AssociatedTasks)}}" labels=""></pft-statusicon>
                                            </div>
                                        </td>
                                    </tr>
                                </template>
                            </template>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <div id="fusionCharts" class="PFTGraphWrap FL">
            <div class="chartsAreaMyTasks">
                <pft-chart id="Doughnut_TaskDueToday" chartconfig="{{chartData}}"></pft-chart>
            </div>
            <div class="chartsAreaMyTasks">
                <pft-chart id="Doughnut_TotalTasks" chartconfig="{{chartData}}"></pft-chart>
            </div>
        </div>
        <div class="clr"></div>
    </template>
    <script>
        /* Ignored properties start */
        Polymer({
            is: "PFT-Clear_ProgrammingReviewTemplate",
            ready: function () {
                this.async(function localInvoke() {
                    jQuery('.taskV2HeaderWrap .cl2').addClass('pftpriority');
                    jQuery('.taskV2HeaderWrap .cl3').addClass('pftduedate');
                    jQuery('.taskV2HeaderWrap .cl5').addClass('version');
                    jQuery('.taskV2HeaderWrap .cl6').addClass('pftmytaskassignmentcomponent');
                    jQuery('.taskV2HeaderWrap .cl7').addClass('pftstatusicon');
                    jQuery('.taskV2HeaderWrap .cl8').addClass('pftstatusicon');
                    jQuery('.style-scope').removeClass('style-scope');
                    jQuery('.pft-' + 'clear_programmingreviewtemplate').removeClass('pft-' + 'clear_programmingreviewtemplate');
                    indexedDBExists(this.defaultParams);
                    document.getElementById("Doughnut_TaskDueToday").chartconfig = JSON.parse("{\"aggregationType\":\"Count\",\"aggregationColumn\":\"TaskAssignmentDetails.UserTaskStatus\",\"chartDataStore\":\"ElasticSearchIndex\",\"chartType\":\"DoughnutChart\",\"context\":\"Task\",\"caption\":\"Today's Task\",\"showPercentValues\":\"0\",\"bgColor\":\"#101010\",\"legendPosition\":\"BOTTOM\",\"defaultChartFilter\":[{\"Type\":\"DATE\",\"Name\":\"DueDate\",\"DisplayName\":\"Today\",\"Value\":\"TODAY\"}]}");
                    document.getElementById("Doughnut_TaskDueToday").renderChartData("[{\"label\":\"Approved\",\"value\":6.0},{\"label\":\"In Progress\",\"value\":1.0}]");
                    document.getElementById("Doughnut_TotalTasks").chartconfig = JSON.parse("{\"aggregationType\":\"Count\",\"aggregationColumn\":\"TaskAssignmentDetails.UserTaskStatus\",\"chartDataStore\":\"ElasticSearchIndex\",\"chartType\":\"DoughnutChart\",\"context\":\"Task\",\"caption\":\"My Tasks\",\"showPercentValues\":\"0\",\"bgColor\":\"#101010\",\"legendPosition\":\"BOTTOM\",\"chartFilter\":[{\"Type\":\"DATERANGE\",\"Name\":\"DueDate\",\"Value\":[{\"Span\":\"+/- 7 Days\",\"DisplayName\":\"+/- 7 Days\"},{\"Span\":\"+/- 4 Weeks\",\"DisplayName\":\"+/- 4 Weeks\"},{\"Span\":\"+/- 2 Months\",\"DisplayName\":\"+/- 2 Months\"}]}],\"defaultChartFilter\":[{\"Type\":\"DATERANGE\",\"Name\":\"DueDate\",\"DisplayName\":\"+/- 7 Days\",\"Value\":\"13 Mar 2019|+/- 7 Days\"}]}");
                    document.getElementById("Doughnut_TotalTasks").renderChartData("[{\"label\":\"In Progress\",\"value\":5.0},{\"label\":\"Completed\",\"value\":12.0}]");
                }, 1);
                OnDashboardLoad(this.domHost, this.data);
            },
            properties: {
                data: {
                    type: Object,
                    value: { "PFTBody": { "PFTRow": [{ "Attributes": { "TaskTitle": "Subtitling", "status": "Approved", "CusColumn1": "Value1", "CusColumn2": "Value2", "AssetDetails_ThumbURL": "/BC/Product/Images/Elements/Assets/Preview/sampleImage.jpg", "S_WO_ID": "Clear File Name", "OBJID": "4002-467374", "LANGUAGE": "French", "ObjTenantId": "4002", "DueDate": "Wed 01 Jun 2020", "GroupDetails_TaskDetails": "[{\"TaskTenantId\":0,\"ObjTenantId\":4002,\"Parent\":\"4002-418906\",\"ParentFolderId\":1,\"TaskId\":5231,\"TaskType\":\"Programming Task\",\"TaskTypeAcronym\":\"PRG_REV_TSK\",\"TaskTitle\":\"Trial WO for testing4\",\"PriorityId\":36,\"Priority\":\"NORMAL\",\"PriorityName\":\"Normal\",\"WorkflowId\":64636,\"WorkorderId\":\"TrialWOfortesting4--20180318181954660--7861--WO--4002\",\"DependentTaskId\":0,\"CreatedOn\":\"2018-03-18T20:48:25\",\"CreatedBy\":\"1Arunabg Testing6\",\"Status\":\"Approved\",\"StatusAcronym\":\"APPROVED\",\"DueDate\":\"2018-03-19T00:00:00\",\"S_PREV_DUE_DATE\":null,\"UserGroupId\":553234,\"UserGroupName\":\"QCGroup\",\"ProcessConfigId\":5231,\"Skill\":\"PRG_REV_TSK\",\"SkillId\":7,\"WorkflowTemplateName\":\"WOM_Mastering\",\"WorkItemId\":190617,\"Remarks\":\"\",\"Estimation\":\"240\",\"IsAssigned\":false,\"AssetId\":\"4002-418906\",\"S_DMGUID\":\"4002-418906\",\"Project\":\"\",\"IsSplittable\":true,\"IsAutoAssignment\":false,\"ContentType\":\"VIDEOS\",\"IsTaskCollaborated\":true,\"IsCompletionStatus\":true,\"WorkOrderType\":\"MASTERING\",\"TaskAssignmentDetails\":[{\"ActualDueDate\":\"2018-03-19T00:00:00+05:30\",\"GroupName\":\"QCGroup\",\"IsUserCollaborated\":false,\"UserTaskStatusAcronym\":\"INPROGRESS\",\"UserTaskStatus\":\"In Progress\",\"AssignerId\":41430,\"GroupId\":553234,\"TcOut\":\"00:00:26:08\",\"TcIn\":\"\",\"UserId\":41430,\"TaskAssignmentId\":2330,\"IsCompletionStatus\":true,\"UserDisplayName\":\"test66666 test66666\",\"AssignmentStatus\":\"Picked\",\"AssignedBy\":\"test66666 test66666\",\"UserType\":\"INTERNAL\",\"UserAbbreviation\":\"tt\",\"AssignmentStatusAcronym\":\"PICKED\"},{\"ActualDueDate\":\"2018-03-19T00:00:00+05:30\",\"GroupName\":\"QCGroup\",\"IsUserCollaborated\":true,\"UserTaskStatusAcronym\":\"APPROVED\",\"UserTaskStatus\":\"Approved\",\"AssignerId\":6942,\"GroupId\":553234,\"TcOut\":\"\",\"TcIn\":\"\",\"UserId\":6942,\"TaskAssignmentId\":7306,\"IsCompletionStatus\":true,\"UserDisplayName\":\"kukku.com11 isKhan\",\"AssignmentStatus\":\"Collaborated\",\"AssignedBy\":\"kukku.com11 isKhan\",\"UserType\":\"INTERNAL\",\"UserAbbreviation\":\"ki\",\"AssignmentStatusAcronym\":\"COLLABORATED\"}],\"S_TC_IN\":null,\"S_TC_OUT\":null,\"Language\":null,\"S_VERSION_TYPE\":\"\",\"UploadedOn\":\"2018-03-18T18:20:03\",\"AssociatedTasks\":[{\"TaskId\":5230,\"TaskType\":\"COMP_REV_TSK\",\"Status\":\"In Progress\",\"TaskTypeId\":271}],\"DependentTaskInfo\":[{\"IsCompletionStatus\":false,\"UserId\":0}]}]", "CreatedOn": "Wed 01 Jun 2020", "TaskAssignmentDetails": "[{\"ActualDueDate\":\"2018-03-23T00:00:00+05:30\",\"GroupName\":\"QCGroup\",\"IsUserCollaborated\":false,\"UserTaskStatusAcronym\":\"APPROVED\",\"UserTaskStatus\":\"Approved\",\"AssignerId\":6942,\"GroupId\":553234,\"TcOut\":\"00:00:26:08\",\"TcIn\":\"\",\"UserId\":6942,\"TaskAssignmentId\":2952,\"IsCompletionStatus\":true,\"UserDisplayName\":\"Jim Thorpe\",\"AssignmentStatus\":\"Picked\",\"AssignedBy\":\"Jim Thorpe\",\"UserType\":\"INTERNAL\",\"UserAbbreviation\":\"JT\",\"AssignmentStatusAcronym\":\"PICKED\"}]" }, "StdAttributes": { "ObjTenantId": "4002", "Priority": "NORMAL", "PriorityName": "Normal", "S_DMGUID": "4002-418035", "StatusAcronym": "APPROVED", "TaskId": "5176", "TaskTypeAcronym": "QC_TSK", "WorkorderId": "2035SignalR--20180316194325604--7861--WO--4002" } }] }, "TotalPages": 22, "AdditionalInfo": null }
                },
                headerData: {
                    type: Object,
                    value: { HeaderCollection: [{ "headerName": "", "headerCss": "" }, { "headerName": "HDR2", "headerCss": "" }, { "headerName": "HDR3", "headerCss": "" }, { "headerName": "HDR4", "headerCss": "" }, { "headerName": "HDR5", "headerCss": "" }, { "headerName": "HDR6", "headerCss": "" }, { "headerName": "HDR7", "headerCss": "" }] }
                },
                conditionalMetadata: {
                    type: String,
                    value: "[{\"ConditionalValue\":\"QC_TSK\",\"ConditionalMetaData\":[{\"GroupNumber\":\"1\",\"MetaData\":[{\"MetaDataKey\":\"Language\",\"MetaDataValue\":\"LANGUAGE\",\"MetaDataDefaultValue\":\"-NA-\",\"IsExpression\":false}]}]}]"
                },
                defaultParams: {
                    type: Object,
                    value: { "TemplateName": "Clear_ProgrammingReviewTemplate", "InstanceName": "sample", "Header": "[{\"headerName\":\"\",\"headerCss\":\"\"},{\"headerName\":\"DUE DATE\",\"headerCss\":\"\"},{\"headerName\":\"TITLE\",\"headerCss\":\"\"},{\"headerName\":\"VERSION\",\"headerCss\":\"\"},{\"headerName\":\"ASSIGN TO\",\"headerCss\":\"\"},{\"headerName\":\"PROG.\",\"headerCss\":\"\"},{\"headerName\":\"S&P\",\"headerCss\":\"\"}]", "Components": [{ "UID": "idDueDate", "ColNumber": 0, "ComponentType": "pft-duedate", "ParentComponent": "", "Attributes": [{ "AttrName": "data", "AttrValue": [{ "Value": "DueDate", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }] }, { "UID": "idThumbURL", "ColNumber": 0, "ComponentType": "pft-image", "ParentComponent": "", "Attributes": [{ "AttrName": "value", "AttrValue": [{ "Value": "AssetDetails.ThumbURL", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }, { "AttrName": "cssclass-name", "AttrValue": [{ "Value": "hideMe", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "function-name", "AttrValue": [{ "Value": "OpenAssetViewerTool", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "function-params", "AttrValue": [], "AttrFunctionParams": [{ "Params": [{ "ParamName": "objId", "ParamValue": [{ "Value": "S_DMGUID", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }, { "ParamName": "objTenantId", "ParamValue": [{ "Value": "ObjTenantId", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }] }], "IsStatic": false }] }, { "UID": "idMyTaskAssignment", "ColNumber": 0, "ComponentType": "pft-mytaskassignmentcomponent", "ParentComponent": "", "Attributes": [{ "AttrName": "data", "AttrValue": [{ "Value": "TaskAssignmentDetails", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }] }, { "UID": "idTitle", "ColNumber": 0, "ComponentType": "pft-title", "ParentComponent": "", "Attributes": [{ "AttrName": "title", "AttrValue": [{ "Value": "TaskTitle", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }, { "AttrName": "function-name", "AttrValue": [{ "Value": "", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }, { "AttrName": "function-params", "AttrValue": [], "AttrFunctionParams": [{ "Params": [{ "ParamName": "", "ParamValue": [{ "Value": "", "CellNumber": 0, "IsStatic": false }], "IsStatic": false }] }], "IsStatic": false }, { "AttrName": "action", "AttrValue": [{ "Value": "", "CellNumber": 0, "IsStatic": true }], "AttrFunctionParams": null, "IsStatic": true }] }, { "UID": "idVersion", "ColNumber": 0, "ComponentType": "pft-text", "ParentComponent": "", "Attributes": [{ "AttrName": "data", "AttrValue": [{ "Value": "GroupDetails.TaskDetails", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }] }, { "UID": "idDate", "ColNumber": 0, "ComponentType": "pft-date", "ParentComponent": "", "Attributes": [{ "AttrName": "data", "AttrValue": [{ "Value": "CreatedOn", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }] }, { "UID": "idStatusIcon", "ColNumber": 0, "ComponentType": "pft-statusicon", "ParentComponent": "", "Attributes": [{ "AttrName": "data", "AttrValue": [{ "Value": "Status", "CellNumber": 0, "IsStatic": false }], "AttrFunctionParams": null, "IsStatic": false }] }], "PageSize": 10, "DefaultDataBodyMap": [{ "SourceProperty": "AssetDetails.OBJECTCLASS", "DestinationProperty": "AssetDetails_OBJECTCLASS" }, { "SourceProperty": "AssetDetails.MAINTITLE", "DestinationProperty": "AssetDetails_MAINTITLE" }, { "SourceProperty": "AssetDetails.ParentFolderId", "DestinationProperty": "AssetDetails_ParentFolderId" }, { "SourceProperty": "AssetDetails.OriginalFileName", "DestinationProperty": "AssetDetails_OriginalFileName" }, { "SourceProperty": "AssetDetails.S_ORIG_NA", "DestinationProperty": "AssetDetails_S_ORIG_NA" }, { "SourceProperty": "AssetDetails.FileExtension", "DestinationProperty": "AssetDetails_FileExtension" }, { "SourceProperty": "TaskType", "DestinationProperty": "TaskType" }, { "SourceProperty": "CreatedBy", "DestinationProperty": "CreatedBy" }, { "SourceProperty": "UploadedOn", "DestinationProperty": "UploadedOn" }, { "SourceProperty": "NotClauseValue.ObjIds", "DestinationProperty": "NotClauseValue" }, { "SourceProperty": "WO.S_LANGUAGE", "DestinationProperty": "WO_S_LANGUAGE" }, { "SourceProperty": "WO.S_EDIT_VER", "DestinationProperty": "WO_S_EDIT_VER" }, { "SourceProperty": "WO.S_QUALITY", "DestinationProperty": "WO_S_QUALITY" }, { "SourceProperty": "AssetDetails.S_DURATION", "DestinationProperty": "AssetDetails_S_DURATION" }, { "SourceProperty": "AssetDetails.S_FRAMERATE", "DestinationProperty": "AssetDetails_S_FRAMERATE" }, { "SourceProperty": "S_VERSION_TYPE", "DestinationProperty": "S_VERSION_TYPE" }, { "SourceProperty": "AssetDetails.CreatedOn", "DestinationProperty": "AssetDetails_CreatedOn" }, { "SourceProperty": "WorkflowId", "DestinationProperty": "WorkflowId" }, { "SourceProperty": "DC_Channel", "DestinationProperty": "DC_Channel" }, { "SourceProperty": "AssetId", "DestinationProperty": "AssetId" }, { "SourceProperty": "IsTaskCollaborated", "DestinationProperty": "IsTaskCollaborated" }, { "SourceProperty": "DependentTaskInfo", "DestinationProperty": "DependentTaskInfo" }, { "SourceProperty": "TaskId", "DestinationProperty": "TaskId" }, { "SourceProperty": "WO.S_COURSE_NA", "DestinationProperty": "WO_S_COURSE_NA" }, { "SourceProperty": "IsSkippable", "DestinationProperty": "IsSkippable" }] }
                },
                action: {
                    type: Array
                },
                sortData: {
                    type: Array
                },
                filterData: {
                    type: Array
                },
                requestParams: {
                    type: Array
                },
                staticFilter: {
                    type: Array
                },
                chartData: {
                    type: Array
                },
                pageNo: {
                    type: Number,
                    value: 0
                },
                pageSize: {
                    type: Number
                }
            },
            isEmptyData: function (data) {
                if (data === null || data == undefined || data.length == 0)
                    return true;
            },
            getActualDueDate: function (userDetails, taskDueDate) {
                return GetActualDueDate(userDetails, taskDueDate);
            },
            getTooltip: function (value) {
                var userDetails = value.TaskAssignmentDetails;
                var taskTooltip = value.Status;
                var dependentTaskInfo = value.DependentTaskInfo;

                var details = GetUserDetailsObj(userDetails);
                if (details.length == 1 && details[0].AssignmentStatusAcronym == "UNASSIGNED") {
                    return details[0].AssignmentStatus;
                }
                else {
                    var filtered = jQuery.grep(details, function (item, index) {
                        return (item.UserId == MasterVar.userId);
                    });
                    if (filtered.length > 0) {
                        if (filtered[0].IsCompletionStatus && dependentTaskInfo && dependentTaskInfo.IsCompletionStatus)
                            return "Review " + dependentTaskInfo.TaskStatus;
                        else
                            return filtered[0].UserTaskStatus ? filtered[0].UserTaskStatus : "Unassigned";
                    }
                    else
                        return taskTooltip;
                }
            },
            getUserTaskAssigner: function (userDetails, createdBy) {
                return GetTaskAssigner(userDetails, createdBy);
            },
            updateDuration: function (durationInMillisec, FramePerSec) {
                return CMPUtils.ConvertMillisecondsToTimeCode(durationInMillisec, FramePerSec);
            },
            addorRemoveTaskAttributes: function (data) {
                var model = data.model;
                var index = model.task_Index;
                var dataLength = this.data.PFTBody.PFTRow.length;
                var taskId = this.data.PFTBody.PFTRow[index].StdAttributes.TaskId;
                var objTenantId = this.data.PFTBody.PFTRow[index].StdAttributes.ObjTenantId;
                var userDeatils = this.data.PFTBody.PFTRow[index].Attributes.TaskAssignmentDetails;
                var taskStatus = this.data.PFTBody.PFTRow[index].StdAttributes.StatusAcronym;
                var workorderId = this.data.PFTBody.PFTRow[index].StdAttributes.WorkorderId;
                var taskTenantId = this.data.PFTBody.PFTRow[index].StdAttributes.TaskTenantId;
                AddorRemoveTaskAttributes(dataLength, taskId, objTenantId, userDeatils, index, taskStatus, workorderId, null, taskTenantId);
            },
            checkUncheckAllCheckbox: function (e) {
                if ($('checkAllBox').checked) {
                    for (var i = 0; i < this.data.PFTBody.PFTRow.length; i++) {
                        AddPickRejectTaskDetailsData(this.data.PFTBody.PFTRow[i].StdAttributes.TaskId,
                            this.data.PFTBody.PFTRow[i].StdAttributes.ObjTenantId,
                            this.data.PFTBody.PFTRow[i].Attributes.TaskAssignmentDetails,
                            this.data.PFTBody.PFTRow[i].StdAttributes.WorkorderId, i, null, this.data.PFTBody.PFTRow[i].StdAttributes.StatusAcronym,
                            this.data.PFTBody.PFTRow[i].StdAttributes.TaskTenantId);
                        ValidatePickOrAccept();
                        $('checkbox_' + i).checked = true;
                    }
                }
                else
                    RemoveAllCheckBoxInMyTask(this.data.PFTBody.PFTRow.length);
            },
            GetAssetName: function (clearFileName, fileExtension, originalFileName) {
                try {
                    var fullAssetName = '';
                    if (fileExtension) fullAssetName = clearFileName + fileExtension;
                    else {
                        if (typeof clearFileName != "undefined") {
                            var originalFileNameExtension = originalFileName.split('.')[1];
                            fullAssetName = clearFileName + '.' + originalFileNameExtension;
                        }
                    }
                    return fullAssetName;
                }
                catch (ex) {
                    console.log('Error from GetAssetName EX:' + ex.message);
                }
            },
            getUserCompletionStatus: function (userDetails, statusAcronym) {
                return GetUserCompletionStatus(userDetails, statusAcronym);
            },
            getAssignmentDetails: function (userDetails) {
                return GetAssignmentDetails(userDetails);
            },
            getAction: function (value) {
                var userDetails = value.TaskAssignmentDetails;
                var statusAcronym = value.StatusAcronym;
                var dependentTaskInfo = value.DependentTaskInfo;
                var taskStatus = GetUserTaskStatus(userDetails, statusAcronym, dependentTaskInfo);
                var status = GetPickOrAccept(userDetails, taskStatus);
                if (status == 'UNASSIGNED') return status;
                else return taskStatus;
            },
            base64EncodingUTF8: function (title) {
                return base64EncodingUTF8(title);
            },
            headerIncrementIndex: function (index) {
                return index + 2;
            },
            incrementIndex: function (index) {
                return index + 1;
            },
            getTaskStatus: function (userDetails, taskStatus) {
                if (taskStatus.toUpperCase() == "ABORTED")
                    return taskStatus;

                var details = GetUserDetailsObj(userDetails);
                if (details.length == 1 && details[0].AssignmentStatusAcronym == "UNASSIGNED") {
                    return details[0].AssignmentStatusAcronym.toUpperCase();
                }
                else {
                    var filtered = jQuery.grep(details, function (item, index) {
                        return (item.UserId == MasterVar.userId);
                    });
                    if (filtered.length > 0)
                        return filtered[0].AssignmentStatusAcronym == "ASSIGNED" ? filtered[0].AssignmentStatusAcronym : !filtered[0].UserTaskStatusAcronym ? "NOTSTARTED" : filtered[0].UserTaskStatusAcronym;
                    else
                        return taskStatus.toUpperCase();
                }
            },
            GetTaskDetails: function (wfstepsInfo) {
                var wfStepsObj;
                if (wfstepsInfo != undefined && wfstepsInfo != "") {
                    wfStepsObj = JSON.parse(wfstepsInfo);
                }
                return wfStepsObj;
            },
            isPickActionRequired: function (userDetails, isCollaborated) {
                var status = GetPickOrAccept(userDetails, null, isCollaborated);
                if (status != "" && (status == 'UNASSIGNED' || status == 'ASSIGNED'))
                    return true;
                else return false;
            },
            getTaskAssignmentDetails: function (userDetails) {
                if (userDetails != "" || userDetails != undefined) {
                    return JSON.stringify(userDetails);
                }
                else
                    return null;
            },
            getActionFor: function (userDetails, isCollaborated) {
                if (this.isPickActionRequired(userDetails, isCollaborated) == true)
                    return "PICKACCEPTTASK";
                else
                    return "EXECUTETASK";
            },
            CheckIfFirstRow: function (index) {
                if (index == 0)
                    return true;
                else
                    return false;
            },
            GetRowSpanValue: function (wfStepsInfo) {
                var wfStepObj;
                var rowSpanValue
                if (wfStepsInfo != undefined && wfStepsInfo != "")
                    rowSpanValue = JSON.parse(wfStepsInfo).length;
                else
                    rowSpanValue = 1;
                return rowSpanValue;
            },
            getProramingTaskStatusvalue: function (taskValue, taskStatus) {
                //if (taskStatus.toUpperCase() == "ABORTED")
                //    return taskStatus;
                var associatedTaskStatus;
                if (taskValue != undefined && taskValue != null && taskValue.length > 0) {

                    //for (var i = 0; i < taskValue.length; i++) {
                    associatedTaskStatus = taskValue;
                    //break;
                    //}
                }
                else {
                    associatedTaskStatus = "";


                }
                return associatedTaskStatus;
            },
            getSNADPTaskStatus: function (taskValue) {
                var associatedTaskStatus;
                if (taskValue != undefined && taskValue != null && taskValue.length > 0) {

                    for (var i = 0; i < taskValue.length; i++) {
                        associatedTaskStatus = taskValue[i].Status;
                        break;
                    }
                }
                else {
                    associatedTaskStatus = "NA";


                }
                return associatedTaskStatus;
            }
        });
        /* Ignored properties end *//*
        Polymer({
            is: "PFT-Clear_ProgrammingReviewTemplate",
            properties: {
                pageNo: {
                    type: Number,
                    value: 0
                },
                pageSize: {
                    type: Number,
                    value: 0
                },
                requestType: {
                    type: String
                },
                data: {
                    type: Array
                },
                action: {
                    type: Array
                },
                sortData: {
                    type: Array
                },
                filterData: {
                    type: Array
                },
                requestParams: {
                    type: Array
                },
                staticFilter: {
                    type: Array
                },
                headerData: {
                    type: Array
                },
                chartData: {
                    type: Array
                }
            },
            attached: function () {
                this.async(function () {
                    AttachScrollEventToContainer('clear_programmingreviewtemplateScroll');
                    jQuery('.taskV2HeaderWrap .cl2').addClass('pftpriority');
                    jQuery('.taskV2HeaderWrap .cl3').addClass('pftduedate');
                    jQuery('.taskV2HeaderWrap .cl5').addClass('version');
                    jQuery('.taskV2HeaderWrap .cl6').addClass('pftmytaskassignmentcomponent');
                    jQuery('.taskV2HeaderWrap .cl7').addClass('pftstatusicon');
                    jQuery('.taskV2HeaderWrap .cl8').addClass('pftstatusicon');
                    jQuery('.headerDataCell').removeAttr('onclick');
                    jQuery('.style-scope').removeClass('style-scope');
                    jQuery('.pft-' + 'clear_programmingreviewtemplate').removeClass('pft-' + 'clear_programmingreviewtemplate');
                }, 1);
                this.notClauseValue = GetNotClauseForGroupedDashboards(this.data.PFTBody.PFTRow, this.notClauseValue);
                OnDashboardLoad(this.domHost,this.data);
                InitializeTask();
            },
            isEmptyData: function (data) {
                return isEmptyData(data);
            },
            loadData: function (isPaginationRequired) {
                LoadDashboardData(isPaginationRequired);
            },
			onLoadData: function (isPaginationRequired) {
                this.notClauseValue = GetNotClauseForGroupedDashboards(this.data.PFTBody.PFTRow, this.notClauseValue);
            },
            GetDataonScrollEnd: function () {
                var container = document.getElementById('clear_programmingreviewtemplate');
                if (this.pageNo < 10) {
                    this.pageNo++;
                    this.loadData(true);
                    scrollbarPosition = container.scrollTop;
                }
            },
            getActualDueDate: function (userDetails, taskDueDate) {
                return GetActualDueDate(userDetails, taskDueDate);
            },
            getPrevDueDate: function (userDetails) {
                return GetPrevDueDate(userDetails);
            },
            getTaskStatus: function (userDetails, taskStatus) {
                return GetUserTaskStatus(userDetails, taskStatus);
            },
            getTooltip: function (value) {
                var userDetails = value.TaskAssignmentDetails;
                var taskTooltip = value.Status;
                var dependentTaskStatus = value.DependentTaskInfo;
                return GetUserTaskTooltip(userDetails, taskTooltip, dependentTaskStatus);
            },
            getUserTaskAssigner: function (userDetails, createdBy) {
                return GetTaskAssigner(userDetails, createdBy);
            },
            updateDuration: function (durationInMillisec, FramePerSec) {
                return CMPUtils.ConvertMillisecondsToTimeCode(durationInMillisec, FramePerSec);
            },
            GetTaskDetails: function (wfstepsInfo) {
                var wfStepsObj;
                if (wfstepsInfo != undefined && wfstepsInfo != "") {
                    wfStepsObj = JSON.parse(wfstepsInfo);
                }
                return wfStepsObj;
            },
            addorRemoveTaskAttributes: function (data) {
                var model = data.model;
                var index = model.task_Index;
                var dataLength = this.data.PFTBody.PFTRow.length;
                var taskId = this.data.PFTBody.PFTRow[index].StdAttributes.TaskId;
                var objTenantId = this.data.PFTBody.PFTRow[index].StdAttributes.ObjTenantId;
                var userDeatils = this.data.PFTBody.PFTRow[index].Attributes.TaskAssignmentDetails;
                var taskStatus = this.data.PFTBody.PFTRow[index].StdAttributes.StatusAcronym;
                var workorderId = this.data.PFTBody.PFTRow[index].StdAttributes.WorkorderId;
                var taskTenantId = this.data.PFTBody.PFTRow[index].StdAttributes.TaskTenantId;
                var isSkippableTaskType = this.data.PFTBody.PFTRow[index].Attributes.IsSkippable ? this.data.PFTBody.PFTRow[index].Attributes.IsSkippable : false;
                AddorRemoveTaskAttributes(dataLength, taskId, objTenantId, userDeatils, index, taskStatus, workorderId, null, taskTenantId, isSkippableTaskType);
            },
            checkUncheckAllCheckbox: function (e) {
                if ($('checkAllBox').checked) {
                    for (var i = 0; i < this.data.PFTBody.PFTRow.length; i++) {
                        AddPickRejectTaskDetailsData(this.data.PFTBody.PFTRow[i].StdAttributes.TaskId,
                            this.data.PFTBody.PFTRow[i].StdAttributes.ObjTenantId,
                            this.data.PFTBody.PFTRow[i].Attributes.TaskAssignmentDetails,
                            this.data.PFTBody.PFTRow[i].StdAttributes.WorkorderId, i);
                        ValidatePickOrAccept();
                        $('checkbox_' + i).checked = true;
                    }
                }
                else
                    RemoveAllCheckBoxInMyTask(this.data.PFTBody.PFTRow.length);
            },
            getDurationValue: function (duration, framerate) {
                var duration = CMPUtils.ConvertMillisecondsToTimeCode(duration, framerate);
                if (duration == "NaN:NaN:NaN:NaN")
                    duration = "";
                return duration;
            },
            InvokepickAcceptActionMethod: function (methodName) {
                LaunchPickOrAcceptTool(WOM_taskList);
            },
            InvokeRejectActionMethod: function (methodName) {
                LaunchRejectTool(WOM_taskList);
            },
            getAssignmentStatus: function (userDetails) {
                return GetAssignmentStatus(userDetails);
            },
            GetAssetName: function (clearFileName, fileExtension, originalFileName) {
                try {
                    var fullAssetName = '';
                    if (fileExtension) fullAssetName = clearFileName + fileExtension;
                    else {
                        if (typeof clearFileName != "undefined") {
                            var originalFileNameExtension = originalFileName.split('.')[1];
                            fullAssetName = clearFileName + '.' + originalFileNameExtension;
                        }
                    }
                    return fullAssetName;
                }
                catch (ex) {
                    console.log('Error from GetAssetName EX:' + ex.message);
                }
            },
            getUserCompletionStatus: function (userDetails, statusAcronym) {
                return GetUserCompletionStatus(userDetails, statusAcronym);
            },
            getAssignmentDetails: function (userDetails) {
                return GetAssignmentDetails(userDetails);
            },
            getAction: function (value) {
                var userDetails = value.TaskAssignmentDetails;
                var statusAcronym = value.StatusAcronym;
                var dependentTaskInfo = value.DependentTaskInfo;
                var taskStatus = GetUserTaskStatus(userDetails, statusAcronym, dependentTaskInfo);
                var status = GetPickOrAccept(userDetails, taskStatus);
                if (status == 'UNASSIGNED') return status;
                else return taskStatus;
            },
            getLabel: function (list) {
                var list1 = list;
            },
            base64EncodingUTF8: function (title) {
                return base64EncodingUTF8(title);
            },
            headerIncrementIndex: function (index) {
                return index + 2;
            },
            incrementIndex: function (index) {
                return index + 1;
            },
            getTaskAssignmentDetails: function (userDetails) {
                if (userDetails != "" || userDetails != undefined) {
                    return JSON.stringify(userDetails);
                }
                else
                    return null;
            },
            getActionFor: function (userDetails, isCollaborated) {
                if (this.isPickActionRequired(userDetails, isCollaborated) == true)
                    return "PICKACCEPTTASK";
                else
                    return "EXECUTETASK";
            },
            CheckIfFirstRow: function (index) {
                if (index == 0)
                    return true;
                else
                    return false;
            },
            GetRowSpanValue: function (wfStepsInfo) {
                var wfStepObj;
                var rowSpanValue
                if (wfStepsInfo != undefined && wfStepsInfo != "")
                    rowSpanValue = JSON.parse(wfStepsInfo).length;
                else
                    rowSpanValue = 1;
                return rowSpanValue;
            },
            stringifyDefaultObj: function (value) {
                if (value) {
                    try {
                        if (JSON.parse(value) && isNaN(JSON.parse(value))) {
                            var stringifiedVal = JSON.stringify(JSON.stringify(JSON.parse(value)));
                            return stringifiedVal.substring(1, stringifiedVal.length - 1);
                        }
                        else
                            return value;
                    }
                    catch (err) {
                        return value;
                    }
                }
            },
            encodeData : function(data)
            {
                return base64EncodingUTF8(data);
            },
            getProramingTaskStatusvalue: function (taskValue, taskStatus) {
                //if (taskStatus.toUpperCase() == "ABORTED")
                //    return taskStatus;
                var associatedTaskStatus;
                if (taskValue != undefined && taskValue != null && taskValue.length > 0) {

                    //for (var i = 0; i < taskValue.length; i++) {
                    associatedTaskStatus = taskValue;
                    //break;
                    //}
                }
                else {
                    associatedTaskStatus = "";


                }
                return associatedTaskStatus;
            },
            getSNADPTaskStatus: function (taskValue) {
                var associatedTaskStatus;
                if (taskValue != undefined && taskValue != null && taskValue.length > 0) {

                    for (var i = 0; i < taskValue.length; i++) {
                        associatedTaskStatus = taskValue[i].Status;
                        break;
                    }
                }
                else {
                    associatedTaskStatus = "NA";


                }
                return associatedTaskStatus;
            }
        });
        //*/
    </script>
</dom-module><dom-module id="PFT-StatusIcon" assetpath="Components/">
    <template>
        <div class$="{{ClassSelector}}" title$="{{ToolTipDisplayValue}}">{{DisplayValue}}</div>
    </template>

    <script>


        Polymer({
            is: 'PFT-StatusIcon',

            properties: {

                status: String,
                tooltip: {
                    type: String,
                    value: ""
                },
                ClassSelector: {
                    type: String,
                    computed: 'computeClassName(status)'
                },
                DisplayValue: {
                    type: String,
                    computed: 'computeDisplay(status)'

                },
                ToolTipDisplayValue: {
                    type: String,
                    computed: 'computeToolTip(tooltip,status)'

                }
            },

            computeClassName: function (status) {
                if (status != undefined && status != "" && status != null) {
                    //if (status.toUpperCase() == "APPROVED" || status.toUpperCase() == "COMPLETED") {
                    //    return "iconStatus clear-tick StatusColor";
                    //}
                    if (status.toUpperCase() == "COMPLETED") {
                        return "iconStatus clear-tickCircle StatusColor";
                    }
                    else if (status.toUpperCase() == "APPROVED") {

                        return "iconStatus clear-tick StatusColor";
                    }
                    else if (status.toUpperCase() == "REJECTED") {

                        return "iconStatus clear-cross StatusColor";
                    }
                    else if (status.toUpperCase() == "INPROGRESS" || status.toUpperCase() == "IN PROGRESS") {
                        return "iconStatus clear-wait StatusProgress StatusColor"
                    }
                    else if (status.toUpperCase() == "DELIVERED" || status.toUpperCase() == "DONE") {
                        return "clear-tickAll iconStatus StatusColor"
                    }
                    else if (status.toUpperCase() == "ABORTED" || status.toUpperCase() == "ABORT") {
                        return "clear-cancelF iconStatus StatusColor"
                    }
                    else if (status.toUpperCase() == "NOTSTARTED") {
                        return "clear-timer iconStatus StatusColor"
                    }
                    else if (status.toUpperCase() == "TRANSFERING") {
                        return "clear-autorenew iconStatus StatusColor"
                    }
                    else if (status.toUpperCase() == "ACCEPTED") {
                        return "iconStatus clear-checkCircle StatusColor";
                    }
                    else if (status.toUpperCase() == "PICKED") {
                        return "iconStatus  clear-arrowT StatusColor";
                    }
                    else if (status.toUpperCase() == "UNASSIGNED") {
                        return "iconStatus clear-timer StatusColor";
                    }
                    else if (status.toUpperCase() == "ASSIGNED") {
                        return "iconStatus clear-assign-project StatusColor";
                    }
                    else if (status.toUpperCase() == "SAVED") {
                        return "iconStatus clear-save  StatusColor";
                    }
                    else if (status.toUpperCase() == "PUBLISHED") {
                        return "iconStatus clear-BMSPublish StatusColor";
                    }
                    else if (status.toUpperCase() == "N/A" || status.toUpperCase() == "ASSIGNED") {
                        return "iconStatus";
                    }
                    else if (status.toUpperCase() == "COMPLETED-APPROVED" || status.toUpperCase() == "ASSIGNED") {
                        return "clear-tickAll iconStatus StatusColor";
                    }
                    else if (status.toUpperCase() == "SKIPPED") {
                        return "clear-skip StatusColor";
                    }
                    else if (status.toUpperCase() == "APPROVED" || status.toUpperCase() == "APPROVEDC") {

                        return "iconStatus clear-tick StatusColor";
                    }
                   
                    else {
                        return "clear-timer  iconStatus StatusColor";
                    }
                }
            },
            computeDisplay: function (status) {
                if (status == "N/A") {
                    return status;
                }
                else {
                    //return status.replace(/\w\S*/g, function (status) { return status.charAt(0).toUpperCase() + status.substr(1).toLowerCase(); });
                    return "";
                }
            },
            computeToolTip: function (tooltip, status) {
                return !tooltip ? status : tooltip;
            }
        });
    </script>

</dom-module><dom-module id="PFT-TextComponentVt" assetpath="Components/">
    <template>
        <template is="dom-repeat" items="{{getDataObj(data)}}" as="value" index-as="o_index">
            <template is="dom-if" if="{{checkIfValueExists(value)}}">
                <div class="verticalText" id$="verticalText_{{o_index}}">
                    <pft-text row-value="{{rowData}}" value="{{checkforLabel(value,o_index)}}" parent-cmpid="{{setParentCompId(o_index)}}" action="[[bindClickFunction(actionValue,o_index)]]" actionfor$="{{CheckforActionFor(actionfor,o_index)}}"></pft-text>
                </div>
            </template>
        </template>
    </template>
    <script>
        Polymer({

            is: 'PFT-TextComponentVt',

            properties: {

                data: {
                    type: String,
                    value: ""
                },
                dataObj: {
                    type: Object
                },
                actionValue: {
                    type: String
                },
                actionObj: {
                    type: Object
                },
                tempMethod: {
                    type: String
                },
                labels: {
                    type: String
                },
                rowData: {
                    type: Array,
                    value: []
                },
                parentCmpid: {
                    type: String
                },
                actionfor: {
                    type: String
                }
            },
            getDataObj: function (data) {
                this.dataObj = data.split(';');
                //this.rowData = this.dataHost._config.MyList;
                return this.dataObj;
            },
            bindClickFunction: function (clickFunc, index) {
                this.tempMethod = '';
                var actionObj = clickFunc.split(';');
                for (var i = 0; i < actionObj.length; i++) {
                    if (actionObj[i].split(':')[0] == 'PFTCell' + index) {
                        this.tempMethod = actionObj[i].substring(actionObj[i].indexOf(":") + 1);
                        break;
                    }
                }
                return this.tempMethod;
            },
            checkforLabel: function (value, index) {
                if (this.labels != undefined && this.labels != "") {
                    var label = this.labels.split(';');
                    if (this.labels.includes('PFTCell')) {
                        for (var i = 0; i < label.length; i++) {
                            if (label[i].split(':')[0] == 'PFTCell' + index && value.trim() != "" && value != undefined) {
                                return label[i].split(':')[1] + ' : ' + value;
                            }
                        }
                    }
                    else return label[index] + ' : ' + value;
                }
                return value;
            },
            setParentCompId: function (index) {
                return "idTxtCmptVtCx1_" + index;
            },
            checkIfValueExists: function (value) {
                return value ? true : false;
            },
            CheckforActionFor: function (value, index) {
                if (value != undefined && value != "") {
                    var actionforArray = value.split(';');
                    return actionforArray[index];
                }
                else
                    return "";
            }
        });
    </script>

</dom-module>
<dom-module id="PFT-Text" assetpath="Components/">
    <template>
        <div class$="textDiv lblText woAttachmentWrap {{cssclassName}} {{GetLinkedActionClass(action,rowValue,groupedTaskdetails)}}" c-action="{{populateAttributes(parentCmpid,woType)}}" title="{{getTitle(value,action,rowValue,groupedTaskdetails)}}" action="{{SetClickAttribute(action,rowValue,groupedTaskdetails)}}" action-c="{{bindOnclick(functionName,functionParams,rowValue)}}"><span>{{value}}</span></div>
    </template>
    <script>
        Polymer({

            is: 'PFT-Text',

            properties: {
                value: {
                    Type: String,
                    value: ""
                },
                action: {
                    Type: String,
                    value: ""
                },
                cssclassName: {
                    type: String,
                    value: ""
                },
                rowValue: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                groupedTaskdetails: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                cAction: {
                    type: String,
                    value: ""
                },
                woType: {
                    type: String,
                    value: ""
                }
            },
            SetClickAttribute: function (actionValue, rowValue, groupedTaskdetails) {
                var attr = '';
                var params = '';
                var functionToCall = '';
                var rowValue = this.rowValue;
                if (actionValue != null && actionValue != "") {
                    attr = document.createAttribute('onclick');
                    attr.value = actionValue;
                    this.$$(".textDiv").setAttributeNode(attr);
                    var isCollaboratedTask = this.getIsCollaboratedTask(rowValue);
                    var assignmentDetails = this.getAssignmentDetails(rowValue);
                    if (isCollaboratedTask && isCollaboratedTask == true) {
                        return;
                    }
                    else {
                        if (rowValue && rowValue.StdAttributes && rowValue.StdAttributes.TaskId && !IsValidateTaskAction(JSON.parse(assignmentDetails), rowValue.StdAttributes.StatusAcronym, isCollaboratedTask)) {
                            this.$$(".textDiv").removeAttribute("onclick");
                        }
                    }
                }
            },
            bindOnclick: function (functionName, functionParams, rowValue) {
                if (functionName != undefined && functionName != "" && functionName != null) {
                    var attr = document.createAttribute('onclick');
                    functionParams = functionParams.replace(/"/g, '\\"');
                    attr.value = functionName + '(\'' + functionParams.replace(/'/g, '"') + '\')';
                    this.$$(".textDiv").setAttributeNode(attr);
                    var isCollaboratedTask = this.getIsCollaboratedTask(rowValue);
                    var assignmentDetails = this.getAssignmentDetails(rowValue);
                    if (isCollaboratedTask && isCollaboratedTask == true) {
                        return;
                    }
                    else {
                        if (rowValue && rowValue.StdAttributes && rowValue.StdAttributes.TaskId && !IsValidateTaskAction(JSON.parse(assignmentDetails), rowValue.StdAttributes.StatusAcronym, isCollaboratedTask)) {
                            this.$$(".textDiv").removeAttribute("onclick");
                        }
                    }
                }
            },
            GetLinkedActionClass: function (actionValue, rowValue, groupedTaskdetails) {
                var cssClass = "";
                if (actionValue != "" && actionValue != undefined) {
                    cssClass = "actionLink";
                    var isCollaboratedTask = this.getIsCollaboratedTask(rowValue);
                    var assignmentDetails = this.getAssignmentDetails(rowValue);
                    if (isCollaboratedTask && isCollaboratedTask == true) {
                        return cssClass;
                    }
                    else {
                        if (rowValue && rowValue.StdAttributes && rowValue.StdAttributes.TaskId
                            && !IsValidateTaskAction(JSON.parse(assignmentDetails), rowValue.StdAttributes.StatusAcronym, isCollaboratedTask)) {
                            cssClass = "disableAction prgDisVersionType";
                        }
                    }
                }
                return cssClass;
            },
            getTitle: function (value, action, rowValue, groupedTaskdetails) {
                var toolTip = value;
                if (action != "" && action != undefined) {
                    var assignmentDetails = this.getAssignmentDetails(rowValue);
                    if (rowValue && rowValue.StdAttributes) {
                        var isCollaboratedTask = this.getIsCollaboratedTask(rowValue);
                        if (isCollaboratedTask && isCollaboratedTask == true) {
                            return toolTip;
                        }
                        else {
                            if (rowValue.StdAttributes.TaskId != undefined && rowValue.StdAttributes.TaskId != "")
                                toolTip = GetTooltipForAction(JSON.parse(assignmentDetails), rowValue.StdAttributes.StatusAcronym, isCollaboratedTask, value);
                        }
                    }
                }
                return toolTip;
            },
            getIsCollaboratedTask: function (rowValue) {
                var isCollaboratedTask = false;
                if (rowValue && rowValue.Attributes && rowValue.Attributes.IsTaskCollaborated)
                    isCollaboratedTask = rowValue.Attributes.IsTaskCollaborated.toLowerCase() == 'true' ? true : false;
                else if (rowValue && rowValue.PFTRow && rowValue.PFTRow.length > 0 && rowValue.PFTRow[0].PFTColumn.length >= 22 && rowValue.PFTRow[0].PFTColumn[21].PFTCell[0])
                    isCollaboratedTask = rowValue.PFTRow[0].PFTColumn[21].PFTCell[0].Value.toLowerCase() == 'true' ? true : false;

                return isCollaboratedTask;
            },
            populateAttributes: function (compId, woType) {
                if (typeof loadAttributes === "function" && compId !== "" && compId !== undefined) {
                    if (compId.includes('Cx') || compId.includes('Version') || compId.includes('MetaData')) {
                        var parentcmpId;
                        parentcmpId = compId.slice(0, -2);
                        attr = document.createAttribute('onclick');
                        attr.value = "loadAttributes('" + compId + "', 'pft-text', '" + getParentCmpParmeters(parentcmpId) + "', '" + parentcmpId + "', '" + woType + "')";
                        this.$$(".textDiv").setAttributeNode(attr);
                        return;
                    }
                }
            },
            getAssignmentDetails: function (rowData) {
                return GetTaskAssignmentObject(rowData);
            }
        });
    </script>

</dom-module>
<dom-module id="PFT-Action" assetpath="Components/">
    <template>
        <div id="actiondiv" class="actionClass" on-tap="{{onclickFunction}}">{{value.AttributeValue}}</div>
    </template>
    <script>
        Polymer({

            is: 'PFT-Action',
            properties: {

                //value: Object,
                onclickFunction: {
                    type: String,
                    computed: 'CallOnclickFunction(value)'
                }
            },
            CallOnclickFunction: function (value) {
                var params = value.ActionParams.join("','");
                var functionToCall = value.FunctionName + "('" + params + "')";
                return functionToCall;
            }    
        });
    </script>

</dom-module>

<dom-module id="PFT-Image" assetpath="Components/">
    <template>
        <div class="imgDiv dboardThumb FL" on-tap="toggleRow" style="background-Image: url([[GetImageUrl(value)]])" action="{{SetClickAttribute(clickFunction,value)}}" action-c="{{bindOnclick(functionName,functionParams,value)}}"></div>
    </template>
    <script>
        Polymer({
            is: 'PFT-Image',
            properties: {
                value: String,
                clickFunction: String,
                parentClass: String,
                cssclassName:String
            },
            attached: function(){
                if (this.cssclassName && this.cssclassName == "hideMe") {
                    this.parentElement.addClassName('hideMe');
                    return;
                }
            },
            GetImageUrl: function (url) {
                if (url != undefined && url != "" && url != null && !url.contains("genericFile.png") && !url.contains("noPreview.png")) {
                    if (url.indexOf('http:') == 0 && document.referrer != "") {
                        url = url.replace('http:', new URL(document.referrer).protocol);
                    }
                    url = GetThumbnailUrlForWatermark(url);
                    return url;
                }
                else
                    return "/BC/Product/Images/Elements/Assets/Preview/noPreview.png";
            },
            SetClickAttribute: function (actionValue, url) {
                var attr = '';
                var params = '';
                var functionToCall = '';
                var divId = '';
                if (url != undefined && url != "" && !url.contains("genericFile.png") && !url.contains("noPreview.png") && url != null && actionValue != undefined &&
                    actionValue != "" && actionValue != null) {
                    attr = document.createAttribute('OnClick');
                    attr.value = actionValue;
                    this.$$(".imgDiv").setAttributeNode(attr);
                }
            },
            bindOnclick: function (functionName, functionParams, url) {
                if (url != undefined && url != "" && !url.contains("genericFile.png") && !url.contains("noPreview.png") && url != null && functionName != undefined && functionName != "" && functionName != null) {
                    var attr = document.createAttribute('onclick');
                    functionParams = functionParams.replace(/"/g, '\\"');
                    attr.value = functionName + '(\'' + functionParams.replace(/'/g, '"') + '\')';
                    this.$$(".imgDiv").setAttributeNode(attr);
                }
            },
            toggleRow: function () {
                if (($jq(window).width() < 480) && (/Android|iPhone|iPad/i.test(navigator.userAgent) == true)) {
                    if (!this.parentClass.includes('tr')) {
                        if (!jQuery("#" + this.parentClass).hasClass('tappedRow')) {
                            jQuery(".tappedRow").removeClass('tappedRow');
                            jQuery("#" + this.parentClass).addClass('tappedRow');
                            jQuery('tr:not(.wRow.tappedRow)').css('display', 'none');
                            jQuery('.processV2Wrap, .processV3Wrap').find('.cntrlWrapper').css('display', 'none');
                           // jQuery('.processV2Scroll.container, .processV3Scroll.container').addClass('detailViewContainer');
                            jQuery('.processV2Wrap, .processV3Wrap').after("<div onclick='hideExtendView()' class='newActionBtn tappedRowExtendView'>Back</div>");
                        }
                        else {
                            jQuery(".tappedRow").removeClass('tappedRow');
                            jQuery('tr.wRow').css('display', 'block');
                            jQuery('.processV2Wrap, .processV3Wrap').find('.cntrlWrapper').css('display', 'block');
                            //jQuery('.processV2Scroll.container, .processV3Scroll.container').removeClass('detailViewContainer');
                            jQuery('.tappedRowExtendView').remove();
                        }
                    }
                    else {
                        if (!jQuery("." + this.parentClass).hasClass('tappedTaskRow')) {
                            jQuery(".tappedTaskRow").removeClass('tappedTaskRow');
                            jQuery("." + this.parentClass).addClass('tappedTaskRow');
                            jQuery('tr:not(.taskRowHide.tappedTaskRow)').css('display', 'none');
                            jQuery('.lhsGrid').find('.cntrlWrapper').css('display', 'none');
                            jQuery('.taskV2Scroll.container').addClass('detailViewContainer');
                            jQuery('.lhsGrid').after("<div onclick='hideExtendView()' class='newActionBtn tappedRowExtendView'>Back</div>");
                        }
                        else {
                            jQuery(".tappedTaskRow").removeClass('tappedTaskRow');
                            jQuery('.tvR1.taskRowHide').css('display', 'block');
                            jQuery('.lhsGrid').find('.cntrlWrapper').css('display', 'block');
                            jQuery('.taskV2Scroll.container').removeClass('detailViewContainer');
                            //jQuery('.taskV2Scroll.container').css('overflow-y', 'auto');
                            jQuery('.tappedRowExtendView').remove();
                        }
                    }
                }
            }
        });
    </script>
</dom-module><dom-module id="pft-toolbar" assetpath="Components/">
    <template>
        <div class="PFTToolbar cntrlWrapper" id="PFTToolbar">
            <div class="cntrlInnerWpapper">
                <div id="actionsDiv"></div>
                <div class="moreWrp">
                    <div class="moreMnu FL" on-tap="showMoreActionMenu">More</div>
                    <div id="moreActions" class="moreActions FL"></div>
                </div>
                <div class="FL marL10"><pft-newentry id="newEntry"></pft-newentry></div>

                <div class="FR marR10">
                    <span class="openClosePanel openClosePanelRight shwHdeChart" id="openChart" style="display: none" onclick="openHideChart();" title="Click here to close charts">
                        <span></span><span></span><span></span>
                    </span>
                </div>
                <template is="dom-if" if="{{CheckForControlRequired(sortData)}}">
                    <pft-sort id="sortDiv" sort-data="{{sortData}}"></pft-sort>
                </template>
                <template is="dom-if" if="{{CheckForControlRequired(filterData)}}">
                    <pft-filter id="filterDiv" filter-data="{{filterData}}" static-filter="{{staticFilter}}"></pft-filter>
                </template>
                <template is="dom-if" if="{{CheckForSearchRequired(action.IsSearchRequired)}}">
                    <pft-searchbox></pft-searchbox>
                </template>
                <div class="clr"></div>

            </div>
        </div>
    </template>

    <script>
        Polymer({
            is: "pft-toolbar",
            properties: {
                sortProperty:
                    {
                        type: Object,
                        notify: true,
                        reflectToAttribute: true
                    },
                sortData: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                filterData: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                staticFilter: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                requestType: {
                    type: String,
                    value: "",
                    notify: true,
                    reflectToAttribute: true
                },
                functionName: {
                    type: String,
                    //value: ""
                    computed: 'GetFunctionName(action)'
                },
                functionParams: {
                    type: String,
                    value: ""
                },
                context:
                    {
                        type: String,
                        value: function () {
                            return "";
                        }
                    },
                dashboardactiontype:
                    {
                        type: String,
                        value: function () {
                            return "";
                        }
                    },
                istoolbarloaded:
                    {
                        type: Boolean,
                        value: function () {
                            return false;
                        }
                    },
                actionconfigParams:
                    {
                        type: Array,
                        value: function () {
                            return [];
                        }//,
                        //notify: true
                    },
                action: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                contextualactions: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                }
            },
            ready: function () {
                //this.SetClickAttribute(this.createactionConfig);
            },
            attached: function () {
                this.async(function () {
                    GetToolbarActions(this.context, this.actionconfigParams, this.dashboardactiontype);
                })
            },
            loadData: function () {
                var params = false;
                document.getElementById(this.dataHost.id).pageNo = 0;
                window[this.functionName].apply(this, [false, this.functionParams]);
            },
            CheckForControlRequired: function (isControlRequired) {
                if (isControlRequired != null)
                    return true;
                else
                    return false;
            },
            CheckForSearchRequired: function (isSearchRequired) {
                if (isSearchRequired) {
                    if (isSearchRequired.toLowerCase() == "true")
                        return true;
                    else
                        return false;
                }
                else
                    return true;
            },
            CheckForActionRequired: function (isActionRequired) {
                if (isActionRequired != null && isActionRequired.toLowerCase() == "true")
                    return true;
                else
                    return false;
            },
            GetFunctionName: function (action) {
                if (action && action.length > 0){
                    var actionObj = JSON.parse(action[0]);
                    if (actionObj.filterSortOnclickFunction)
                        return actionObj.filterSortOnclickFunction;
                    else
                        return 'LoadDashboardData';
                }
                else
                    return 'LoadDashboardData';
            },
            showMoreActionMenu: function()
            {
                if( $jq('.moreActions').css('display')=='none')
                    $jq('.moreActions').css('display', 'block');
                else
                    $jq('.moreActions').css('display', 'none');

            }
        });
    </script>
</dom-module><dom-module id="PFT-Sort" assetpath="Components/">
    <template>
        <div class="FR marR10" id="ReviewInboxSort">
            <div title="" class="posRel">
                <div class="sortLink clear-sortNew" title="Click here to Sort By" on-tap="showSortDetails" id="sortArrow">
                </div>
                <div id="Sort" class="sortDiv" style="display:none;">
                    <!--<div class="header-container" on-tap="showContent"> <span class="clear-moveL clearmoveL"></span> <span class="header-label"> Sort </span></div>-->
                    <div class="sortInnerCont">
                        <polymer-dragula>
                            <ul id="sortableColumns"></ul>
                        </polymer-dragula>
                        <div id="addDiv" style="display: none" class="SortFooterDiv" on-tap="addMore">
                            <div class="sortAddmore" title="Click here to Add more">+ Add more</div>
                        </div>
                    </div>
                        <div class="SortFooter">
                            <div id="apply" class="newActionApplyBtn FR" title="Click here to Apply" on-tap="apply">Apply</div>
                            <div id="resetSort" class="newActionBtn FR marR10" title="Click here to Reset" on-tap="reset">Reset</div>
                            <div class="newActionBtn FL closePanelBtn" title="Click here to Close" on-tap="closeSortPanel">Close</div>
                            <div class="clr"></div>
                        </div>
                    </div>
            </div>
    </div></template>
    <script>
        Polymer({
            is: "PFT-Sort",
            properties: {
                sortData: {
                    type: Object
                },
                sortAttribute: {
                    type: Object
                },
                sortDetails: {
                    type: Object
                },
                globalSelectedArray: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                sortOrderId: {
                    type: Number,
                    value: 0
                },
                crossId: {
                    type: Number,
                    value: 0
                },
                dropDownId: {
                    type: Number,
                    value: 0
                },
                listId: {
                    type: Number,
                    value: 0
                }
            },
            attached: function () {
                if (this.sortData.defaultColumn != undefined && this.sortData.defaultColumn != "") {
                    this.sortAttribute = [];
                    for (var i = 0; i < this.sortData.defaultColumn.length; i++) {
                        this.sortAttribute.push({
                            SortDirection: this.sortData.defaultColumn[i].SortDirection == 0 ? "Asc" : "Desc",
                            ColumnName: this.sortData.defaultColumn[i].ColumnName
                        });
                        this.sortData.defaultColumn[i].SortDirection = this.sortData.defaultColumn[i].SortDirection == 0 ? "Asc" : "Desc";
                    }
                    if (this.sortData.isUserDefault == true)
                        $jq('.sortLink').addClass('clearSortActive');
                }
            },
            showSortDetails: function () {
                if (typeof loadAttributes === "function") {
                    loadAttributes("idSortControl", "pft-sortcontrol", "DisplayName;FieldName;DefaultSortColumn;DefaultSortOrder");
                }
                else {
                    document.body.addEventListener('click', hideSortMenu, false);
                    this.dropDownId = 0;
                    this.listId = 0;
                    if (this.sortAttribute && this.sortAttribute.length > 0 && $jq(".WCsortwrapLI").length == 0) {
                        for (var i = 0; i < this.sortAttribute.length; i++) {
                            this.addMore(false, this.sortAttribute[i].SortDirection, this.sortAttribute[i].ColumnName);
                        }
                    }
                    if ((this.sortData.defaultColumn.length < this.sortData.columnNames.length && this.globalSelectedArray.length != this.sortData.columnNames.length)
                        || (!this.sortAttribute && !$jq('#sortableColumns'))) {
                        document.getElementById('addDiv').style.display = 'block';
                    }
                }
            },
            changeSortOrder: function (e) {
                var Div = e.currentTarget.id;
                if (document.getElementById(Div).className == 'FL linked SrtAscDec clear-arrowB style-scope pft-sort') {
                    document.getElementById(Div).className = 'FL linked SrtAscDec clear-arrowT style-scope pft-sort';
                    $jq("#" + Div).attr("title", "Ascending");
                }
                else {
                    document.getElementById(Div).className = 'FL linked SrtAscDec clear-arrowB style-scope pft-sort';
                    $jq("#" + Div).attr("title", "Descending");
                }
            },
            addMore: function (e, OrderSort, AttrDefault) {
                var mainUL = document.getElementById('sortableColumns');
                /*Creating List*/
                var list = document.createElement('li');
                this.listId++;
                list.id = 'li_' + this.listId;
                list.className = 'WCsortwrapLI style-scope pft-sort';

                /*Creating Drag Icon*/
                var dragIcon = document.createElement('span');
                dragIcon.className = 'FL dragIcon clear-drag2  linked';
                dragIcon.title = 'Drag';
                list.appendChild(dragIcon);

                /*Creating Drop Down*/
                var dropDown = document.createElement('select');
                this.dropDownId++;
                dropDown.id = 'dropdown' + this.dropDownId;
                dropDown.className = 'FL sortdropBtn';
                list.appendChild(dropDown);

                this.globalSelectedArray = [];
                for (var i = 0; i < $jq(".sortdropBtn").length ; i++) {
                    var selectedValue = $jq(".sortdropBtn")[i].options[$jq(".sortdropBtn")[i].selectedIndex].value;
                    this.globalSelectedArray.push(selectedValue);
                }

                /*Creating options*/
                for (var i = 0; i < this.sortData.columnNames.length; i++) {
                    var optionsD = document.createElement("option");
                    if (this.globalSelectedArray.contains(this.sortData.columnNames[i].key)) {
                        optionsD.id = this.sortData.columnNames[i].key + this.dropDownId;
                        optionsD.text = this.sortData.columnNames[i].value;
                        optionsD.value = this.sortData.columnNames[i].key;
                        optionsD.style.display = 'none';
                        optionsD.disabled = true;
                    }
                    else {
                        optionsD.id = this.sortData.columnNames[i].key + this.dropDownId;
                        optionsD.value = this.sortData.columnNames[i].key;
                        optionsD.text = this.sortData.columnNames[i].value;
                    }
                    dropDown.add(optionsD, dropDown.options[null]);
                }

                /*Creating Sort Icon*/
                var sortOrderIcon = document.createElement('span');
                sortOrderIcon.setAttribute('class', 'FL linked SrtAscDec clear-arrowT style-scope pft-sort');
                sortOrderIcon.id = 'Asc' + this.sortOrderId++;
                sortOrderIcon.title = 'Ascending';
                sortOrderIcon.innerHTML = '';
                list.appendChild(sortOrderIcon);

                /*Creating Cross Icon*/
                var crossIcon = document.createElement('span');
                crossIcon.id = 'Rem' + this.crossId++;
                crossIcon.className = 'linked clear-cross sortcross FL';
                crossIcon.title = 'Remove';
                crossIcon.innerHTML = '';
                list.appendChild(crossIcon);

                mainUL.appendChild(list);

                this.globalSelectedArray = [];
                if (this.sortAttribute && this.sortAttribute.length > 0) {
                    for (var i = 0; i < this.sortAttribute.length; i++) {
                        if (AttrDefault != null && AttrDefault == this.sortAttribute[i].ColumnName)
                            $jq("#" + dropDown.id).children('option[value="' + AttrDefault + '"]').attr("selected", "selected");
                    }
                }
                $jq("#" + dropDown.id).find('option:selected').attr("selected", "selected");

                var recentvalue = $jq("#" + dropDown.id).find('option:selected').attr('value');
                for (var i = 0; i < $jq(".sortdropBtn").length ; i++) {
                    var selectedValue = $jq(".sortdropBtn")[i].options[$jq(".sortdropBtn")[i].selectedIndex].value;
                    this.globalSelectedArray.push(selectedValue);
                    if ($jq(".sortdropBtn")[i].id != dropDown.id) {
                        $jq("select.sortdropBtn option[value='" + recentvalue + "']").prop('disabled', true);
                        $jq("select.sortdropBtn option[value='" + recentvalue + "']").css("display", "none");
                    }
                    else {
                        $jq("#" + dropDown.id).find('option:selected').prop('disabled', false);
                        $jq("#" + dropDown.id).find('option:selected').css("display", "block");
                    }
                }
                if ($jq(".sortdropBtn").length > 1)
                    $jq('.sortcross').show();
                else
                    $jq('.sortcross').hide();

                if (OrderSort != null && typeof (OrderSort) == "string") {
                    if (OrderSort.toUpperCase() == 'ASC') {
                        document.getElementById(sortOrderIcon.id).className = 'FL linked SrtAscDec clear-arrowT style-scope pft-sort';
                        sortOrderIcon.title = 'Ascending';
                    }
                    else if (OrderSort.toUpperCase() == 'DESC') {
                        document.getElementById(sortOrderIcon.id).className = 'FL linked SrtAscDec clear-arrowB style-scope pft-sort';
                        sortOrderIcon.title = 'Descending';
                    }
                }

                if (this.globalSelectedArray.length == this.sortData.columnNames.length) {
                    document.getElementById('addDiv').style.display = 'none';
                }

                this.listen(sortOrderIcon, 'tap', 'changeSortOrder');
                this.listen(crossIcon, 'tap', 'remove');
                this.listen(dropDown, 'change', 'onChange');
            },
            remove: function (e) {
                var Div = e.currentTarget.closest("li").id;
                var list = document.getElementById(Div);
                var selectTag = list.getElementsByTagName('select');
                var selectId = $jq(selectTag).attr('id');
                var recentvalue = $jq("#" + selectId).find('option:selected').attr('value');
                $jq("select.sortdropBtn option[value='" + recentvalue + "']").prop('disabled', false);
                $jq("select.sortdropBtn option[value='" + recentvalue + "']").css("display", "block");
                $(Div).remove(Div);
                if ($jq(".sortdropBtn").length == 1)
                    $jq('.sortcross').hide();

                if (this.sortData.columnNames.length > 1)
                    document.getElementById('addDiv').style.display = 'block';
            },
            onChange: function (e) {
                var selectedArray = [];
                for (var i = 0; i < $jq(".sortdropBtn").length ; i++) {
                    var selectedValue = $jq(".sortdropBtn")[i].options[$jq(".sortdropBtn")[i].selectedIndex].value;
                    selectedArray.push(selectedValue);
                }
                for (var i = 0; i < this.globalSelectedArray.length ; i++) {
                    if (selectedArray[i] != this.globalSelectedArray[i]) {
                        $jq("select.sortdropBtn option[value='" + e.target.value + "']:not([value=''])").prop('disabled', true);
                        $jq("select.sortdropBtn option[value='" + e.target.value + "']:not([value=''])").css("display", "none");
                        $jq(e.target).find("option[value='" + e.target.value + "']:not([value=''])").prop('disabled', false);
                        $jq(e.target).find("option[value='" + e.target.value + "']:not([value=''])").css("display", "block");
                        $jq(e.target).find("option[value='" + e.target.value + "']:not([value=''])").attr("selected", "selected");
                    }
                    if (!selectedArray.contains(this.globalSelectedArray[i])) {
                        $jq("select.sortdropBtn option[value='" + this.globalSelectedArray[i] + "']").prop('disabled', false);
                        $jq("select.sortdropBtn option[value='" + this.globalSelectedArray[i] + "']").css("display", "block");
                        $jq(e.target).find("option[value='" + this.globalSelectedArray[i] + "']:not([value=''])").removeAttr('selected');
                    }
                }
                this.globalSelectedArray = selectedArray;
            },
            reset: function () {               
                var selectedArray = [];
                if (this.sortData.defaultColumn.length < this.sortData.columnNames.length)
                    document.getElementById('addDiv').style.display = 'block';
                for (var i = 0; i < $jq(".WCsortwrapLI").length ; i++) {
                    var selectValue = document.getElementById($jq($jq(".WCsortwrapLI")[i].getElementsByTagName('select')).attr('id')).value;
                    $jq("select.sortdropBtn option[value='" + selectValue + "']").prop('disabled', false);
                    $jq("select.sortdropBtn option[value='" + selectValue + "']").css("display", "block");
                    selectedArray.push($jq(".WCsortwrapLI")[i]);
                }
                $jq(selectedArray).remove();
                for (var i = 0; i < this.sortData.defaultColumn.length; i++) {
                    this.addMore(false, this.sortData.defaultColumn[i].SortDirection, this.sortData.defaultColumn[i].ColumnName);
                }
            },
            apply: function () {
                $jq('.sortLink').addClass('clearSortActive');
                this.sortAttribute = [];
                this.sortData.defaultColumn = [];
                for (var i = 0; i < $jq(".WCsortwrapLI").length ; i++) {
                    var selectedValue = $jq(".sortdropBtn")[i].options[$jq(".sortdropBtn")[i].selectedIndex].value;
                    var selectedSortOrder;
                    var selectedSortDisplay = $jq(".sortdropBtn")[i].options[$jq(".sortdropBtn")[i].selectedIndex].text;
                    if ($jq(".WCsortwrapLI")[i].getElementsByClassName('clear-arrowT').length != 0) {
                        selectedSortOrder = "Asc";
                    }
                    else if ($jq(".WCsortwrapLI")[i].getElementsByClassName('clear-arrowB').length != 0) {
                        selectedSortOrder = "Desc";
                    }
                    this.sortAttribute.push({
                        SortDirection: selectedSortOrder,
                        ColumnName: selectedValue,
                        DisplayName: selectedSortDisplay
                    });
                    this.sortData.defaultColumn.push({
                        ColumnName: selectedValue,
                        SortDirection: selectedSortOrder
                    });
                }
                this.async(function () {
                    this.domHost.loadData();
                    SaveUserPreferenceSort();     
                });
                $jq('#ReviewInboxSort .sortDiv').css("display", "none");
            },
            closeSortPanel: function () {
                $jq('#ReviewInboxSort .sortDiv').css("display", "none");
            }
        });
    </script>
</dom-module><dom-module id="pft-filter" assetpath="Components/">
    <template>
        <div id="FilterControl{{dataFilterid}}" class="FR marR10" onclick="">
            <div class="FilterIcon posRel">
                <div class="filterLink clear-filter" id="filterIcon" title="Click here for Filters" on-tap="taskFilterPopUp"></div>
                <div id$="FilterPanel{{dataFilterid}}" class="filterPanelDiv" style="display: none">
                    <!--<div class="header-container" on-tap="showContent"> <span class="clear-moveL clearmoveL"> </span><span class="header-label">Filter</span></div>-->
                    <div id="FilterBorder" class="filterContainer">
                        <div id$="filterContent{{dataFilterid}}" class="container">
                            <ul id$="filterableColumns{{dataFilterid}}"></ul>
                        </div>
                        <div id$="addFilterDiv{{dataFilterid}}" style="display: none" class="filterFooterDiv" on-tap="addMore">
                            <div id="addMoreFilter" class="filterAddmore" title="Click here to Add more">+ Add more</div>
                        </div>
                        <div class="filterFooter">
                            <div id$="apply{{dataFilterid}}" class="newActionApplyBtn FR" title="Click here to Apply" on-tap="applyFilters">Apply</div>
                            <div id="resetFilter" class="newActionBtn FR marR10" title="Click here to Reset" on-tap="resetFilters">Reset</div>
                            <div class="newActionBtn FL closePanelBtn" title="Click here to Close" on-tap="closeFilterPanel">Close</div>
                            <div class="clr"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </template>

    <script>
        Polymer({
            is: "pft-filter",
            properties: {
                filterData: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                filterAttribute: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                defaultFilterData: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                isOnGoingRequest: {
                    type: Boolean,
                    value: false
                },
                filterId: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                userFilterValues: {
                    type: Object
                },
                listId: {
                    type: Number,
                    value: 0
                },
                globalFilterList: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                userFilters: {
                    type: Number,
                    value: 0
                },
                defaultFilters: {
                    type: Number,
                    value: 0
                },
                dateRangeIds: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                dataFilterid: {
                    type: String,
                    value:""
                },
                smtAltFlt: {
                    type: String,
                    value:""
                }
            },
            attached: function () {
                for (var i = 0; i < this.filterData.length; i++) {
                    if (this.filterData[i].UserSavedFilter != null) {
                        ++this.userFilters;
                        this.setFilterAttribute(this.filterData[i]);
                        $jq('.filterLink').addClass('clearFilterActive');
                    }
                }
                if (this.userFilters == 0) {
                    for (var j = 0; j < this.filterData.length; j++) {
                        if (this.filterData[j].DefaultFilter != null) {
                            ++this.defaultFilters;
                            this.setFilterAttribute(this.filterData[j]);
                            $jq('.filterLink').removeClass('clearFilterActive');
                        }
                    }
                }
                this.filterAttribute = this.defaultFilterData;
            },
            taskFilterPopUp: function (e) {
                if (typeof loadAttributes === "function") {
                    loadAttributes("idFilterControl", "pft-filtercontrol", "DisplayName;FieldName;DefaultFilter;DefaultValue");
                    return;
                }
                if (!$jq("#FilterPanel" + this.dataFilterid).is(":visible") || e == undefined) {
                    $jq('.filterCategoryLI').remove('.filterCategoryLI');
                    this.globalFilterList = [];
                    this.listId = 0;
                    this.dateRangeIds = [];
                    document.getElementById('addFilterDiv' + this.dataFilterid).style.display = 'block';
                    if (this.userFilters > 0) {
                        for (var i = 0; i < this.filterData.length; i++) {
                            if (this.filterData[i].UserSavedFilter != null) {
                                this.addFilter(this.filterData[i], this.userFilters);
                            }
                        }
                    }
                    else if (this.userFilters == 0 && this.defaultFilters > 0 && !this.isOnGoingRequest) {
                        for (var j = 0; j < this.filterData.length; j++) {
                            if (this.filterData[j].DefaultFilter != null) {
                                this.addFilter(this.filterData[j], this.defaultFilters);
                            }
                        }
                    }
                    if ($jq('.filterCategoryLI').length == this.filterData.length)
                        document.getElementById('addFilterDiv' + this.dataFilterid).style.display = 'none';
                    loadScroll('filterContent' + this.dataFilterid);
                    document.body.addEventListener('click', hideFilterMenu, false);
                }
                else {
                    $jq("#FilterPanel" + this.dataFilterid).hide();
                    document.body.removeEventListener('click', hideFilterMenu, false);
                    document.body.removeEventListener('click', hideStaticFilterDropDown, false);
                }
            },
            convertToCamelCase: function (str, filterName) {
                if ((filterName.toUpperCase() == 'CONTENTTYPE' || filterName.toUpperCase() == 'PRIORITY' || filterName.toUpperCase() == 'S_PRIORITY') && str.toUpperCase() != 'NA') {
                    return str.toLowerCase().replace(/(?:^|\s)\w/g, function (match) {
                        return match.toUpperCase();
                    });
                }
                else
                    return str;
            },
            addClass: function (mainCategoryId) {
                var optionElem = $jq('#' + mainCategoryId).find('#optWrap');
                if (optionElem && optionElem.length > 0) {
                    optionElem.addClass('optWrap');
                }
            },
            createFilterLI: function (filterValue, isAddMoreClicked) {
                var mainUL = document.getElementById('filterableColumns' + this.dataFilterid);
                var list = '';
                if (filterValue && !filterValue.IsStatic) {
                    list = document.createElement('li');
                    this.listId++;
                    list.id = 'filterCategory_' + this.listId;
                    list.className = 'filterCategory filterCategoryLI style-scope pft-filter';

                    /*Creating Drop Down*/
                    var dropDown = document.createElement('select');
                    dropDown.id = 'dropDown_' + this.listId;
                    dropDown.className = 'FL filterDropDown';
                    list.appendChild(dropDown);

                    for (var i = 0; i < filterValue.SubCategory.length; i++) {
                        var selectOptions = document.createElement("option");
                        selectOptions.id = dropDown.id + filterValue.SubCategory[i].key;
                        selectOptions.value = filterValue.SubCategory[i].key;
                        selectOptions.text = this.convertToCamelCase(filterValue.SubCategory[i].value, filterValue.MainCategory.key)+' ' + filterValue.SubCategory[i].count;
                        dropDown.add(selectOptions, dropDown.options[null]);
                    }

                    /*Creating Remove Icon*/
                    var crossIcon = document.createElement('span');
                    crossIcon.id = 'removeCategory--' + filterValue.MainCategory.key;
                    crossIcon.className = 'linked clear-cross filterRemove';
                    crossIcon.title = 'Remove Filter';
                    crossIcon.innerHTML = '';
                    list.appendChild(crossIcon);

                    this.listen(crossIcon, 'tap', 'removeFilterCategory');
                }
                else {
                    list = this.createStaticFilters(filterValue, isAddMoreClicked);

                }

                /*Creating selected filter div*/
                var selectedFilterDiv = document.createElement('div');
                selectedFilterDiv.id = 'selectedFilterDiv_' + this.listId;
                selectedFilterDiv.className = 'selectedFilterDiv';
                list.appendChild(selectedFilterDiv);

                mainUL.appendChild(list);
                if (filterValue && !filterValue.IsStatic) {
                    this.initializeSumo(filterValue, dropDown.id);
                    this.addClass('filterCategory_' + this.listId);
                }
                else {
                    this.initializeStaticChangeEvent(filterValue, selectedFilterDiv.id);
                }
            },
            initializeSumo: function (filterValue, elemId) {
                $jq('#' + elemId).attr('multiple', 'multiple');
                $jq('#' + elemId).SumoSelect({
                    placeholder: filterValue.MainCategory.value,
                    csvDispCount: 1,
                    captionFormat: filterValue.MainCategory.value,
                    captionFormatAllSelected: filterValue.MainCategory.value,
                    selectAll: true
                });
                $jq('select#' + elemId)[0].sumo.unSelectItem(0);
            },
            initializeSumoChangeEvent: function (filterValue, sourceId, targetId,dataFilterid) {
                $jq('select#' + sourceId).on('change', function (item) {
                    var filterCategoryData = filterValue;
                    document.getElementById(targetId).innerHTML = "";
                    var selectedValues = new Array();
                    var selectedfltr = $jq(this).val();
                    if (selectedfltr == null) {
                        filterCategoryData.newUserSavedFilter = null;
                    }
                    else {
                        for (var i = 0; i < selectedfltr.length; i++) {
                            selectedValues.push($jq("[id='" + $jq(this).context.id + selectedfltr[i] + "']").text());
                        }
                        onSelectingFilter(selectedfltr, selectedValues, targetId);
                        filterCategoryData.newUserSavedFilter = [];
                        for (var j = 0; j < selectedfltr.length; j++) {
                            selectedfltr[j] == "NA" ? selectedfltr[j] = "" : selectedfltr[j];
                            filterCategoryData.newUserSavedFilter.push(selectedfltr[j]);
                        }
                    }
                });
                $jq('select#' + sourceId).on('click', function (item) {
                    setTimeout(function () {
                        updateScroll('filterContent' + dataFilterid);
                        loadScrollByClass('optWrap');
                    }, 1);
                    updateScroll('filterContent' + dataFilterid);
                });
            },
            initializeStaticChangeEvent: function (filterValue, targetId) {
                $jq("#staticOptions_" + this.listId + " input:radio").click(function (obj) {
                    var filterCategoryData = filterValue;
                    document.getElementById(targetId).innerHTML = "";
                    var selectedValues = new Array();
                    selectedValues.push($jq(this)[0].parentElement.innerText.trim(0, ""));

                    var selectedOptionId = new Array();
                    selectedOptionId.push($jq(this).val());

                    if ($jq('#dateRangeInput' + targetId.split('_')[1] + '_From').length > 0 && $jq('#dateRangeInput' + targetId.split('_')[1] + '_To').length > 0) {
                        $jq('#dateRangeInput' + targetId.split('_')[1] + '_From')[0].value = "";
                        $jq('#dateRangeInput' + targetId.split('_')[1] + '_To')[0].value = "";
                    }
                    if (filterCategoryData.newUserSavedFilter && filterCategoryData.newUserSavedFilter.length > 0) {
                        filterCategoryData.newUserSavedFilter = [];
                    }
                    filterCategoryData.newUserSavedFilter.push($jq(this).val());
                    onSelectingFilter(selectedOptionId, selectedValues, targetId);
                });
                updateScroll('filterContent' + this.dataFilterid);
            },
            createSelectedFilters: function (filterValues, defaultFilters, dropDownId, selectedFilterDiv) {
                var defaultValues = new Array();
                var defaultFltr;
                var defaultFltrId;
                if (dropDownId.contains('staticDropDown')) {
                    if (!defaultFilters[0].contains('|')) {
                        if (filterValues.MainCategory.type == 'Date') {
                            for (var j = 0; j < filterValues.SubCategory.length; j++)
                                if (filterValues.SubCategory[j].value == defaultFilters) {
                                    defaultFilters = filterValues.SubCategory[j].key;
                                }
                        }
                        if ($jq("[id='staticOptions_" + dropDownId.split('_')[1] + defaultFilters + "']").length > 0) {
                            defaultFltr = new Array();
                            $jq("[id='staticOptions_" + dropDownId.split('_')[1] + defaultFilters + "']").prop('checked', true);
                            defaultFltr.push($jq("[id='staticOptions_" + dropDownId.split('_')[1] + defaultFilters + "']")[0].parentElement.innerText.trim(0, ""));
                            defaultValues.push(defaultFltr);
                            defaultFltrId = new Array();
                            defaultFltrId.push($jq('#staticOptions_' + dropDownId.split('_')[1] + defaultFilters).val());
                            if (filterValues.newUserSavedFilter.length == 0) {
                                filterValues.newUserSavedFilter = new Array();
                                filterValues.newUserSavedFilter.push($jq('#staticOptions_' + dropDownId.split('_')[1] + defaultFilters).val());
                            }
                            this.filterData.filter(function (obj) {
                                if (filterValues.MainCategory.value == obj.MainCategory.value) {
                                    obj.newUserSavedFilter = filterValues.newUserSavedFilter;
                                }
                            });
                            onSelectingFilter(defaultFltrId, defaultValues, selectedFilterDiv);
                        }
                    }
                }
                else {
                    for (var i = 0; i < defaultFilters.length; i++) {
                        defaultFilters[i] = defaultFilters[i] == "" ? "NA" : defaultFilters[i];
                        $jq('select#' + dropDownId)[0].sumo.selectItem(defaultFilters[i]);
                    }
                    defaultFltr = $jq('#' + dropDownId).val();
                    if (defaultFltr) {
                        for (var j = 0; j < defaultFltr.length; j++) {
                            if ($jq("[id='" + dropDownId + defaultFltr[j] + "']").length > 0)
                                defaultValues.push($jq("[id='" + dropDownId + defaultFltr[j] + "']").text());
                        }
                        onSelectingFilter(defaultFltr, defaultValues, selectedFilterDiv);
                        filterValues.newUserSavedFilter = [];
                        for (var j = 0; j < defaultFltr.length; j++) {
                            defaultFltr[j] == "NA" ? defaultFltr[j] = "" : defaultFltr[j];
                            filterValues.newUserSavedFilter.push(defaultFltr[j]);
                        }
                    }
                }
            },
            addFilter: function (filterValue, filterCount, isAddMoreClicked) {
                filterValue.newUserSavedFilter = new Array();
                this.createFilterLI(filterValue, isAddMoreClicked);
                var filterShown = filterValue.MainCategory.key;
                this.globalFilterList.push(filterShown);

                var mainDropDown;
                if (filterValue && filterValue.IsStatic) {
                    mainDropDown = 'staticDropDownIcon_' + this.listId;
                }
                else {
                    mainDropDown = 'dropDown_' + this.listId;
                }
                if (filterCount > 0 && filterValue && filterValue.UserSavedFilter && filterValue.UserSavedFilter.length > 0) {
                    this.createSelectedFilters(filterValue, filterValue.UserSavedFilter, mainDropDown, 'selectedFilterDiv_' + this.listId);
                }
                else if (filterCount > 0 && filterValue && filterValue.DefaultFilter && filterValue.DefaultFilter.length > 0)
                    this.createSelectedFilters(filterValue, filterValue.DefaultFilter, mainDropDown, 'selectedFilterDiv_' + this.listId);

                if (filterValue && !filterValue.IsStatic) {
                    this.initializeSumoChangeEvent(filterValue, 'dropDown_' + this.listId, 'selectedFilterDiv_' + this.listId, this.dataFilterid);
                }

                var dateRangeId = this.dateRangeIds;
                if (filterValue.MainCategory.type == 'Date') {
                    filterValue.SubCategory.filter(function (obj) {
                        if (obj.key == "Date Range" && dateRangeId && dateRangeId.length > 0) {
                            for (var i = 0; i < dateRangeId.length; i++)
                                initializeDateTimeCalendarV2ById(dateRangeId[i], dateRangeId[i], '%d %b %Y', false, null, false, false, false, showDateRange, null);
                        }
                        window.addEventListener('touchstart', function (event) {
                            HideRangeCalendarForDevice(event);
                        },false);
                    });
                }
            },
            addMore: function (e) {
                for (var i = 0; i < this.filterData.length; i++) {
                    if (this.globalFilterList.indexOf(this.filterData[i].MainCategory.key) == -1) {
                        this.addFilter(this.filterData[i], 0, true);
                    }
                }
                if ($jq('.filterCategoryLI').length == this.filterData.length)
                    document.getElementById('addFilterDiv' + this.dataFilterid).style.display = 'none';
                updateScroll('filterContent' + this.dataFilterid);
            },
            showStaticDropDown: function (event) {
                document.body.addEventListener('click', hideStaticFilterDropDown, false);
            },
            createStaticFilters: function (filterValues, isAddMoreClicked) {
                var staticList = document.createElement('li');
                this.listId++;
                staticList.id = 'filterCategory_' + this.listId;
                staticList.className = 'filterCategoryLI style-scope pft-filter';

                var mainCategoryDiv = document.createElement('div');
                mainCategoryDiv.id = 'mainCategoryDiv_' + this.listId;
                mainCategoryDiv.className = 'staticFilterDiv';

                var staticMainSpan = document.createElement('span');
                staticMainSpan.id = 'staticDropDownIcon_' + this.listId;
                staticMainSpan.className = 'staticFilterDropDown';

                var staticText = document.createElement('span');
                staticText.id = 'mainCategory_' + filterValues.MainCategory.key;
                staticText.innerText = filterValues.MainCategory.value;
                staticText.className = 'staticMainCategory';
                staticText.title = '';
                staticMainSpan.appendChild(staticText);

                var staticDropDownIcon = document.createElement('span');
                staticDropDownIcon.className = 'linked staticDropDownIcon';
                staticDropDownIcon.innerHTML = '';
                staticMainSpan.appendChild(staticDropDownIcon);

                mainCategoryDiv.appendChild(staticMainSpan);

                /*Creating static remove icon*/
                var staticCrossIcon = document.createElement('span');
                staticCrossIcon.id = 'removeCategory--' + filterValues.MainCategory.key;
                staticCrossIcon.className = 'linked clear-cross filterRemove';
                staticCrossIcon.title = 'Remove Filter';
                staticCrossIcon.innerHTML = '';

                staticList.appendChild(mainCategoryDiv);
                staticList.appendChild(staticCrossIcon);

                var subCategoryUL = document.createElement('ul');
                subCategoryUL.id = 'staticOptions_' + this.listId;
                subCategoryUL.className = 'staticOptionsPanel container';
                subCategoryUL.style = "display:none";

                var staticOptionsLength = 0;
                var dateRangeOptions = new Array();
                if (filterValues.SubCategory[0].key == 'DateRange') {

                    if (filterValues.MainCategory.key == 'S_DUE_DATE' || filterValues.MainCategory.key == 'DueDate')
                        dateRangeOptions = [{ value: 'Today', key: 'TODAY' }, { value: 'Tomorrow', key: 'TOMORROW' }, { value: 'This Week', key: 'THIS_WEEK' }, { value: 'This Month', key: 'THIS_MONTH' }, { key: 'Date Range', value: [filterValues.SubCategory[0].value, filterValues.SubCategory[1].value] }];
                    else 
                        dateRangeOptions = [{ value: 'Today', key: 'TODAY' },{ value: 'This Week', key: 'THIS_WEEK' }, { value: 'This Month', key: 'THIS_MONTH' }, { key: 'Date Range', value: [filterValues.SubCategory[0].value, filterValues.SubCategory[1].value] }];
                    filterValues.SubCategory = dateRangeOptions;
                }
                for (var i = 0; i < filterValues.SubCategory.length; i++) {
                    if (filterValues.SubCategory[i].key != 'Date Range') {
                        var staticOptions = document.createElement('li');
                        staticOptions.id = filterValues.SubCategory[i].key;
                        staticOptions.title = filterValues.SubCategory[i].value;
                        staticOptions.className = 'staticOptions';

                        var staticLabel = document.createElement("label");
                        staticLabel.setAttribute('for', subCategoryUL.id + filterValues.SubCategory[i].key);
                        staticLabel.className = 'FilterListLabel FilterRadio';
                        var staticInput = document.createElement("input");
                        staticInput.setAttribute('type', "radio");
                        staticInput.id = subCategoryUL.id + filterValues.SubCategory[i].key;
                        staticInput.setAttribute('name', filterValues.MainCategory.value);
                        staticInput.setAttribute('value', filterValues.SubCategory[i].key);
                        staticLabel.innerHTML += "<span> " + filterValues.SubCategory[i].value + "</span>";

                        staticOptions.appendChild(staticInput);
                        staticOptions.appendChild(staticLabel);
                        subCategoryUL.appendChild(staticOptions);
                    }
                    else {
                        var dateRangeOption = document.createElement('li');
                        dateRangeOption.id = filterValues.SubCategory[i].key;

                        var dateRangeDisplay = document.createElement('div');
                        dateRangeDisplay.id = 'dateRangeDisplay_' + this.listId;
                        dateRangeDisplay.title = 'Click here to select date range';
                        dateRangeDisplay.className = 'linked';

                        var dateRangeIcon = document.createElement('span');
                        dateRangeIcon.id = 'dateRangeIcon_' + filterValues.MainCategory.value;
                        dateRangeIcon.className = 'clear-calender filterCalendar';
                        dateRangeDisplay.appendChild(dateRangeIcon);

                        var dateRangeSub = document.createElement("span");
                        dateRangeSub.innerHTML = filterValues.SubCategory[i].key;
                        dateRangeSub.className = 'calendarLabel';
                        dateRangeDisplay.appendChild(dateRangeSub);

                        dateRangeOption.appendChild(dateRangeDisplay);

                        var dateRangePopUp = document.createElement('div');
                        dateRangePopUp.id = 'dateRangePopUp_' + this.listId;
                        dateRangePopUp.className = 'dateRangePopUp';
                        dateRangePopUp.style = "display:none";

                        for (var j = 0; j < filterValues.SubCategory[i].value.length; j++) {
                            var dateRangeValue = document.createElement('span');
                            dateRangeValue.className = 'dateRangeValue';
                            dateRangeValue.id = subCategoryUL.id + filterValues.SubCategory[i].value[j];
                           
                            var dateRangeLabel = document.createElement("span");
                            var dateRangeInput = document.createElement("input");
                            dateRangeInput.setAttribute('type', "text");                            
                            dateRangeInput.setAttribute('class', dateRangeInput);
                            dateRangeInput.id = 'dateRangeInput' + this.listId + '_' + filterValues.SubCategory[i].value[j];

                            if (filterValues.UserSavedFilter && filterValues.UserSavedFilter[0].contains('|') && !isAddMoreClicked) {
                                if (filterValues.SubCategory[i].value[j] == "From") {
                                    var dateValues = filterValues.UserSavedFilter[0].split('|')[0].split('/');
                                    dateRangeInput.setAttribute('value', Date_Format(new Date(dateValues[2], dateValues[1] - 1, dateValues[0]), "dd mmm yyyy"));
                                }
                                else {
                                    var dateValues = filterValues.UserSavedFilter[0].split('|')[1].split('/');
                                    dateRangeInput.setAttribute('value', Date_Format(new Date(dateValues[2], dateValues[1] - 1, dateValues[0]), "dd mmm yyyy"));
                                }
                            }
                            this.dateRangeIds.push(dateRangeInput.id);
                            dateRangeInput.className = 'dateRangeInput';
                            dateRangeInput.setAttribute('__datatype__', 'date');
                            dateRangeInput.setAttribute('key', filterValues.MainCategory.value);
                            dateRangeLabel.innerHTML = filterValues.SubCategory[i].value[j] + ' :';

                            dateRangeValue.appendChild(dateRangeLabel);
                            dateRangeValue.appendChild(dateRangeInput);
                            dateRangePopUp.appendChild(dateRangeValue);

                            dateRangeOption.appendChild(dateRangePopUp);
                        }
                        subCategoryUL.appendChild(dateRangeOption);
                        this.listen(dateRangeDisplay, 'tap', 'showDateRangePopUp');
                    }
                }
                mainCategoryDiv.appendChild(subCategoryUL);
                staticList.appendChild(mainCategoryDiv);
                this.listen(staticMainSpan, 'tap', 'showStaticDropDown');
                this.listen(staticCrossIcon, 'tap', 'removeFilterCategory');

                return staticList;
            },
            removeFilterCategory: function (e) {
                var filterListId = e.currentTarget.closest("li").id;
                var targetId = e.currentTarget.id;
                this.globalFilterList.splice(this.globalFilterList.indexOf(targetId.split('--')[1]), 1);
                this.filterData.filter(function (obj) {
                    if (targetId.split('--')[1] == obj.MainCategory.key) {
                        obj.newUserSavedFilter = [];
                    }
                });
                $(filterListId).remove(filterListId);
                if ($jq('.filterCategoryLI').length != this.filterData.length)
                    document.getElementById('addFilterDiv' + this.dataFilterid).style.display = 'block';
                this.dateRangeIds = [];
                updateScroll('filterContent' + this.dataFilterid);
            },
            resetFilters: function () {
                this.taskFilterPopUp();
                updateScroll('filterContent' + this.dataFilterid);
            },
            applyFilters: function () {  
               
                this.userFilters = 0;
                $jq('.filterLink').addClass('clearFilterActive');
                var filterItems = this.filterData;
                var filterObj = [];
                for (var i = 0; i < filterItems.length; i++) {
                    if (filterItems[i].newUserSavedFilter != null && filterItems[i].newUserSavedFilter.length > 0) {
                        if (filterItems[i].MainCategory.type == 'Date') {
                            filterObj.push({
                                filterName: filterItems[i].MainCategory.key,
                                filterValue: filterItems[i].newUserSavedFilter,
                                filterType: "Date"
                            });
                            this.userFilters++;
                            filterItems[i].UserSavedFilter = filterItems[i].newUserSavedFilter;
                        }
                        else {
                            filterObj.push({
                                filterName: filterItems[i].MainCategory.key,
                                filterValue: filterItems[i].newUserSavedFilter,
                            });
                            this.userFilters++;
                            filterItems[i].UserSavedFilter = filterItems[i].newUserSavedFilter;
                        }
                    }
                    else {
                        filterItems[i].UserSavedFilter = null;
                    }
                }
                this.filterAttribute = filterObj;
                this.isOnGoingRequest = true;
                this.async(function () {
                    var DynamicFilterId = document.getElementById('apply' + this.dataFilterid);
                    if (DynamicFilterId.id == "applysmartAltFilter") {
                        var workorderId = $jq("[name='smartAlerts']").attr('id');
                        var corid = workorderId.lastIndexOf("_");
                        var correlationId = workorderId.substring(corid + 1, workorderId.length);
                        var ele = document.createElement("div");
                        if (ele) {
                            ele.setAttribute("id", "dataLoad");
                            ele.setAttribute("class", "chartsLoad");
                            document.getElementById('smartalerts').appendChild(ele);
                        }
                        LoadAllSmartAlerts(null, null, correlationId, MasterVar.tenant_id);
                    }
                    else {
                        this.domHost.loadData();
                        SaveUserPreferenceFilters();
                    }
                });
                var filterPnl = document.getElementById('FilterPanel' + this.dataFilterid);
                filterPnl.style.display = "none";
                document.body.removeEventListener('click', hideFilterMenu, false);
                document.body.removeEventListener('click', hideStaticFilterDropDown, false);
            },
            showDateRangePopUp: function (event) {
                var staticDropIconId = event.currentTarget.id;
                var staticOptionsId = 'dateRangePopUp_' + staticDropIconId.split('_')[1];
                $(staticOptionsId).style.display = $(staticOptionsId).style.display == 'none' ? '' : 'none';
                updateScroll('filterContent' + this.dataFilterid);
                $jq('#dateRangeInput' + staticDropIconId.split('_')[1] + '_From').focus();
                $jq('#dateRangeInput' + staticDropIconId.split('_')[1] + '_From').blur();
                loadScroll('staticOptions_' + staticDropIconId.split('_')[1]);
            },
            setFilterAttribute: function (filterData) {
                if (filterData.MainCategory.type == "Date") {
                    this.defaultFilterData.push({
                        filterName: filterData.MainCategory.key,
                        filterValue: this.defaultFilters > 0 ? filterData.DefaultFilter : filterData.UserSavedFilter,
                        filterType: "Date"
                    });
                } else {
                    this.defaultFilterData.push({
                        filterName: filterData.MainCategory.key,
                        filterValue: this.defaultFilters > 0 ? filterData.DefaultFilter : filterData.UserSavedFilter
                    });
                }
            },
            closeFilterPanel: function () {
                $jq('#FilterControl'+this.dataFilterid+' .filterPanelDiv').css("display", "none");
            }
        });
    </script>
</dom-module><dom-module id="pft-searchbox" assetpath="Components/">

    <template>
        <div class="posRel FR">
            <div id="SearchCntrlWrap" class="searchCntrlWrap srchCollapse">
                <input type="text" id="Search" autocomplete="off" title="Search" placeholder="Search..." class="srchControl" on-keypress="loadSearchData">
                <div class="srchReset clear-cross" title="clear search" style="display: none;" id="resetDashBoardSearch" on-tap="resetDashBoardSearch"></div>
                <div class="searchCancel-button" on-tap="hideSearchExpandView"> Cancel </div>
            </div>
            <div class="clear-search marR10 WCsrchIcon" id="WCsrchIcon" title="Click here to search" on-tap="WCSearchShow"></div>
        </div>
    </template>
    <script>
        Polymer({
            is: "pft-searchbox",
            attached: function () {
                document.body.removeEventListener('click', WCSearchHide, false);
            },
            loadSearchData: function (e) {
                var textInput = this.$.Search.value;
                this.$.resetDashBoardSearch.style.display = '';
                var charCode;
                if (e.which)
                    charCode = e.which;
                if (e.keyCode)
                    charCode = e.keyCode;
                if (charCode == 13) {
                    var newEntryElement = document.getElementById("newEntry");
                    if (newEntryElement && newEntryElement.isViewed) {
                        LoadNewEntries(false);
                    }
                    else {
                        this.domHost.loadData();
                        if ($jq(window).width() < 480 && isMobile.any()) {
                            hideMobOverlay();
                            $jq('#Search').blur();
                        }
                    }
                    return false;
                }
                return true;
            },
            resetDashBoardSearch: function () {
                if (this.$.Search.value != null) {
                    this.$.Search.value = '';
                    this.$.resetDashBoardSearch.style.display = 'none';
                }
                var newEntryElement = document.getElementById("newEntry");
                if (newEntryElement && newEntryElement.isViewed) {
                    LoadNewEntries(false);
                }
                else
                    this.domHost.loadData();
            },
            manageInboxSearchText: function (hasFocus) {
                if (hasFocus) {
                    if ($F(id).trim() == "Search...")
                        $(id).value = '';
                }
                else {
                    if ($F(id).trim() == "")
                        $(id).value = 'Search...';
                }
            },

            WCSearchShow: function (e) {
                var x = document.getElementById('SearchCntrlWrap');
                x.classList.toggle("srchExpand");
                document.getElementById('Search').focus();
                e.preventDefault();
                var x = document.getElementById('WCsrchIcon');
                // x.classList.toggle("WCsrchIcon1");
                document.body.addEventListener('click', WCSearchHide, false);
                if ($jq(window).width() < 480 && isMobile.any()) {

                    $jq('.srchExpand').find('.srchControl').addClass('searchFieldFocus');
                    $jq('.srchExpand').find(".searchCancel-button").addClass('active');
                    $jq('body').find('.searchMobOverlay').remove();
                    $jq('.processV2Scroll.container, .processV3Scroll.container, .taskV2Scroll.container').before("<div id='mobOverlay'></div>");
                    $jq('body').find('#mobOverlay').addClass('searchMobOverlay');
                    $jq('.processV2Scroll.container, .processV3Scroll.container, .taskV2Scroll.container').css('overflow-y', 'hidden');
                    $jq('body').find('.cntrlWrapper').addClass('setPositionTop');
                    $jq('.setPositionTop').find('#WCsrchIcon').css('display','none');
                }

            },
            hideSearchExpandView: function () {
                hideMobOverlay();
            }
        });
    </script>

</dom-module><dom-module id="PFT-ActionComponentHz" assetpath="Components/">
    <template>
        <template is="dom-if" if="{{checkForCustomDataType(data,cssclassName,'data')}}">
            <template is="dom-repeat" items="{{GetDataObj(cssclassName,rowInfo)}}" as="value" index-as="o_index">
                <template is="dom-if" if="{{ActionCount(o_index,data,functionName,functionParams,cssclassName,rowInfo)}}">
                    <div class="actionDivWrap">
                        <div class="actionDiv">
                            <pft-text value="{{CheckforLabel(data,o_index)}}" title="{{TextToolTips(textTooltip,o_index)}}" parent-cmpid="{{SetParentCompId(o_index)}}" action="[[BindClickFunction(actionValue,o_index)]]" cssclass-name="{{value}}" function-name="{{findFunctionName(functionName,o_index)}}" function-params="{{findFunctionParams(functionName,functionParams,o_index)}}" row-value="{{rowData}}" actionfor$="{{CheckforActionFor(actionfor,o_index)}}"></pft-text>
                        </div>
                    </div>
                    <template is="dom-if" if="{{AddPipe(data,o_index)}}">
                        <div id="DivBar_[[o_index]]" class="HorizontalPipeAction">{{textseparator}}</div>
                    </template>
                </template>
            </template>
            <template is="dom-if" if="{{moreActionButtonAdd(count)}}">
                <div class="moreMnu FL linked" on-mouseover="BindDropdown" on-tap="BindDropdown">
                    MORE
                    <div id="{{RowUniqeId(rowInfo)}}"></div>
                </div>
            </template>
        </template>
        <template is="dom-if" if="{{checkForCustomDataType(data,cssclassName,'css')}}">
            <template is="dom-repeat" items="{{GetDataObj(data,rowInfo)}}" as="value" index-as="o_index">
                <div class="actionDivWrap">
                    <div class="actionDiv FL">
                        <pft-icon cssclass-name="{{value}}" title="{{TextToolTips(textTooltip,o_index)}}" parent-cmpid="{{SetParentCompId(o_index)}}" action="[[BindClickFunction(actionValue,o_index)]]" function-name="{{findFunctionName(functionName,o_index)}}" function-params="{{findFunctionParams(functionName,functionParams,o_index)}}" row-value="{{rowData}}" actionfor$="{{CheckforActionFor(actionfor,o_index)}}"></pft-icon>
                    </div>
                </div>
            </template>
        </template>
        <div class="clr"></div>

    </template>
    <script>
        Polymer({

            is: 'PFT-ActionComponentHz',

            properties: {
                actionValue: {
                    type: String,
                    value: ""
                },
                actionfor: {
                    type: String,
                    value: ""
                },
                functionName: {
                    type: String,
                    value:""
                },
                functionParams: {
                    type: Object,
                    value: function () {
                        return {}
                    }
                },
                data: {
                    type: String,
                    value: ""
                },
                dataObj: {
                    type: Object
                },
                dashboardType: {
                    type: String,
                    value: ""
                },
                actionObj: {
                    type: Object
                },
                tempMethod: {
                    type: String
                },
                cssclassName: {
                    type: String
                },
                csstooltip: {
                    type: String
                },
                divbarCount: {
                    type: Number,
                    value: 0
                },
                count: {
                    type: Number,
                },
                moreActions: {
                    type: Number,
                    value: 3
                },
                actualActions: {
                    type: Number,
                    value:0
                },
                textseparator: {
                    type: String
                },
                textTooltip: {
                    type: String
                },
                rowData: {
                    type: Array,
                    value: [],
                    observer: 'getActionType'
                },
                rowInfo: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                actionData: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                parentCmpid: {
                    type: String
                }
            },
            GetDataObj: function (data,rowInfo) {
               
                if ((this.dataHost._rootDataHost.requestParams && this.dataHost._rootDataHost.requestParams.action === "WorkOrder") ||
                     (!this.dataHost._rootDataHost.requestParams && this.dataHost._rootDataHost.dashboardType && this.dataHost._rootDataHost.dashboardType.toUpperCase() == "CHEVRON"))
                {
                    if (rowInfo && ((rowInfo.constructor === Array && rowInfo.length != 0) || (rowInfo.constructor != Array && typeof(rowInfo) == "object"))) {
                        var Actions;
                        if (rowInfo.StdAttributes.S_STATUS === "New" && $jq(this.dataHost._nodes).children().find('.actionMob').find('.pft-essenceupload.hideMe').length > 0)
                            Actions = $jq(this.dataHost._nodes).children().find('.actionMob').length ;
                        else if (rowInfo.StdAttributes.S_STATUS === "New" && $jq(this.dataHost._nodes).children().find('.actionMob').find('.pft-essenceupload.hideMe').length == 0)
                            Actions = $jq(this.dataHost._nodes).children().find('.actionMob').length + 1;
                        else if (rowInfo.StdAttributes.S_STATUS === "In Progress" && $jq(this.dataHost._nodes).children().find('.actionMob').find('.pft-essenceupload.hideMe').length > 0)
                            Actions = $jq(this.dataHost._nodes).children().find('.actionMob').length - 1;
                            // else if (this.dataHost.rowdata.StdAttributes.S_STATUS === "In Progress" && $jq(this.dataHost._nodes).children().find('.actionMob').find('.pft-essenceupload.hideMe').length == 0)
                        else
                            Actions = $jq(this.dataHost._nodes).children().find('.actionMob').length;
                        this.actualActions = 3 - Actions;
                    }
                }
               
                this.dataObj = data.split(';');
                return this.dataObj;
            },
            CheckForCustomData: function (customData) {
                if (customData == undefined) {
                    return false;
                }
                if (customData.length > 0)
                    return true;
                else
                    return false;

            },
            BindClickFunction: function (clickFunc, index) {
                this.tempMethod = '';
                if (clickFunc && clickFunc != "") {
                    var actionObj = clickFunc.split(';');
                    for (var i = 0; i < actionObj.length; i++) {
                        if (actionObj[i].split(':')[0] == 'PFTCell' + index) {
                            this.tempMethod = actionObj[i].substring(actionObj[i].indexOf(":") + 1);
                            break;
                        }
                        else {
                            this.tempMethod = actionObj[index];
                            break;
                        }
                    }
                }
                return this.tempMethod;
            },
            BindDropdown: function (e) {            
                var displayProperty = $jq('#main_dropDownDiv').css('display');
                if(displayProperty === undefined || displayProperty === 'none'){
                    if ($jq('#main_dropDownDiv'))
                        $jq('#main_dropDownDiv').remove();
                        var dropDownElement = document.createElement("PFT-DropDown");
                        dropDownElement.dropdownData = this.actionData;
                        dropDownElement.id = "dropDownAcions";
                        document.getElementById('Action_' + this.dataHost.rowdata.StdAttributes.S_WO_ID).appendChild(dropDownElement);
                        calculateWfCallHeight(event, dropDownElement,dropDownElement.dropdownData.length);
                    }
                    document.body.addEventListener('click', HideDropDownAction, false);
                    var containerId = document.getElementsByAttribute('dashboardDataContainer')[0].id;
                    var div = document.getElementById(containerId);
                    if (div) {
                        var container = div;
                        container.addEventListener('scroll', HideDropDownAction, false);
                    }
                
            },           
            findFunctionName: function (functionName, index) {
                if (!functionName)
                    return "";
                var actionObj = functionName.split(';');
                for (var i = 0; i < actionObj.length; i++) {
                    if (i == index) {
                        return actionObj[i];
                    }
                }
            },
            findFunctionParams: function (functionName, functionParams, index) {
                if (!functionName && !functionParams.length)
                    return "";
                var actionObj = functionName.split(';');
                var actionParams = functionParams.split(';');
                for (var i = 0; i < actionObj.length; i++) {
                    if (i == index) {
                        return actionParams[i];
                    }
                }
            },
            CheckforLabel: function (value, index) {
                if (value != undefined && value != "") {
                    var classNameArray = value.split(';');
                    return classNameArray[index];
                }
                else
                    return "";
            },
            GetClassName: function (index) {
                if (this.cssclassName != undefined && this.cssclassName != "") {
                    var classNameArray = this.cssclassName.split(';');
                    return classNameArray[index];
                }
                else
                    return "";
            },
            GetToolTip: function (index) {
                if (this.csstooltip != undefined && this.csstooltip != "") {
                    var classToolTipArray = this.csstooltip.split(';');
                    return classToolTipArray[index];
                }
                else
                    return "";
            },
            AddPipe: function (value, index) {
                if (this.divbarCount < value.split(';').length - 1) {
                    this.divbarCount = this.divbarCount + 1;
                    return true;
                }
                else {
                    this.divbarCount = 0;
                    return false;
                }
            },
            checkForCustomDataType: function (data, cssData, type) {
                if (type == 'data') {
                    return this.CheckForCustomData(data);
                }
                else if (type == 'css' && !this.checkForCustomDataType(data, cssData, 'data')) {
                    return this.CheckForCustomData(cssData);
                }
                return false;
            },
            ActionCount: function (o_index, data, functionName, functionParams, cssclassName, rowInfo) {
                this.GetDataObj(cssclassName, rowInfo);
                if((!functionName && !functionParams.length)||(!rowInfo || (rowInfo.constructor === Array && rowInfo.length == 0))) {
                    return true;
                }
                if (o_index == 0) {
                    this.actionData = [];
                }
                var actionNameArray = data.split(';');
                var functionNameArray = functionName.split(';');
                var functionParamsArray = functionParams.split(';');
                var cssclassNameArray = cssclassName.split(';');
                if (o_index <= this.actualActions) {
                    this.count = 0;
                    return true;
                }
                else {
                    this.count = 3;
                    var dataObj = { "DisplayName": actionNameArray[o_index], "Function": functionNameArray[o_index] ? functionNameArray[o_index] : "", "Params": (functionNameArray[o_index]&&functionParamsArray[o_index])? JSON.parse(functionParamsArray[o_index].replace(/'/g, '"')).Params : "", "DropDownClassName": cssclassNameArray[o_index], };
                    this.actionData.push(dataObj);
                    return false;
                }

            },
            moreActionButtonAdd: function (count) {
                return this.count == 3 && ($jq('#dashboardType') && ($jq('#dashboardType').val().toUpperCase() == "CHEVRON" || $jq('#dashboardType').val()=="v2")) ? true : false;
            },
            RowUniqeId: function (rowInfo) {
                return 'Action_' + rowInfo.StdAttributes.S_WO_ID;
            },
            TextToolTips: function (data, index) {

                var val = this.textTooltip.split(';');
                return val[index];

            },
            computeRowData: function (actionValue) {
                return this.dataHost._config.MyList;
            },
            SetParentCompId: function (index) {
                return "idActnCmptHzCx1_" + index;
            },
            CheckforActionFor: function (value, index) {
                if (!value && value != "") {
                    var actionforArray = value.split(';');
                    return actionforArray[index];
                }
                else
                    return "";
            },
            getActionType: function (rowData) {
                if (rowData && rowData.StdAttributes) {
                    if (this.actionValue) {
                        var actionsAvial = this.actionValue.split(';');
                        var actionFor = this.actionfor;
                        var divId = rowData.StdAttributes.TaskId ? rowData.StdAttributes.TaskId : rowData.StdAttributes.S_WO_ID;
                        if (this.parentNode.querySelector(".actionReset")) {
                            var parentDiv = this.parentNode;
                            $jq(parentDiv).find('.actionReset').remove();
                        }
                        actionsAvial.forEach(function (item) {
                            CreateAction(item, rowData, actionFor);
                        });
                    }
                }
            }
        });
    </script>
</dom-module>
<dom-module id="PFT-TextComponentHz" assetpath="Components/">
    <template>
        <div class="actionDivHZWrapper">
            <template is="dom-repeat" items="[[GetDataObj(data)]]" as="value" index-as="o_index">
                <template is="dom-if" if="{{checkIfValueExists(value)}}">
                    <div class="actionDivHZ" id$="actionDivHZ_{{o_index}}">
                        <pft-text value="{{CheckforLabel(value,o_index,labels)}}" parent-cmpid="{{SetParentCompId(uid,o_index)}}" action="[[BindClickFunction(actionValue,o_index)]]" wo-type="{{woType}}"></pft-text>
                    </div>
                    <template is="dom-if" if="{{AddPipe(data,o_index)}}">
                        <div id="DivBar_[[o_index]]" class="HorizontalPipe">{{textseparator}}</div>
                    </template>
                </template>
            </template>
        </div>
    </template>
    <script>
        Polymer({

            is: 'PFT-TextComponentHz',

            properties: {

                data: {
                    type: String
                },
                dataObj: {
                    type: Object
                },
                actionValue: {
                    type: String
                },
                actionObj: {
                    type: Object
                },
                tempMethod: {
                    type: String
                },
                labels: {
                    type: String
                },
                divbarCount: {
                    type: String
                },
                textseparator: {
                    type: String
                },
                parentCmpid: {
                    type: String
                }
            },
            GetDataObj: function (data) {
                if (data != null)
                    this.dataObj = data.split(';');
                else
                    this.dataObj = "";
                this.divbarCount = 0;
                return this.dataObj;
            },
            BindClickFunction: function (clickFunc, index) {
                this.tempMethod = '';
                var actionObj = clickFunc.split(';');
                for (var i = 0; i < actionObj.length; i++) {
                    if (actionObj[i].split(':')[0] == 'PFTCell' + index) {
                        this.tempMethod = actionObj[i].split(':')[1];
                        break;
                    }
                }
                return this.tempMethod;
            },
            CheckforLabel: function (value, index, labels) {
                if (labels) {
                    var label = labels.split(';');
                    if (labels.includes('PFTCell')) {
                        for (var i = 0; i < label.length; i++) {
                            if (label[i].split(':')[0] == 'PFTCell' + index) {
                                return label[i].split(':')[1] + ' : ' + value;
                            }
                        }
                    }
                    else if (label[index] != "") return label[index] + ' : ' + value;
                }
                return value;
            },
            AddPipe: function (value, index) {
                if (!value ||(index == value.split(';').length - 1))
                    return false;
                else
                    return true;
            },
            SetParentCompId: function (uid, index) {
                return uid + "_" + index;
            },
            checkIfValueExists: function (value) {
                return value ? true : false;
            }
        });
    </script>

</dom-module>
<dom-module id="PFT-CreateAction" assetpath="Components/">
    <template>        
            <template is="dom-if" if="{{!isActionTextRequired(actionConfig)}}">
                <div id="createAction" class="" title$="{{actionConfig.ActionTooltip}}" createactionconfig="{{SetClickAttribute(actionConfig.ActionOnClickFunction,actionConfig.ActionDefaultParams)}}" actionname$="{{actionConfig.ActionName}}">
                    <span class="clear-add createIcon iconSpacer linked no-js marL10 FL"></span>
                </div>
            </template>
            <template is="dom-if" if="{{isActionTextRequired(actionConfig)}}">
                <div id="createAction" class="actionWrap" title$="{{actionConfig.ActionTooltip}}" createactionconfig="{{SetClickAttribute(actionConfig.ActionOnClickFunction,actionConfig.ActionDefaultParams)}}" actionname$="{{actionConfig.ActionName}}">
                    <span class="actionIcon clear-add createObjectIcon"></span>
                    <span class="actionLabel">{{actionConfig.ActionDisplayText}}</span>
                </div>
            </template>        
    </template>
    <script>
        Polymer({

            is: 'PFT-CreateAction',

            properties: {                
                actionConfig: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                }
            },
            SetClickAttribute: function (actionName, actionParams) {
                var attr = '';
                var params = '';
                var paramsObj = '';
                var functionToCall = '';
                if (actionName != undefined && actionName != null) {
                    attr = document.createAttribute('OnClick');
                    if (actionParams != null && actionParams != undefined) {
                        paramsObj = actionParams.split(',');
                        params = paramsObj.join("','");
                        params = params + "','" + this.id;
                        functionToCall = actionName + "('" + params + "');";
                    }
                    else
                        functionToCall = actionName;
                    attr.value = functionToCall;
                }                
                if (document.getElementById('createaction') != undefined)
                    document.getElementById('createaction').setAttributeNode(attr);
            },
            isActionTextRequired: function (actionConfig) {                
                return IsToolbarActionTextRequired(actionConfig);
            }
        });
    </script>

</dom-module>
<dom-module id="PFT-EditAction" assetpath="Components/">
    <template>
        <template is="dom-if" if="{{!isActionTextRequired(actionConfig)}}">
            <div id="editAction" class="" title$="{{actionConfig.ActionTooltip}}" on-tap="Invokefunction" actionname$="{{actionConfig.ActionName}}">
                <span class="clear-anotation taskEditor marL10 FL" id="tskEditIcon"></span>
            </div>
        </template>

        <template is="dom-if" if="{{isActionTextRequired(actionConfig)}}">
            <div id="editAction" class="actionWrap" title$="{{actionConfig.ActionTooltip}}" on-tap="Invokefunction" actionname$="{{actionConfig.ActionName}}">
                <span class="actionIcon clear-anotation" id="tskEditIcon"></span>
                <span class="actionLabel">{{actionConfig.ActionDisplayText}}</span>
            </div>
        </template>

    </template>
    <script>
        Polymer({

            is: 'PFT-EditAction',

            properties: {
                actionConfig: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                }
            },
            Invokefunction: function () {
                if (IsActionDisabled(this.id))
                    return false;
                else {
                    if (this.actionConfig && this.actionConfig.DashboardActionType) {
                        if (this.actionConfig.DashboardContext.toString().toUpperCase() == "CLIENT" || this.actionConfig.DashboardContext.toString().toUpperCase() == "GROUP")
                        {
                            HandleDistributionClick(this.actionConfig.DashboardContext, this.actionConfig.ActionName);
                        }
                        else if (this.actionConfig.DashboardActionType.toString().toUpperCase() == 'WORKORDERDASHBOARD') {
                            InvokeEditActionForWorkorder(this.actionConfig.ActionOnClickFunction);
                        }
                        else if (this.actionConfig.DashboardActionType.toString().toUpperCase() == 'GETDATAFORTASKBOARD' || this.actionConfig.DashboardActionType.toString().toUpperCase() == 'GETDATAFORMYTASKS') {
                            InvokeEditActionForTask();
                        }
                    }
                }
            },
            isActionTextRequired: function (actionConfig) {
                return IsToolbarActionTextRequired(actionConfig);
            }
        });
    </script>

</dom-module>
<dom-module id="pft-browse" assetpath="Components/">
    <template>
        <div class="searchWrap marR10">
            <input type="text" id="Search" title="Search" placeholder="Search..." class="searchInput" on-keypress="loadSearchData">
            <div class="resetSearch-ReviewDashboard clear-cross FR" style="display: none;" id="resetReviewDashBoard" on-tap="resetSearchForReview"></div>
        </div>
        <div id="BrowseContainer" class="container">
            <template is="dom-if" if="{{CheckForData(data)}}" class="noData">
                <p class="noData">No Record(s) Found.</p>
            </template>
            <table id="BodyTable" class="DataTable">
                <template is="dom-repeat" items="{{data}}" as="object" index-as="browse_Index">

                    <tr id$="[[AssignTable_th_Class(browse_Index)]]" on-tap="SelectedRow">
                        <td class="data1">
                            <pft-image value="{{object.Source.ThumbURL}}"></pft-image>

                        </td>
                        <td class="data2">
                            <pft-textcomponentvt data="{{object.Source.MAINTITLE}};{{object.Source.BreadCrumbPathByFolderNames}};{{object.Source.ContentType}}"></pft-textcomponentvt>
                        </td>

                    </tr>
                </template>
            </table>
        </div>
    </template>
    <script>
        Polymer({
            is: "pft-browse",
            properties: {
                data:
                       {
                           type: Array,
                           value: function () {
                               return [];
                           }
                       },
                callbackfunction:
                      {
                          type: String,
                          value: function () {
                              return "";
                          }
                      },
                objTenantId: {
                    type: String,
                    value: function () {
                        return "";
                    }
                },
                folderId: {
                    type: String,
                    value: function () {
                        return "";
                    }
                }
            },

            searchData:
                  {
                      type: String,
                      value: function () {
                          return "";
                      }
                  },
            AssetId:
                  {
                      type: String,
                      value: function () {
                          return "";
                      }
                  },

            CheckForData: function (data) {
                updateScrollAsync('BrowseContainer');
                if (data === null || data.length == 0)
                    return true;
            },
            resetSearchForReview: function () {
                if (this.$.Search.value != null) {
                    this.$.Search.value = '';
                }
                resetSearchForBrowseControl();
            },
            loadSearchData: function (e) {
                var textInput = this.$.Search.value;
                if (textInput != null && textInput != '')
                    this.$.resetReviewDashBoard.style.display = '';

                var charCode;
                if (e.which)
                    charCode = e.which;
                if (e.keyCode)
                    charCode = e.keyCode;
                if (charCode == 13) {
                    LoadSearchDataForBrowseControl();
                    return false;
                }
                return true;
            },
            SelectedRow: function (e) {
                var model = e.model;
                this.objTenantId = model.object.Source.TenantId;
                this.folderId = model.object.Source.ParentFolderId;
                this.searchData = model.object.Source;
                this.AssetId = model.object.Id;
                var RowId = model.browse_Index + 1;
                var elem = document.getElementById("Row" + RowId);
                if (elem) {
                    $jq(elem).siblings().removeClass('selectedRow')
                    $jq(elem).addClass('selectedRow')
                }
            },
            AssignTable_th_Class: function (header_indx) {
                var indx = header_indx + 1;
                return "Row" + indx;
            }

        });
    </script>
</dom-module>
<dom-module id="PFT-DeleteAction" assetpath="Components/">
    <template>
        <template is="dom-if" if="{{!isActionTextRequired(actionConfig)}}">
            <div id="deleteAction" title="Delete" class="linked" title$="{{actionConfig.ActionTooltip}}" on-tap="Invokefunction" actionname$="{{actionConfig.ActionName}}">
                <span class="FL deleteActionIcon clear-delete"></span>
            </div>
        </template>
        <template is="dom-if" if="{{isActionTextRequired(actionConfig)}}">
            <div id="deleteAction" title="Delete" class="actionWrap" title$="{{actionConfig.ActionTooltip}}" on-tap="Invokefunction" actionname$="{{actionConfig.ActionName}}">
                <span class="actionIcon clear-delete"></span>
                <span class="actionLabel">{{actionConfig.ActionDisplayText}}</span>
            </div>
        </template>        
    </template>
    <script>
        Polymer({

            is: 'PFT-DeleteAction',

            properties: {
                actionConfig: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                }
            },
            Invokefunction: function () {
                if (IsActionDisabled(this.id))
                    return false;
                else
                    this.domHost.dataHost.InvokeDeleteActionMethod(this.actionConfig.ActionOnClickFunction);
            },
            isActionTextRequired: function (actionConfig) {
                return IsToolbarActionTextRequired(actionConfig);
            }
        });
    </script>

</dom-module>
<dom-module id="pft-screenerfilter" assetpath="Components/">
    <template>
        <paper-icon-button class="filterLink clear-filter FR marR10" id="filterIcon" on-tap="ShowHideFilter"></paper-icon-button>
        <div id="FilterPanel" class="scnrFltrPnl FilterBorder FR marR10" style="display:none">
            <div class="FilterHeader">Filter</div>
            <ul class="scnrFltrs">
                <li class="listItem">Published between</li>
                <li class="listItem">
                    <div class="dateContainer">
                        <label class="label">From</label>
                        <input type="hidden" id="PublishedStartDateFormatted" value="" name="PublishedStartDateFormatted">
                        <input type="text" id="PublishedStartDate" name="PublishedStartDate" __datatype__="datetime" readonly="readonly" __ismandatory__="false">
                        <span id="PublishedStartDate_selector" alt="Choose Date" title="Choose Date" name="Choose Date" class="scnrFltrCalender clear-calender">
                    </span></div>

                    <div class="dateContainer">
                        <label class="label">To</label>
                        <input type="hidden" id="PublishedEndDateFormatted" value="" name="PublishedEndDateFormatted">
                        <input type="text" id="PublishedEndDate" name="PublishedEndDate" __datatype__="datetime" readonly="readonly" __ismandatory__="false">
                        <span id="PublishedEndDate_selector" alt="Choose Date" title="Choose Date" name="Choose Date" class="scnrFltrCalender clear-calender">
                    </span></div>
                    <hr>
                </li>
                <li class="listItem">Expiring between</li>
                <li class="listItem">
                    <div class="dateContainer">
                        <label class="label">From</label>
                        <input type="hidden" id="ExpiringStartDateFormatted" name="ExpiringStartDateFormatted">
                        <input type="text" id="ExpiringStartDate" name="ExpiringStartDate" __datatype__="datetime" readonly="readonly" __ismandatory__="false" onchange="ConvertToUserPrefDateFormat('ExpiringStartDate', 'ExpiringStartDateFormatted','ExpiringStartDate', '5')">
                        <span id="ExpiringStartDate_selector" alt="Choose Date" title="Choose Date" name="Choose Date" class="scnrFltrCalender clear-calender">
                    </span></div>
                    <div class="dateContainer">
                        <label class="label">To</label>
                        <input type="hidden" id="ExpiringEndDateFormatted" name="ExpiringEndDateFormatted">
                        <input type="text" id="ExpiringEndDate" name="ExpiringEndDate" __datatype__="datetime" readonly="readonly" __ismandatory__="false" onchange="ConvertToUserPrefDateFormat('ExpiringEndDate', 'ExpiringEndDateFormatted','ExpiringEndDate' ,'5')">
                        <span id="ExpiringEndDate_selector" alt="Choose Date" title="Choose Date" name="Choose Date" class="scnrFltrCalender clear-calender">
                    </span></div>
                    <hr>
                </li>

                <li id="PublishedUser" class="listItem">{{GetDisplayText()}}</li>
                <li class="listItem">
                    <input type="text" class="publBy" id="PublishedBy" tenatid="{{RegisterScreenerAutoSuggestion(filterData)}}">
                </li>
                <li class="FilterListItem linked">
                    <div class="CustomCheckDiv">
                        <input type="checkbox" id="ActiveScreeners">
                        <label class="CustomCheckLbl activeScreener" for="ActiveScreeners">Active Screeners</label>
                    </div>
                </li>

                <!--<hr />-->
                <template is="dom-if" if="{{CheckForControlRequired(filterData)}}">
                    <li class="listItem">
                        <div class="dateContainer">
                            <label class="label">Tenant </label>
                            <select id="filtertenantId" onchange="SetTenant">
                                <option>Select Tenant</option>
                                <template is="dom-repeat" items="{{filterData}}" as="filter">
                                    <option value$="{{filter.TenantName}}" data-id$="{{filter.TenantId}}" id$="{{filter.TenantId}}">{{filter.TenantName}}</option>
                                </template>
                            </select>
                        </div>
                    </li>
                </template>
            </ul>

            <div class="btnFooter">
                <div id="btnApplyFilter" class="Filter-ActiveBtn FR marR10" on-tap="ApplyFilterScreener">Apply</div>

                <div id="btnReset" class="Filter-InActiveBtn FR marR10" on-tap="ResetScreenerFields">Reset</div>
                <div class="newActionBtn FL closePanelBtn" title="Click here to Close" on-tap="closeFilterPanel">Close</div>
                <div class="clr"></div>
            </div>
            <input type="hidden" id="hdnFilterParam"> <!--value="<%=FilterQueryString %>"-->
        </div>
    </template>
    <script>
        var initForScreenerFilter = false;
        var autoSuggTenantId = "";
        Polymer({
            is: "pft-screenerfilter",
            filterAttribute: {
                type: Array,
                value: function () {
                    return [];
                }
            },
            filterData: {
                type: Array,
                value: function () {
                    return [];
                }
            },
            CheckForControlRequired: function (isControlRequired) {
                return false;
                // Cross-tenant filter not require as of now.need to fix in next build apply
                if (isControlRequired != null)
                    return true;
                else
                    return false;
            },
            ShowHideFilter: function (e) {
                if ( e != null && e.target != $("btnReset"))
                $('FilterPanel').style.display = $('FilterPanel').style.display == 'none' ? '' : 'none';
                if ($('FilterPanel').style.display == 'none') jQuery("table.DynarchCalendar-topCont").css({ "display": "none" });
                $jq('#filterIcon').toggleClass('clearFilterActive');
                if ($jq('.header-actionWrap'))
                {
                    $jq('.header-actionWrap').removeClass('showActionMenu');
                    $jq('#Sort').css("display", "none");
                    
                }
                if (initForScreenerFilter) return; // Belew code will be executed once, returning from here, as is filter initialized.
                //initializeAllDateTimeCalendars();
                initializeDateTimeCalendarV2ById("PublishedStartDate_selector", 'PublishedStartDate', "%a, %d %b %Y", false, null, false, false, false, null, ScreenerFilterDateCallback);
                initializeDateTimeCalendarV2ById("PublishedEndDate_selector", 'PublishedEndDate', "%a, %d %b %Y", false, null, false, false, false, null, ScreenerFilterDateCallback);
                initializeDateTimeCalendarV2ById("ExpiringStartDate_selector", 'ExpiringStartDate', "%a, %d %b %Y", false, null, false, false, false, null, ScreenerFilterDateCallback);
                initializeDateTimeCalendarV2ById("ExpiringEndDate_selector", 'ExpiringEndDate', "%a, %d %b %Y", false, null, false, false, false, null, ScreenerFilterDateCallback);
                window.addEventListener('touchstart', function (event) {
                    HideCalendarForDevice(event);
                });
                document.body.addEventListener('click', showHideScreenerFilterPanel, false);
                document.getElementById('FilterPanel').addEventListener('click', clickEventInsideScreenerFilterPanel, false);
                detectIEHideCalendarControl();
                RegisterFilterScreenerAutoSuggestion(autoSuggTenantId);
                initForScreenerFilter = true;
            },
            ApplyFilterScreener: function (e) {
                $jq('#PublishedBy').blur();
                $jq(this).blur();
                var pubStartDate = $('PublishedStartDateFormatted').value;
                var pubEndDate = $('PublishedEndDateFormatted').value;
                var expStartDate = $('ExpiringStartDateFormatted').value;
                var expEndDate = $('ExpiringEndDateFormatted').value;
                var active = $('ActiveScreeners').checked;
                var tenantid = 0;
                if ($jq("select#filtertenantId").length > 0)
                    tenantid = $jq('#filtertenantId').children(":selected").attr("data-id");

                var errorP = ValidateDate(pubStartDate, pubEndDate);
                if (!errorP)
                    return;
                var errorE = ValidateDate(expStartDate, expEndDate);
                if (!errorE)
                    return;

                if ((pubStartDate != '') && (pubEndDate == '')) {
                    pubEndDate = pubStartDate;
                }
                else if ((pubStartDate == '') && (pubEndDate != '')) {
                    pubStartDate = pubEndDate;
                }

                if ((expStartDate != '') && (expEndDate == '')) {
                    expEndDate = expStartDate;
                }
                else if ((expStartDate == '') && (expEndDate != '')) {
                    expStartDate = expEndDate;
                }
                var publishedBy = ($('PublishedBy')) ? $('PublishedBy').value.trim() : "";
                var filterObj = [];

                if (publishedBy != '') {
                    filterObj.push({
                        filterName: "UserId",
                        filterValue: publishedBy
                    });
                }
                else
                    RemoveFilterDiv('UserId');
                if (pubEndDate != '') {
                    filterObj.push({
                        filterName: "pubEndDate",
                        filterValue: pubEndDate
                    });
                }
                if (pubStartDate != '') {
                    filterObj.push({
                        filterName: "pubStartDate",
                        filterValue: pubStartDate
                    });
                }
                else
                    RemoveFilterDiv('pubStartDate');
                if (expStartDate != '') {
                    filterObj.push({
                        filterName: "expStartDate",
                        filterValue: expStartDate
                    });
                }
                else
                    RemoveFilterDiv('expStartDate');
                    if (expEndDate != '') {
                        filterObj.push({
                            filterName: "expEndDate",
                            filterValue: expEndDate
                        });
                    }
                filterObj.push({
                    filterName: "active",
                    filterValue: active
                });
                if (tenantid) {
                    filterObj.push({
                        filterName: "tenantId",
                        filterValue: tenantid
                    });
                }
                else
                    RemoveFilterDiv('tenantId');

                showTagAndCodeNameScreenerInbox(filterObj, "Screener");
                this.filterAttribute = filterObj;
                this.ShowHideFilter(e);
                LoadScreenerDashboardData(false);
                if (e != null && e.target != $("btnReset"))
                jQuery('#FilterPanel').css('display', 'none');
                jQuery('.filterLink').removeClass('clearFilterActive')
            },
            ResetScreenerFields: function (e) {
                $jq(this).blur();
                if ($('PublishedStartDate') && $('PublishedStartDateFormatted')) {
                    $('PublishedStartDate').value = '';
                    $('PublishedStartDateFormatted').value = '';
                }
                if ($('PublishedEndDate') && $('PublishedEndDateFormatted')) {
                    $('PublishedEndDate').value = '';
                    $('PublishedEndDateFormatted').value = ''
                }
                if ($('ExpiringStartDate') && $('ExpiringStartDateFormatted')) {
                    $('ExpiringStartDate').value = '';
                    $('ExpiringStartDateFormatted').value = ''
                }
                if ($('ExpiringEndDate') && $('ExpiringEndDateFormatted')) {
                    $('ExpiringEndDate').value = '';
                    $('ExpiringEndDateFormatted').value = '';
                }
                if ($('PublishedBy'))
                    $('PublishedBy').value = '';

                if ($('ActiveScreeners').checked)
                    $('ActiveScreeners').checked = false;

                if ($jq("select#filtertenantId").length > 0)
                    $jq("select#filtertenantId")[0].selectedIndex = 0;

                this.filterAttribute = ''
                IsResetAllFilter = true;
                ResetScreenerFilter( null,e);
            },
            GetDisplayText: function () {
                var dashboardId = '';
                if (document.getElementById('dashboardId') != null)
                    dashboardId = document.getElementById('dashboardId').value;
                else {
                    dashboardId = "ScreenerInbox"
                }
                return (dashboardId.indexOf('ScreenerInbox') > -1) ? 'Published by' : 'Published to';
            },
            RegisterScreenerAutoSuggestion: function (filterData) {
                if (filterData != null && filterData.length > 0) {
                    for (var i = 0; i < filterData.length; i++) {
                        if (filterData[i].TenantId != '888' && filterData[i].TenantId != '999') {
                            autoSuggTenantId = filterData[i].TenantId;
                            break;
                        }
                    }
                }
            },
            closeFilterPanel: function () {
                $jq('.scnrFltrPnl').css("display", "none");
            }
        });
    </script>
</dom-module>
<dom-module id="PFT-Icon" assetpath="Components/">
    <template>
        <div id="LfIcon" class$="{{cssclassName}} {{GetLinkedActionClass(action,rowValue)}}" title="{{value}}" action="{{SetClickAttribute(action)}}">{{value}}</div>
    </template>
    <script>
        Polymer({

            is: 'PFT-Icon',

            properties: {
                value:
                   {
                       Type: String
                   },
                action:
                    {
                        Type: String
                    },
                cssclassName: {
                    type: String,
                    value: ""
                },
                rowValue: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                }
            },
            SetClickAttribute: function (actionValue) {
                var attr = '';
                var params = '';
                var functionToCall = '';
                if (actionValue != null) {
                    attr = document.createAttribute('OnClick');
                    attr.value = actionValue;
                    this.$.LfIcon.setAttributeNode(attr);
                }
            },
            GetLinkedActionClass: function (actionValue, rowValue) {
                if (actionValue != "" && actionValue != undefined) {
                    if (IsValidateTaskAction(JSON.parse(rowValue.PFTRow[0].PFTColumn[2].PFTCell[0].Value), rowValue.StdAttributes.StatusAcronym))
                        return "actionLink";
                    else return "disableAction"
                }
                else return "";
            }
        });
    </script>

</dom-module>
<dom-module id="PFT-EssenceDownload" assetpath="Components/">
    <template>
        <template is="dom-if" if="{{Validation(rowData)}}">
            <div id="download" class="actionDivWrap">
                <div class="actionDiv">
                    <pft-text title="{{title}}" cssclass-name="{{cssClass}}" action="{{SetClickAttribute(rowData,isTaskExecutable)}}" value="Download"></pft-text>
                </div>
            </div>
        </template>
    </template>
    <script>
        Polymer({

            is: 'PFT-EssenceDownload',

            properties: {
                rowData: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                isTaskExecutable: {
                    type: Boolean,
                    value: false
                },
                cssClass: {
                    type: String,
                    computed: 'getCssClass(rowData, isTaskExecutable)'
                },
                title: {
                    type: String,
                    computed: 'getToolTip(rowData, isTaskExecutable)',
                    value: ""
                }
                //id: {
                //    type: string,
                //    observer: 'computeId(rowData)'
                //}
            },
            Validation: function (rowData) {
                if (rowData != undefined && rowData != "" && rowData.StdAttributes != undefined) {
                    if ((rowData.StdAttributes.S_WO_ID != undefined && rowData.StdAttributes.S_WO_ID != "") ||
                        (rowData.StdAttributes.WorkorderId != undefined && rowData.StdAttributes.WorkorderId != "") ||
                        (rowData.StdAttributes.taskId != undefined && rowData.StdAttributes.taskId != "")) {
                        var assignmentDetails = this.getAssignmentDetailsFromRowData(rowData);
                        if (!rowData.StdAttributes.StatusAcronym ||
                            IsValidateTaskAction(JSON.parse(assignmentDetails), rowData.StdAttributes.StatusAcronym))
                            this.isTaskExecutable = true;
                        else
                            this.isTaskExecutable = false;
                        return true;
                    }
                    else
                        return false;
                }
                return false;
            },
            SetClickAttribute: function (rowData, isTaskExecutable) {
                var woId = '';
                var taskId = '';
                var objTenantId = '';
                var objId = '';
                var userDetails = '';
                var statusAcronym = '';
                if (rowData.StdAttributes.S_WO_ID != undefined && rowData.StdAttributes.S_WO_ID != "")
                    woId = rowData.StdAttributes.S_WO_ID;
                else
                    woId = rowData.StdAttributes.WorkorderId;
                if (rowData && rowData.StdAttributes.TaskId != undefined && rowData.StdAttributes.TaskId != "") {
                    taskId = rowData.StdAttributes.TaskId;
                    var assignmentDetailsJson = this.getAssignmentDetailsFromRowData(rowData);
                    userDetails = GetAssignmentDetails(assignmentDetailsJson);
                    statusAcronym = rowData.StdAttributes.StatusAcronym;
                }
                if (rowData && rowData.StdAttributes.S_DMGUID != undefined && rowData.StdAttributes.S_DMGUID != "")
                    objId = rowData.StdAttributes.S_DMGUID;
                if (rowData.StdAttributes.ObjTenantId != undefined && rowData.StdAttributes.ObjTenantId != "")
                    objTenantId = rowData.StdAttributes.ObjTenantId;

                var actionValue = "HandleClick('', '', 'LaunchWOMEssenceDownloadTool', 'workOrderId+" + woId + "&&taskId+" + taskId + "&&objId+" + objId + "&&objTenantId+" + objTenantId + "&&taskAssignmentDetails+" + userDetails + "&&statusAcronym+" + statusAcronym + "', this)";
                return actionValue;
            },
            getCssClass: function (rowData, isTaskExecutable) {
                var cssClass = "clearIcon clearfileDownload";
                if (rowData && rowData.StdAttributes && rowData.StdAttributes.TaskId != undefined && rowData.StdAttributes.TaskId != "" && !isTaskExecutable) {
                    cssClass += " disableAction";
                }
                return cssClass;
            },
            getToolTip: function (rowData, isTaskExecutable) {
                var toolTip = "Click here to download";
                if (rowData && rowData.StdAttributes && rowData.StdAttributes.TaskId != undefined && rowData.StdAttributes.TaskId != "" && !isTaskExecutable)
                    toolTip = GetTaskTooltips("PICKTASK");
                return toolTip;
            },
            getAssignmentDetailsFromRowData: function (rowData) {
                return GetTaskAssignmentObject(rowData);
            }
            //computeId: function (rowData) {
            //    return "PFT-EssenceDownload_" + rowData.StdAttributes.TaskId ? rowData.StdAttributes.TaskId : rowData.StdAttributes.S_WO_ID;
            //}
        });
    </script>
</dom-module>
<dom-module id="PFT-ConditionalMetadata" assetpath="Components/">
    <template>
        <template is="dom-repeat" items="{{GetItemsToRepeat(conditionalValue,conditionalMetadata)}}" as="metadata" index-as="TaskBoard_Index">
            <pft-textcomponenthz id="textconditionalmetadata_[[TaskBoard_Index]]" textseparator="|" data="{{GetMetaData(metadata,rowData)}}" labels="{{GetLabels(metadata)}}"></pft-textcomponenthz>
        </template>
    </template>
    <script>
        Polymer({
            is: 'PFT-ConditionalMetadata',
            properties: {
                conditionalValue:
                   {
                       type: Object
                   },
                conditionalMetadata: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                rowData: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                }
            },
            GetItemsToRepeat: function (conditionalValue, conditionalMetadata) {
                if (conditionalMetadata == undefined || conditionalMetadata == null || conditionalMetadata == '') {
                    return null;
                }
                var retval = null;
                try {
                    var conditionalMetadataObj = JSON.parse(decodeURIComponent(conditionalMetadata));
                    for (var i = 0; i < conditionalMetadataObj.length; i++) {
                        var taskTypeArry = conditionalMetadataObj[i].ConditionalValue.split(",");
                        if (jQuery.inArray((conditionalValue.TaskTypeAcronym ? conditionalValue.TaskTypeAcronym : conditionalValue), taskTypeArry) != '-1') {
                            retval = conditionalMetadataObj[i].ConditionalMetaData;
                            break;
                        }
                    }
                }
                catch (insertErr) {
                    console.log("Error while parsing metadata");
                }
                return retval;
            },
            GetMetaData: function (metaDataList, rowData) {
                var retVal = '';
                for (var i = 0; i < metaDataList.MetaData.length; i++) {
                    //retVal += '{{'+metaDataList.MetaData[i].MetaDataValue+'}};';
                    var count = (metaDataList.MetaData[i].MetaDataValue.match(/PFTRow/g) || []).length;
                    var colAndCellArray = new Array();
                    for (var j = 0 ; j < count * 2 ; j += 2) {
                        colAndCellArray.push(metaDataList.MetaData[i].MetaDataValue.split('[')[j + 1].split(']')[0]);
                        colAndCellArray.push(metaDataList.MetaData[i].MetaDataValue.split('[')[j + 2].split(']')[0]);
                    }
                    var metaDataValue = metaDataList.MetaData[i].MetaDataValue;
                    if (rowData.PFTColumn) {
                        for (var k = 0 ; k < count * 2 ; k += 2) {
                            if (rowData.PFTColumn[colAndCellArray[k]] && rowData.PFTColumn[colAndCellArray[k]].PFTCell[colAndCellArray[k + 1]] != undefined &&
                                rowData.PFTColumn[colAndCellArray[k]].PFTCell[colAndCellArray[k + 1]] != null &&
                                rowData.PFTColumn[colAndCellArray[k]].PFTCell[colAndCellArray[k + 1]] != '') {
                                if (metaDataList.MetaData[i].IsExpression) {
                                    var tempStr = 'PFTRow.PFTColumn[' + colAndCellArray[k] + '].PFTCell[' + colAndCellArray[k + 1] + '].Value';
                                    metaDataValue = metaDataValue.replace(tempStr, rowData.PFTColumn[colAndCellArray[k]].PFTCell[colAndCellArray[k + 1]].Value ? (rowData.PFTColumn[colAndCellArray[k]].PFTCell[colAndCellArray[k + 1]].Value == null || this.isJson(rowData.PFTColumn[colAndCellArray[k]].PFTCell[colAndCellArray[k + 1]].Value) == true ? rowData.PFTColumn[colAndCellArray[k]].PFTCell[colAndCellArray[k + 1]].Value : "'" + rowData.PFTColumn[colAndCellArray[k]].PFTCell[colAndCellArray[k + 1]].Value + "'") : null);
                                }
                                else if (rowData.PFTColumn[colAndCellArray[k]] && rowData.PFTColumn[colAndCellArray[k]].PFTCell[colAndCellArray[k + 1]].Value != undefined &&
                                    rowData.PFTColumn[colAndCellArray[k]].PFTCell[colAndCellArray[k + 1]].Value != null &&
                                    rowData.PFTColumn[colAndCellArray[k]].PFTCell[colAndCellArray[k + 1]].Value != '') {
                                    var tempStr = 'PFTRow.PFTColumn[' + colAndCellArray[k] + '].PFTCell[' + colAndCellArray[k + 1] + '].Value';
                                    metaDataValue = metaDataValue.replace(tempStr, rowData.PFTColumn[colAndCellArray[k]].PFTCell[colAndCellArray[k + 1]].Value);
                                }
                                else
                                    metaDataValue = '';
                            }
                            else
                                metaDataValue = '';
                        }
                    }
                    else {
                        if (metaDataList.MetaData[i].IsExpression){
                            var metaDataAttrs = metaDataValue.substring(metaDataValue.indexOf('(')+1,metaDataValue.indexOf(')'))
                            var stringValues = metaDataAttrs.match(/'(.*?)'/g);
                            var params = new Array(); var iteration = 0;
                            if (stringValues && stringValues.length > 0) {
                                stringValues.filter(function (obj) {
                                    if (metaDataValue.indexOf(obj) != -1) {
                                        params.push("Replace" + iteration + "=" + obj);
                                        metaDataAttrs = metaDataAttrs.replace(obj, params[iteration].split('=')[0]);
                                        iteration++;
                                    }
                                });
                            }
                            metaDataAttrs = metaDataAttrs.split(',');
                            for (var attrCount = 0; attrCount < metaDataAttrs.length; attrCount++) {
                                if (!metaDataAttrs[attrCount].toUpperCase().contains("REPLACE")) {
                                    metaDataValue = metaDataValue.replace(metaDataAttrs[attrCount], rowData.Attributes[metaDataAttrs[attrCount]] ? (rowData.Attributes[metaDataAttrs[attrCount]] == null || this.isJson(rowData.Attributes[metaDataAttrs[attrCount]]) == true ? rowData.Attributes[metaDataAttrs[attrCount]] : "'" + rowData.Attributes[metaDataAttrs[attrCount]] + "'") : null);
                                }
                            }
                        }
                        else
                            metaDataValue = metaDataValue.replace(metaDataValue, rowData.Attributes[metaDataValue] ? rowData.Attributes[metaDataValue] : '');
                    }
                    if (metaDataValue != undefined && metaDataValue != '' && metaDataValue != null) {
                        if (metaDataList.MetaData[i].IsExpression) {
                            retVal += eval(metaDataValue) + ';';
                        }
                        else {
                            retVal += metaDataValue + ';';
                        }
                    }
                    else {
                        retVal += metaDataList.MetaData[i].MetaDataDefaultValue + ';';
                    }
                }
                retVal = retVal.substring(0, retVal.length - 1);
                return retVal;
            },
            GetLabels: function (metaDataList) {
                var retVal = '';
                for (var i = 0; i < metaDataList.MetaData.length; i++) {
                    if (metaDataList.MetaData[i].MetaDataKey)
                        retVal += 'PFTCell' + i + ':' + metaDataList.MetaData[i].MetaDataKey + ';';
                }
                retVal = retVal.substring(0, retVal.length - 1);
                return retVal;
            },
            isJson: function (params) {
                try{
                    JSON.parse(params);
                    return true;
                }
                catch (insertErr) {
                    return false;
                }
            }
        });
    </script>

</dom-module>
<dom-module id="PFT-Compliance-Review" assetpath="Components/Review/">
    <template>
        <div id="reviewSegmentsContainer" class="reviewSegmentsContainer complianceReviewTool">
            <div id="reviewTabContainer" class="reviewTabContainer">
                <div class="reviewTab reviewTabActive">
                    <span>Segments</span>
                </div>
            </div>
            <div id="reviewSegmentsToolbar FR" class="reviewSegmentsToolbar">
                <div id="commentSearchCount" style="visibility: hidden;">
                    <div class="CustomCheckDiv">
                        <input type="checkbox" name="checkAllCommentBoxes" value="false" onclick="selectAllComplianceSegments()" id="CompRevCheckCommentBoxes" class="style-scope pft-screenerfilter">
                        <label id="commentSearchCountField" class="CustomCheckLbl" for="CompRevCheckCommentBoxes"></label>
                    </div>
                </div>
                <div class="FR">
                    <pft-icon cssclass-name="clear-fileExport revSegDownload" on-tap="ShowCallOutScreen"></pft-icon>
                    <div id="ExportCommentsPanel" class="callOutPanel callOutExport " style="display: none;">
                        <div>
                            <fieldset class="reviewExport">
                                <legend>Choose Format(s)</legend>
                                <table class="formatContainer">
                                    <tbody><tr>
                                        <td class="reviewExportParams CustomCheckDiv">
                                            <input id="chkboxpdf" type="checkbox" title="PDF" name="PDF">
                                            <label for="chkboxpdf" class="CustomCheckLbl" id="lblpdf"><span>PDF</span></label>
                                        </td>
                                        <td class="reviewExportParams CustomCheckDiv">
                                            <input id="chkboxedl" type="checkbox" title="EDL" name="EDL">
                                            <label for="chkboxedl" class="CustomCheckLbl" id="lbledl"><span>EDL</span></label>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td class="reviewExportParams CustomCheckDiv">
                                            <input id="chkboxfcp" type="checkbox" title="FCP" name="FCP">
                                            <label for="chkboxfcp" class="CustomCheckLbl" id="lblfcp"><span>FCP</span></label>
                                        </td>
                                        <td class="reviewExportParams CustomCheckDiv">
                                            <input id="chkboxfcpmarker" type="checkbox" title="FCPMarker" name="FCPMarker">
                                            <label for="chkboxfcpmarker" class="CustomCheckLbl" id="lblfcpmarker"><span>FCP Marker</span></label>
                                        </td>
                                    </tr>
                                </tbody></table>
                            </fieldset>
                            <table class="reviewExportParameters">
                                <tbody><tr>
                                    <td class="reviewExportParams CustomCheckDiv">
                                        <input id="chksom" type="checkbox" name="SOM" runat="server">
                                        <label for="chksom" class="CustomCheckLbl" id="Label1"><span> Offset with SOM </span></label>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="reviewExportParams CustomCheckDiv">
                                        <input id="chkorgfilename" type="checkbox" name="ORIGFILE" runat="server">
                                        <label for="chkorgfilename" class="CustomCheckLbl" id="Label2"><span> Embed Original Filename </span></label>
                                    </td>
                                </tr>
                            </tbody></table>
                            <div class="bottomSep">
                                <div class="FR marR10 exportTextBtn" title="Download" on-tap="ExportSegments">Export</div>
                                <div class="clr"></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="revSearchHolder FR">
                    <input type="text" id="themeAttibSearchText" class="themeAttibSearchText" placeholder="Search theme or attribute" on-keyup="SearchThemeOrAttibute">
                    <div id="themeOrattributeSearch" class="clear-search revSegSearch  style-scope pft-icon" onclick="SearchThemeOrAttibute()"> </div>
                </div>
                <div class="clr"></div>
            </div>
            <div id="reviewSegments">
                <div id="revSegComponentHolder" class="revSegComponentHolder container">
                    <div class="content">
                        <template is="dom-repeat" items="{{complianceData}}" as="compliancedata" index-as="o_index">
                            <div class="reviewSegContent revSegTable">
                                <template is="dom-if" if="{{HasData(compliancedata.Segments)}}">
                                    <template is="dom-repeat" items="{{compliancedata.Segments}}" as="segment" index-as="i_index" compliance="{{compliancedata}}">
                                        <div id="{{segment.SegmentObjectId}}" class="reviewSegment" onclick$="ComplianceSegmentSelect('{{segment.TcIn}}','{{GetTcOut(segment)}}','false','{{segment.SegmentObjectId}}')" on-dblclick="EditSegment">
                                            <div class="FL checkboxDiv reviewSegmentCheck">
                                                <div class="SelectBox">
                                                    <input type="checkbox" id$="ChkBoxReviewSegment_{{i_index}}" on-tap="HighlightSegment">
                                                    <label for$="ChkBoxReviewSegment_{{i_index}}"></label>
                                                </div>
                                            </div>
                                            <div class="FL thumbnailDiv revSegColumn1">
                                                <div class="revSegContainer">
                                                    <pft-imagetext thumb-u-r-l="{{segment.ThumbURL}}" click-function="ComplianceSegmentSelect" time-code-in="{{segment.TcIn}}" time-code-out="{{segment.TcOut}}" frame-rate="{{compliancedata.FrameRate}}" image-text="{{GetTimecodeWithSom(segment, compliancedata)}}" action-value="'{{segment.TcIn}}','{{GetTcOut(segment)}}','false','{{segment.SegmentObjectId}}'"></pft-imagetext>
                                                    <!--<pft-text value$="{{segment.AttributeValue}}" cssclass-name="revSegAttribName"></pft-text>
                                                    <!--<div class="moreData">{{segment.AttributeValue}}</div>-->
                                                </div>
                                            </div>
                                            <div class="FL informationDiv">
                                                <div class="themeDiv">
                                                    <div class="themeText" inner-h-t-m-l="{{segment.ThemeValue}}"></div>
                                                    <div id="showMoreOption_{{o_index}}_{{i_index}}" class="clear-actions FR revSegMore" on-tap="ShowMoreOption" o_index="[[o_index]]" i_index="[[i_index]]"></div>
                                                    <div class="FR revSegChatBubbleContainer" on-tap="OpenChatPopUp">
                                                        <div id="chatBubble_{{o_index}}_{{i_index}}" class="clear-chatBubbleOutline revSegComment"></div>
                                                        <template is="dom-if" if="{{(GetCommentsCount(segment))>0}}">
                                                            <div id="revSegCommentCount_{{o_index}}_{{i_index}}" class="revSegCommentCount">
                                                                <span id="revSegShowCommentCount">{{GetCommentsCount(segment)}}</span>
                                                            </div>
                                                        </template>
                                                    </div>
                                                    <div class="clr"></div>
                                                    <div id="revSegCommentPanel_{{o_index}}_{{i_index}}" class="revSegCommentPanel">
                                                        <pft-comments commentsdata="{{segment.Comments}}" event="SaveReviewSegmentComment" index-id$="{{segment.SegmentObjectId}}" event-value$="SegmentObjectId+{{segment.SegmentObjectId}}"></pft-comments>
                                                    </div>
                                                    <div id="revSegOptionsPanel_{{o_index}}_{{i_index}}" class="revSegOptions">
                                                        <div class="optionsContainer">
                                                            <div id="optionsContent" class="container optionsContent">
                                                                <div class=" content">
                                                                    <ul class="ulOptions">
                                                                        <li id="Edit_{{o_index}}_{{i_index}}" value="Edit" on-tap="EditSegment">Edit</li>
                                                                        <li id="Details_{{o_index}}_{{i_index}}" value="Details" on-tap="DetailsSegment">Details</li>
                                                                        <li id="Delete_{{o_index}}_{{i_index}}" value="Delete" on-tap="DeleteSegment">Delete</li>
                                                                    </ul>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div id="segmentDetails_{{o_index}}_{{i_index}}" class="segmentDetails">
                                                        <div class="Details">Details <span class="clear-cross FR closeDetails" on-tap="CloseSegmentDetails"></span><div class="clr"></div></div>
                                                        <ul>
                                                            <li class="detailsCatalogBy">Cataloged By</li>
                                                            <li class="detailsCatalogOn">{{segment.CreatedBy}} | {{segment.CreatedOn}} hrs</li>
                                                            <template is="dom-if" if="{{IsReviewed(compliancedata)}}">
                                                                <li class="detailsReviewedBy">Reviewed By</li>
                                                                <li class="detailsReviewedOn">{{compliancedata.ReviewedBy}} | {{compliancedata.ReviewedOn}} hrs</li>
                                                            </template>
                                                        </ul>
                                                    </div>
                                                </div>
                                                <div class="attributeDiv">
                                                    <span inner-h-t-m-l="{{segment.AttributeValue}}"></span>
                                                </div>
                                                <div class="actionsDiv">
                                                    <template is="dom-if" if="{{ActionableSegment(segment)}}">
                                                        <div class="FL clear-videoAssetO revSegVideoAction"><span class="actionSpan">{{segment.VideoActionValue}}</span></div>
                                                        <div class="FL clear-volume_up revSegAudioAction"><span class="actionSpan">{{segment.AudioActionValue}}</span></div>
                                                        <div class="FL clear-comments revSegTextAction"><span class="actionSpan">{{segment.TextActionValue}}</span></div>
                                                    </template>
                                                    <template is="dom-if" if="{{!ActionableSegment(segment)}}">
                                                        <div class="FL clear-block revSegNonActionable"><span>Non-Actionable</span></div>
                                                    </template>
                                                </div>
                                            </div>
                                        </div>
                                    </template>
                                </template>
                                <template is="dom-if" if="{{!HasData(compliancedata.Segments)}}">
                                    <div class="noData">No segments found</div>
                                </template>
                            </div>
                        </template>
                    </div>
                </div>
                
                        <div class="posRel revCommentsContainer">
                            <div class="reviewCommentsDiv">
                                <input class="revComments" id="reviewCommentTextBox" placeholder="Enter comment..." value="" autocomplete="off">
                                <div class="clr"></div>
                            </div>
                            <div class="submitReview">
                            <div class="reviewStatusCont">
                                <label class="reviewStatusLabel">Status :</label>
                                <select id="reviewStatus" class="revDropDown">
                                    <option value="Approved">Approve</option>
                                    <option value="Rejected">Reject</option>
                                </select>
                            </div>   
							<div class="reviewStatusCont">
                                <label class="reviewRiskLevelLabel">Risk Level :</label>
                                <select id="riskLevelBox" class="revRiskLevelDropdown">
                                    <option value="HIGH">High</option>
                                    <option value="MEDIUM">Medium</option>
                                    <option value="LOW">Low</option>
                                </select>
                            </div>
                                <div class="FR reviewSubmitBtnCancelBtn">
                                    <div id="submitReview" class="submitBtn promptBtnDefaultAction" onclick="SaveProcessAssetReview($jq('#hndTenantId').val(), $jq('#reviewStatus').val(), $jq('#reviewCommentTextBox').val(), $jq('#riskLevelBox').val())" title="Submit"></div>
                                </div>
                                <div class="clr"></div>
                            </div>
                        </div>
            </div>

            <div id="addOrEditSegment" class="addOrEditSegment" style="display:none;">
			<div class="addOrEditSegmentInner">
                <div class="markedTimecodes">
                    <div class="markIn FL">
                        <div class="markInLabel FL">TC In</div>
                        <input type="text" id="markInText" class="markInText" readonly="readonly">
                    </div>
                    <div class="markOut FL">
                        <div class="markOutLabel FL">TC Out</div>
                        <input type="text" id="markOutText" class="markOutText FR" readonly="readonly">
                    </div>

                </div>

                <div class="complianceParams FL">

                    <div class="editActionDiv FL">
                        <div class="editActionLabel">Edit Action</div>
                        <select id="editActionDropDown">
                            <template is="dom-repeat" items="{{masterData.Item3}}" as="editAction">
                                <option value$="{{editAction.EditAction}}" data-id$="{{editAction.EditActionCode}}">{{editAction.EditAction}}</option>
                            </template>
                        </select>
                    </div>

                    <div class="themeAddDiv FL">
                        <div class="themeLabel">Theme</div>
                        <select id="themeDropDown" on-change="ResetAttibutes">
                            <template is="dom-repeat" items="{{masterData.Item1}}" as="themeAttribute" index-as="theme_index">
                                <option value$="{{themeAttribute.Theme.LegalListValue}}" data-id$="{{themeAttribute.Theme.LegalListId}}">{{themeAttribute.Theme.LegalListValue}}</option>
                            </template>
                        </select>
                    </div>

                    <div class="attributeAddDiv FL">
                        <div class="attributeLabel FL">Attribute</div>
                        <div class="attributeContainer">
                            <input type="text" id="attribute" class="attributeText" data-id="" placeholder="Search Attribute" on-keyup="ShowReviewAttributes" onblur="resetDefaultAttribute(this);" on-tap="OnReviewAttributeTap" autocomplete="off">
                            <div id="attributeSuggstion" class="attributeSuggstion container">
                            </div>
                        </div>
                    </div>
                </div>

                <div class="catalogComments FL">
                    <div class="commentLabel FL">Description</div>
                    <textarea id="segmentComment" cols="25" rows="4" class="catSegComment" readonly=""></textarea>
                </div>


                <div class="complianceAction FL">
                    <div class="audioAction FL">
                        <div class="audioLabel FL">Audio</div>
                        <select id="audioAction">
                            <template is="dom-repeat" items="{{masterData.Item2}}" as="audioActions">
                                <template is="dom-if" if="{{IsEqual(audioActions.ActionType,'AudioAction')}}">
                                    <template is="dom-repeat" items="{{audioActions.Action}}" as="Actions">
                                        <option value$="{{Actions.LegalListValue}}" data-id$="{{Actions.LegalListId}}">{{Actions.LegalListValue}}</option>
                                    </template>
                                </template>
                            </template>
                        </select>
                    </div>

                    <div class="videoAction">
                        <div class="videoLabel FL">Video</div>
                        <select id="videoAction">
                            <template is="dom-repeat" items="{{masterData.Item2}}" as="videoActions">
                                <template is="dom-if" if="{{IsEqual(videoActions.ActionType,'VideoAction')}}">
                                    <template is="dom-repeat" items="{{videoActions.Action}}" as="Actions">
                                        <option value$="{{Actions.LegalListValue}}" data-id$="{{Actions.LegalListId}}">{{Actions.LegalListValue}}</option>
                                    </template>
                                </template>
                            </template>
                        </select>
                    </div>

                    <div class="textAction">
                        <div class="textLabel FL">Subtitle</div>
                        <select id="textAction">
                            <template is="dom-repeat" items="{{masterData.Item2}}" as="textActions">
                                <template is="dom-if" if="{{IsEqual(textActions.ActionType,'TextAction')}}">
                                    <template is="dom-repeat" items="{{textActions.Action}}" as="Actions">
                                        <option value$="{{Actions.LegalListValue}}" data-id$="{{Actions.LegalListId}}">{{Actions.LegalListValue}}</option>
                                    </template>
                                </template>
                            </template>
                        </select>
                    </div>
                </div>
                 </div>
                <div class="btnAddOrEditSegFooter FL">
                    <div id="btnSaveSegment" class="btnSaveSegment promptBtn FR promptBtnDefaultAction">Save</div>
                    <div id="btnCancelAddorEdit" class="btnCancelAddorEdit promptBtn FR marR10" on-tap="showSegments">Cancel</div>
                    <div class="clr"></div>
                </div>
            </div>


        </div>
    </template>
    <script type="text/javascript">
        Polymer({
            is: "PFT-Compliance-Review",
            attached:function(){
                this.optionsData = [{ value: "Edit", onclick: "EditSegment" },
                                    { value: "Details", onclick: "DetailsSegment" },
                                    { value: "Delete", onclick: "DeleteSegment" }
                ]
            },
            ready: function () {
                var status = this.complianceData[0];
                if (status.ReviewStatus!=null && status.ReviewStatus.toUpperCase() == "APPROVED" || status.ReviewStatus.toUpperCase() == "REJECTED") {
                    if (status.ReviewStatus.toUpperCase() == "APPROVED") {
                        $jq("#reviewStatus option[value='Approved']").attr('selected', 'selected');
                    }
                    else {
                        $jq("#reviewStatus option[value='Rejected']").attr('selected', 'selected');
                    }
                    $jq('#reviewCommentTextBox').val(status.ReviewComments);
                    if (status.RiskLevel != null)
                    {
                        $jq('#riskLevelBox option[value=' + status.RiskLevel + ']').attr('selected', 'selected');
                    }
                    disableReviewSubmit();
                }
                var pageSize=$jq('#hndCRPageSize').val();
                pageNo=0;
                var container = document.getElementById('revSegComponentHolder');
                container.complaiceAssetInfo = status;
                container.addEventListener('scroll', function (e) {
                    if ((container.scrollTop >= (container.scrollHeight - container.clientHeight) * 0.8) && !($jq('#revSegComponentHolder').attr('isScroll') == 'true')) {
                        $jq('#revSegComponentHolder').attr('isScroll', 'true');
                        var totalPages = $jq('#hndCRTotalPages').val();
                        if (pageNo < (totalPages-1)) {
                            pageNo++;
                            //scrollbarPosition = (container.scrollHeight - container.clientHeight) * 0.8;
                            pageNumber = (pageNo == 0) ? 0 : (pageNo * pageSize);
                            loadReviewSegmentData(pageNumber,$jq("#themeAttibSearchText").val(),false, e.target.complaiceAssetInfo);
                        }
                    }
                });
                this.async(function() {
                    showComplianceSegmentCount();
                    loadScroll('revSegComponentHolder')
                }, 1);
            },
            properties: {
                complianceData:
                           {
                               type: Array,
                               value: function () {
                                   return [];
                               }
                           },
                masterData: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                optionsData: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                pageNo: {
                    type: Number,
                    value: 0
                }
            },
            GetCommentsCount: function (segment) {
                addOrUpdateAttribute();                
                return (segment.Comments != null) ? segment.Comments.length : 0;
            },
            OpenChatPopUp: function (event) {
                var o_index = event.model.o_index;
                var i_index = event.model.i_index;
                $jq(".revSegCommentPanel").each(function () {
                    (this.id != "revSegCommentPanel_" + o_index + "_" + i_index) ? this.style.display = 'none' : "";
                })
                this.HideByClass('revSegOptions');
                this.HideByClass('segmentDetails');
                this.HideByClass('callOutPanel');
                $jq("#revSegCommentPanel_" + o_index + "_" + i_index).toggle();
                document.body.addEventListener('click', hideSegmentOptionsOrCommentPanel, false);
                var styleHeight = ((event.detail.y - (jQuery)('#reviewSegmentsContainer').offset().top) / ((jQuery)('#reviewSegmentsContainer').height())) * 100;
                var commentDoc = document.getElementById('revSegCommentPanel_' + o_index + '_' + i_index);
                if (styleHeight >= 45) {
                    commentDoc.removeClassName('commentsCalloutDown');
                    commentDoc.addClassName("commentsCalloutUp");
                    commentDoc.style.top = (event.detail.y - 15)  + "px";
                    commentDoc.getElementsByClassName('commentsCallout')[0].style.top = (event.detail.y  - commentDoc.getElementsByClassName('commentsCallout')[0].offsetHeight -15) + "px";
                }
                else if (styleHeight < 45) {
                    commentDoc.removeClassName('commentsCalloutUp');
                    commentDoc.addClassName("commentsCalloutDown");
                    commentDoc.style.top = (event.detail.y) + "px";
                    commentDoc.getElementsByClassName('commentsCallout')[0].style.top = (event.detail.y + 12) + "px";
                }

                var scrollCntID = '#commentsScrollCnt_' + event.model.segment.SegmentObjectId;
                updateScroll(scrollCntID);
                showMoreLink($jq("#revSegCommentPanel_" + o_index + "_" + i_index + " div.commentValue"), 3, 15, scrollCntID);

                var container = document.getElementById('revSegComponentHolder');
                container.object = this;
                container.o_index = o_index;
                container.i_index = i_index;
                container.addEventListener('scroll', this.hideChatPopUp, false);
            },

            ShowMoreOption: function (event) {
                var o_index = event.model.o_index;
                var i_index = event.model.i_index;
                $jq(".revSegOptions").each(function () {
                    (this.id != "revSegOptionsPanel_" + o_index + "_" + i_index) ? this.style.display = 'none' : "";
                });
                this.HideByClass('revSegCommentPanel');
                this.HideByClass('segmentDetails');
                this.HideByClass('callOutPanel');
                if((((event.detail.y - 130) / $jq('#revSegComponentHolder').height()) * 100) < 75)
                    $jq("#revSegOptionsPanel_" + o_index + "_" + i_index).removeClass('revSegOptionsShowUp').addClass('revSegOptionsShowDown').toggle();
                else
                    $jq("#revSegOptionsPanel_" + o_index + "_" + i_index).removeClass('revSegOptionsShowDown').addClass('revSegOptionsShowUp').toggle();
                document.body.addEventListener('click', hideSegmentOptionsOrCommentPanel, false);
            },
            DeleteSegment: function (e) {
                if (isReviewed()) {
                    showErrorDetails("Cannot delete segment. Task is already reviewed.", "0");
                    return;
                }
                var segmentDelete = e.model.segment;
                deleteSegment(segmentDelete.SegmentObjectId);
                this.HideByClass('revSegOptions');
                uncheckAllComplianceReviewSegments();
            },
            EditSegment: function (e) {
                //double click on comments callout must not open edit segment form
                if(!jQuery('.revSegCommentPanel').is(e.target) && jQuery('.revSegCommentPanel').has(e.target).length === 0) {
                    this.DisplayEditSegmentForm(e.model.segment, e.model.compliancedata)
                }
            },
            DisplayEditSegmentForm: function (segment, complianceData) {
                if(isReviewed()){
                    showErrorDetails("Cannot edit segment. Task is already reviewed.", "0");
                    return;
                }
                $jq('#btnSaveSegment').html('Save');
                $jq('#btnSaveSegment').attr('onclick', 'SaveReviewSegment()');
                this.SetEditSegmentValues(segment, complianceData);
                ShowHideAddEditPanel(true);
                $jq('#segmentComment').attr('readonly', false);
                this.HideByClass('revSegOptions');
                this.HideByClass('segmentDetails');
                this.HideByClass('revSegCommentPanel');
                toggleReviewToolBarVisibility("edit");
            },
            DetailsSegment: function (e) {
                var o_index = event.model.o_index;
                var i_index = event.model.i_index;
                this.HideByClass('segmentDetails');
                this.HideByClass('revSegCommentPanel');
                if($jq('#revSegOptionsPanel_' + o_index + '_' + i_index).hasClass('revSegOptionsShowUp'))
                    $jq('#segmentDetails_' + o_index + '_' + i_index).addClass('segmentDetailsShowUp').show();
                else
                    $jq('#segmentDetails_' + o_index + '_' + i_index).removeClass('segmentDetailsShowUp').show();

            },
            showSegments: function () {
                toggleReviewToolBarVisibility("view");
                $jq('#reviewSegments').show();
                $jq('#addOrEditSegment').hide();
                this.HideByClass('revSegOptions');
                this.HideByClass('segmentDetails');
                this.HideByClass('revSegCommentPanel');
                this.ResetAddEditFields();
            },
            HideByClass: function (className) {
                $jq("." + className).each(function () {
                    this.style.display = 'none';
                })
            },
            CloseSegmentDetails: function (e) {
                var o_index = event.model.o_index;
                var i_index = event.model.i_index;
                $jq('#segmentDetails_' + o_index + '_' + i_index).hide();
            },
            SetEditSegmentValues: function (segment, assetInfo) {

                var assetSomTC = assetInfo.StartOfMedia;
                var frameRate = assetInfo.FrameRate;
                var timecodeDisplayFormat = assetInfo.TimecodeDisplayFormat;

                var somMilliSec = CMPUtils.ConvertTimeCodeToMilliseconds(assetSomTC, frameRate, timecodeDisplayFormat);
                var tcInWithSom = CMPUtils.ConvertMillisecondsToTimeCode((CMPUtils.ConvertTimeCodeToMilliseconds(segment.TcIn, frameRate, timecodeDisplayFormat) + parseFloat(somMilliSec)), frameRate, timecodeDisplayFormat);
                var tcOutWithSom = "";
                if(!(segment.TcOut == "" || segment.TcOut == '')) {
                    tcOutWithSom = CMPUtils.ConvertMillisecondsToTimeCode((CMPUtils.ConvertTimeCodeToMilliseconds(segment.TcOut, frameRate, timecodeDisplayFormat) + parseFloat(somMilliSec)), frameRate, timecodeDisplayFormat);
                    $jq('.markOut').show();
                }
                else  {
                    tcOutWithSom = "";
                    $jq('.markOut').hide();
                }
                compAttrValue = stripHtml(segment.AttributeValue);
                compAttrId = segment.AttributeId;
                compThemeId = segment.ThemeId;
                $jq('#hndSegmentObjectId').val(segment.SegmentObjectId);
                $jq('#markInText').val(tcInWithSom).attr("readonly",true).attr("oldtcin", segment.TcIn);
                $jq('#markOutText').val(tcOutWithSom).attr("readonly",true);
                $jq('#themeDropDown option[data-id=' + segment.ThemeId + ']').prop('selected', 'selected');
                $jq('#attribute').attr('data-id',segment.AttributeId).val(stripHtml(segment.AttributeValue));
                $jq('#audioAction option[data-id=' + segment.AudioActionId + ']').prop('selected', 'selected');
                $jq('#videoAction option[data-id=' + segment.VideoActionId + ']').prop('selected', 'selected');
                $jq('#textAction option[data-id=' + segment.TextActionId + ']').prop('selected', 'selected');
                if(segment.EditActionCode)
                    $jq('#editActionDropDown option[data-id=' + segment.EditActionCode + ']').prop('selected', 'selected');
                else
                    $jq('#editActionDropDown option[data-id=Actionable]').prop('selected', 'selected');
                $jq('#segmentComment').val(segment.Description);
                SeekToSegmentTimeCode(segment.TcIn,segment.TcOut,"false");
                $jq('#hndSegmentMode').val('EDIT');
            },
            ResetAddEditFields: function () {
                $jq('#hndSegmentObjectId').val("");
                $jq('#markInText').val("").attr("readonly",true);;
                $jq('#markOutText').val("").attr("readonly",true);;
                $jq('#themeDropDown option:eq(0)').prop('selected', 'selected');
                $jq('#attribute').attr('data-id','').val('');
                $jq('#audioAction option:eq(0)').prop('selected', 'selected');
                $jq('#videoAction option:eq(0)').prop('selected', 'selected');
                $jq('#textAction option:eq(0)').prop('selected', 'selected');
                $jq('#editActionDropDown option:eq(0)').prop('selected', 'selected');
                $jq('#hndSegmentMode').val('');
                $jq('#segmentComment').val('');
                var apiWrapper = new APIWrapper();
                apiWrapper.clearMarkInOutOnSave();
            },
            ShowReviewAttributes: function (e) {
                var searchText = e.target.value;
                var masterdata = this.masterData.Item1;
                var attributes = []
                var themeId=$jq($jq('#themeDropDown option:selected'), this).attr('data-id');
                for (i = 0; i < masterdata.length; i++)
                {
                    if(themeId==masterdata[i].Theme.LegalListId){
                        for (j = 0; j < masterdata[i].Attributes.length; j++) {
                            attributes.push(masterdata[i].Attributes[j]);
                        }
                    }
                }

                var filtered = attributes;
                if(searchText) {
                    var regexp = new RegExp(searchText, 'i');
                    filtered=attributes.filter(x => x.LegalListValue.toLowerCase().includes(searchText.toLowerCase()));
                }

                if(filtered.length > 0) {
                    if ($jq('#attributeSuggstion').css('display') == 'none') {
                        $jq('#attributeSuggstion').css('display', 'block');
                        $jq('#attributeSuggstion').html();
                    }
                    var filterDivText="";
                    for(i=0;i<filtered.length;i++) {
                        filterDivText+="<div class='suggestedAttibutes' value='"+escape(filtered[i].LegalListValue)+"' data-id='"+filtered[i].LegalListId+"'>"+filtered[i].LegalListValue+"</div>"
                    }
                    filterDivText="<div class='content'>"+filterDivText+"</div>"
                    $jq('#attributeSuggstion').html(filterDivText);
                    loadScroll('attributeSuggstion');
                    $jq('.suggestedAttibutes').click(function(){
                        var id=$jq(this).attr('data-id');
                        var selectedValue=unescape($jq(this).attr('value'));
                        compAttrId = id;
                        selectedAttrId = id;
                        compAttrValue = selectedValue;
                        selectedAttrValue = selectedValue;
                        $jq('#attribute').val(selectedValue).attr('data-id',id);
                        $jq('#attributeSuggstion').css('display', 'none');

                        if($jq($jq('#themeDropDown option:selected'), this) && selectedAttrId){
                            getActionsByThemeAttribute($jq($jq('#themeDropDown option:selected'), this).attr('data-id'), selectedAttrId);
                        }
                    });
                }
                else{
                    $jq('#attribute').attr('data-id','');
                    $jq('#attributeSuggstion').html('');
                }
            },
            IsEmpty:function(Description){
                return (Description) ? Description : 'N/A';
            },
            IsEqual: function (val1, val2) { return (val1 == val2) ? true : false },
            IsAnnotation:function(value){return (value)?'-':'' },
            GetTcOut:function(segment){return (segment.TcOut)?segment.TcOut:segment.TcIn},
            IsReviewed:function(compliance){return (compliance.ReviewStatus.toUpperCase()=='APPROVED'||compliance.ReviewStatus.toUpperCase()=='REJECTED')?true:false},
            HasData:function(data){
                if(data)
                    return (data.length>0) ? true : false ;
                else
                    return false;
            },
            SearchThemeOrAttibute:function(event){
                if(event.keyCode==13)
                {
                    pageNo = 0;
                    SearchThemeOrAttibute();
                }
            },

            ShowCallOutScreen:function()
            {
                var exportComments = document.getElementById("ExportCommentsPanel");
                if (exportComments.style.display === "none") {
                    exportComments.style.display = "block";
                    this.HideByClass('revSegCommentPanel');
                    this.HideByClass('segmentDetails');
                    this.HideByClass('revSegOptions');
                    document.body.addEventListener('click', hideSegmentOptionsOrCommentPanel, false);
                } else {
                    exportComments.style.display = "none";
                }

            },
            ResetAttibutes:function(){
                $jq('#attribute').attr('data-id','').val('');
                $jq('#attributeSuggstion').hide();
                compAttrValue='';
            },
            HighlightSegment: function(e)
            {
                //$jq($jq("#"+e.target.id)[0].closest('tr')).toggleClass('selectedReviewSegment');
                var target_id = "#"+e.target.id;
                var inputTags = $jq($jq(target_id)[0]);
                //for(var i = 0 ; i < inputTags.length ; i++)
                //{
                if($jq($jq(target_id)[0])[0].getAttribute("type") == "checkbox")
                {
                    if($jq($jq(target_id)[0])[0].checked)
                    {
                        if(!$jq($jq("#"+e.target.id)).closest('.reviewSegment').hasClass("selectedReviewSegment"))
                        {
                            //$jq($jq("#"+e.target.id)[0]).addClass("selectedReviewSegment");
                            $jq($jq("#"+e.target.id)).closest('.reviewSegment').addClass('selectedReviewSegment');
                        }
                    }
                    else
                    {
                        if($jq($jq("#"+e.target.id)).closest('.reviewSegment').hasClass("selectedReviewSegment"))
                        {
                            $jq($jq("#"+e.target.id)).closest('.reviewSegment').removeClass("selectedReviewSegment");
                        }
                    }
                }
                //}
            },
            ExportSegments:function(e){
                var compliaceDataId = "ComplianceReview";
                var dataAttributeName = "compliance-data";
                var complianceData = JSON.parse($jq('#' + compliaceDataId).attr(dataAttributeName));
                var title=complianceData[0].TaskTitle;
                ExportReviewSegments(title);
            },
            GetTimecodeWithSom: function(segmentInfo, assetInfo) {
                var assetSomTC = assetInfo.StartOfMedia;
                var frameRate = assetInfo.FrameRate;
                var timecodeDisplayFormat = assetInfo.TimecodeDisplayFormat;


                var somMilliSec = CMPUtils.ConvertTimeCodeToMilliseconds(assetSomTC, frameRate, timecodeDisplayFormat);
                var timeInMilliSec = CMPUtils.ConvertTimeCodeToMilliseconds(segmentInfo.TcIn, frameRate, timecodeDisplayFormat);
                var timeText = CMPUtils.ConvertMillisecondsToTimeCode((timeInMilliSec + somMilliSec), frameRate, timecodeDisplayFormat);
                if(segmentInfo.TcOut) {
                    var tcOutMilliSec = CMPUtils.ConvertTimeCodeToMilliseconds(segmentInfo.TcOut, frameRate, timecodeDisplayFormat);
                    timeText += " - " + CMPUtils.ConvertMillisecondsToTimeCode((tcOutMilliSec + somMilliSec), frameRate, timecodeDisplayFormat);
                }
                return timeText;
            },
            hideChatPopUp: function(e) {
                var o_index = e.target.o_index;
                var i_index = e.target.i_index;
                var polymerObj = e.target.object;
                $jq('#revSegCommentPanel_' + o_index + '_' + i_index).hide();
                e.target.removeEventListener("scroll", polymerObj.hideChatPopUp);
            },
            OnReviewAttributeTap: function(e) {
                var attribute = e.target.value;
                if(attribute == "") {
                    this.ShowReviewAttributes(e);
                }
                e.stopPropagation();
                document.addEventListener('click', onCompRevAttrBlur, false);
            },
            ActionableSegment: function(segment) {
                if(!(segment.EditActionCode != null && segment.EditActionCode.toLowerCase() == 'non-actionable'))
                    return true;
            }
        });
    </script>
</dom-module>

<dom-module id="PFT-Audio-Review" assetpath="Components/Review/">
    <template>
        <div id="reviewSegmentsContainer" class="reviewSegmentsContainer">
            <div id="reviewSegments">
                <div id="revSegComponentHolder" class="revSegComponentHolder container">
                    <div class="content">
                        <table class="reviewSegContent revSegTable">
                            <template is="dom-if" if="{{HasData(reviewData)}}">
                                <template is="dom-repeat" items="{{reviewData.Segments}}" as="segment" index-as="i_index" review="{{reviewData}}">
                                    <tr id$="{{segment.SegmentObjectId}}" createdbyuserid$="{{segment.CreatedByUserId}}" class="reviewSegment" onclick$="AudioComentOnClickAction('{{segment.TcIn}}', '{{GetTcOut(segment)}}', 'false', '{{segment.SegmentObjectId}}')" on-dblclick="EditSegment">
                                        <!--Review segment checkbox start-->
                                        <td class="reviewSegmentCheck">
                                            <div class="SelectBox">
                                                <input type="checkbox" id$="ChkBoxReviewSegment_{{i_index}}" class$="{{GetClassDisable(segment)}}" on-tap="HighlightSegment" data-segment-id$="{{segment.SegmentObjectId}}">
                                                <label for$="ChkBoxReviewSegment_{{i_index}}" class="enableAudioDeleteComments"></label>
                                            </div>
                                        </td>
                                        <!--Review segment component Checkbox end-->
                                        <td class="dubbingRevSegColumn2">
                                            <div>
                                                <div class="revSegCol2Row1">
                                                    <div class="dubbingSegmentHeader">
                                                        <div class="commentsInformation FL">
                                                            <span class="commentedBy" inner-h-t-m-l="{{segment.CreatedBy}},"></span>
                                                            <span class="commentedOn" inner-h-t-m-l="{{segment.CreatedOn}}"></span>
                                                        </div>
                                                        <div class="timeCodes FR">
                                                            <pft-text value$="{{segment.TcIn}}" cssclass-name="revSegTcIn FL" class="revSegTcInIcon"></pft-text>
                                                            <span> {{IsAnnotation(segment.TcOut)}} </span>
                                                            <pft-text value$="{{segment.TcOut}}" cssclass-name="revSegTcOut FL" class="revSegTcOutIcon"></pft-text>
                                                            <div id="showMoreOption_{{i_index}}" class$="{{GetClassShowMore(segment)}}" on-tap="ShowMoreOption" i_index="[[i_index]]"></div>
                                                            <div id="revSegOptionsPanel_{{i_index}}" class="revSegOptions revSegOptionsShowDown">
                                                                <div class="optionsContainer">
                                                                    <div id="optionsContent" class="container optionsContent">
                                                                        <div class=" content">
                                                                            <ul class="ulOptions">
                                                                                <li id="Edit_{{i_index}}" value="Edit" on-tap="EditSegment">Edit</li>
                                                                                <li id="Delete_{{i_index}}" value="Delete" on-tap="DeleteSegment">Delete</li>
                                                                            </ul>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="clr"></div>
                                                        <span class="dubbingEssenceName">{{segment.FormattedEssenceTitle}}</span>
                                                    </div>
                                                    <div class="dubbingCommentSection" id="dubbingReviewComment_{{i_index}}" inner-h-t-m-l="{{AudioReviewShowMoreLess(segment)}}">

                                                    </div>
                                                    <div class="clr"></div>
                                                </div>
                                            </div>
                                        </td>
                                        <!--Review Component Container end-->
                                    </tr>
                                </template>
                            </template>
                        </table>
                    </div>
                </div>
                <div class="reviewCommnets">
                    <div class="reviewContentStatus">
                        <div class="posRel revCommentsContainer">
                            <div class="reviewCommentsDiv">
                                <input class="revComments" id="reviewCommentTextBox" placeholder="Enter comment..." value="">
                                <div class="clr"></div>
                            </div>
                            <div class="submitReview">
                                <label class="reviewStatusLabel">Status :</label>
                                <select id="reviewStatus" class="revDropDown">
                                    <option value="Select">Select</option>
                                    <option value="Approved">Approve</option>
                                    <option value="Rejected">Reject</option>
                                </select>

                                <div class="FR reviewSubmitBtnCancelBtn">
                                    <div id="submitReview" class="submitBtn promptBtnDefaultAction" onclick="SubmitAudioReviewTask($jq('#hndTenantId').val(), $jq('#reviewStatus').val(), $jq('#reviewCommentTextBox').val(), $jq('#riskLevelBox').val())" title="Submit"></div>
                                </div>
                                <div class="clr"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </template>
    <script type="text/javascript">
        Polymer({
            is: "PFT-Audio-Review",
            attached: function () {
                RegisterScrollForAudioReview();
            },
            ready: function () {
                var status = this.reviewData;
                if (status.ReviewStatus.toUpperCase() == "APPROVED" || status.ReviewStatus.toUpperCase() == "REJECTED")
                {
                    //select status field
                    if (status.ReviewStatus.toUpperCase() == "APPROVED") {
                        $jq("#reviewStatus option[value='Approved']").attr('selected', 'selected');
                        $jq("#reviewStatus option[value='Approved']")[0].innerText = "Approved";
                    }
                    else {
                        $jq("#reviewStatus option[value='Rejected']").attr('selected', 'selected');
                        $jq("#reviewStatus option[value='Rejected']")[0].innerText = "Rejected";
                    }
                    //display global comment
                    $jq('#reviewCommentTextBox').val(status.ReviewComments);
                    disableAudioReviewSubmit();
                    checkDifferentUser();
                }
                else
                {
                    $jq('#reviewCommentTextBox').val("");
                }

                loadScroll('#populateAudioEssenceId');                
            },
            properties: {
                reviewData: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                reviewFilterData: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                }
            },
            SearchTextDubbingReview: function (event) {
                if (event.keyCode == 13) {
                    SearchTextDubbingReview();
                }
            },
            IsAnnotation: function (value) { return (value) ? '-' : '' },
            GetTcOut: function (segment) { return (segment.TcOut) ? segment.TcOut : segment.TcIn },
            HasData: function (data) {
                if (data && data.Segments)
                    return (data.Segments.length > 0) ? true : false;
                else
                    return false;
            },
            HighlightSegment: function (e) {
                var target_id = "#" + e.target.id;
                var inputTags = $jq($jq(target_id)[0].closest('tr'))[0].getElementsByTagName('input');
                for (var i = 0 ; i < inputTags.length ; i++) {
                    if ($jq($jq(target_id)[0].closest('tr'))[0].getElementsByTagName('input')[i].getAttribute("type") == "checkbox") {
                        if ($jq($jq(target_id)[0].closest('tr'))[0].getElementsByTagName('input')[0].checked) {
                            if (!$jq($jq("#" + e.target.id)[0].closest('tr')).hasClass("selectedAudioReviewSegment")) {
                                $jq($jq("#" + e.target.id)[0].closest('tr')).addClass("selectedAudioReviewSegment");
                            }
                        }
                        else {
                            if ($jq($jq("#" + e.target.id)[0].closest('tr')).hasClass("selectedAudioReviewSegment")) {
                                $jq($jq("#" + e.target.id)[0].closest('tr')).removeClass("selectedAudioReviewSegment");
                            }
                        }
                    }
                }
            },
            ShowMoreOption: function (event) {
                //var o_index = event.model.o_index;
                var i_index = event.model.i_index;
                $jq(".revSegOptions").each(function () {
                    (this.id != "revSegOptionsPanel_" + i_index) ? this.style.display = 'none' : "";
                });
                this.HideByClass('revSegCommentPanel');
                this.HideByClass('segmentDetails');
                $jq("#revSegOptionsPanel_" + i_index).toggle();
                document.body.addEventListener('click', hideSegmentOptionsOrCommentPanel, false);
            },
            HideByClass: function (className) {
                $jq("." + className).each(function () {
                    this.style.display = 'none';
                })
            },
            EditSegment: function (event) {
                var reviewCommentExeptableLength = 5000;   //in char
                if (this.IsUserValidated(event.model.segment)) {
                    showErrorDetails("Cannot edit comment created by another user.", "0");
                    return;
                }
                $jq("#hdnAudioReviewEditModeEnabled").val("true");
                var selectedSegmentObjectId = event.model.segment.SegmentObjectId;
                $jq("#commentSearchCount").css("display", "none");
                $jq("#selectedAudioTrack").css("display", "block");
                $jq("#dubbingReviewTemp").css("display", "none");
                $jq("#dubbingReviewForm").css("display", "block");
                $jq(".dubRevSearchHolder").css("display", "none");
                $jq("#reviewSegmentsToolbar").css("display", "none");
                $jq('[dbcolumnname=S_CLIP_TCIN]')[0].value = event.model.segment.TcIn;
                $jq('[dbcolumnname=S_CLIP_TCOUT]')[0].value = event.model.segment.TcOut;
                var editComment = event.model.segment.Comment;
                var regex1 = '<span class="highlightSrchTxt">';
                regex1 = new RegExp(regex1, "g");
                var regex2 = "</span>";
                regex2 = new RegExp(regex2, "g");
                editComment = editComment.replace(regex1, "").replace(regex2, "");
                $jq('[dbcolumnname=S_COMMENTS]')[0].value = editComment;
                if (event.model.segment.TcOut == "")
                {
                    jQuery('.DubbingReviewContentRightPart .groupUlViewForm li:nth-child(3)').css("visibility", "hidden");
                    $jq(".DubbingReviewContentRightPart .groupUlViewForm li:nth-child(2)").addClass("rt0");
                }
                $jq('#btnDubbingReviewAdd').click(function () {
                    var revComment = ($jq('[dbcolumnname=S_COMMENTS]')[0].value).trim();
                    if (revComment == "") {
                        showErrorDetails("Please add comment.", "0");
                        return;
                    }
                    if (revComment.length > reviewCommentExeptableLength)
                    {
                        var errorMsg = "The characters entered (" + revComment.length + ") exceeds the maximum character limit (" + reviewCommentExeptableLength + "). ";
                        showErrorDetails(errorMsg, "0");
                        return;
                    }
                    EditDubbingSegment(event.model.segment);
                    $jq("#commentSearchCount").css("display", "inline-block").css("visibility", "");
                    jQuery('.DubbingReviewContentRightPart .groupUlViewForm li:nth-child(3)').css("visibility", "");
                    $jq("#selectedAudioTrack").css("display", "none");
                    $jq("#dubbingReviewTemp").css("display", "block");
                    $jq("#dubbingReviewForm").css("display", "none");
                    $jq(".dubRevSearchHolder").css("display", "block");
                    $jq(".DubbingReviewContentRightPart .groupUlViewForm li:nth-child(2)").removeClass("rt0");
                    $jq("#reviewSegmentsToolbar").css("display", "block");
                    $jq('#btnDubbingReviewAdd').attr('onclick', '').unbind('click');
                    $jq("#hdnAudioReviewEditModeEnabled").val("false");
                    var apiWrapper = new APIWrapper();
                    apiWrapper.clearMarkInOutOnSave();
                    apiWrapper.setFocus();
                });
            },
            DeleteSegment: function (event) {
                var selectedSegmentObjectId = event.model.segment.SegmentObjectBId;
                var i_index = event.model.i_index;
                $jq("#revSegOptionsPanel_" + i_index).css("display", "none");
                DeleteDubbingSegment(event.model.segment);

            },

            AudioReviewShowMoreLess: function (segment) {
                return AudioReviewShowMoreLess(segment);
            },
            IsUserValidated: function (segment) {
                var currentUserId = $jq("#hdnUserId").val();
                return (segment.CreatedByUserId != currentUserId) ? true : false
            },
            GetClassShowMore: function (segment) {
                var currentUserId = $jq("#hdnUserId").val();
                if (currentUserId != segment.CreatedByUserId) {
                    return "clear-actionsF FR revSegMore hideButton";
                }
                else {
                    return "clear-actionsF FR revSegMore";
                }
            },
            GetClassDisable: function (segment) {
                var currentUserId = $jq("#hdnUserId").val();
                if (currentUserId != segment.CreatedByUserId) {
                    return "audioReviewComCheckBox diffUser";
                }
                else {
                    return "audioReviewComCheckBox";
                }
            }
        });
    </script>
</dom-module><dom-module id="PFT-ImageText" assetpath="Components/Review/">
    <template>
        <div class="segThumbText" style$="background-Image: url('[[GetImageUrl(thumbURL)]]'), url('[[GetDefaultThumbURL()]]')" onclick$="{{clickFunction}}({{actionValue}})"></div>
        <!--<template is="dom-if" if="{{!IsNullorEmpty(imageText)}}">-->
        <div class="imageText" title="{{imageText}}">{{imageText}}</div>
        <!--</template>-->
    </template>
    <script>
        Polymer({
            is: 'PFT-ImageText',
            properties: {
                clickFunction: String,
                imageText: String,
                actionValue:String,
                thumbURL: String
            },
            GetImageUrl: function (url) {
                if (url != undefined && url != "" && url != null && !url.contains("genericFile.png") && !url.contains("noPreview.png")) {
                    if (url.indexOf('http:') == 0 && document.referrer != "") {
                        url = url.replace('http:', new URL(document.referrer).protocol);
                    }
                    url = GetThumbnailUrlForWatermark(url);
                    return url;
                }
            },

            GetDefaultThumbURL: function() {
                return "/BC/Product/Images/Elements/Assets/Preview/noPreview.png"
            },

            SetClickAttribute: function (actionValue, url) {
                console.log(this.actionValue);
                var attr = '';
                var params = '';
                var functionToCall = '';
                var divId = '';
                if (this.url != undefined && this.url != "" && !this.url.contains("genericFile.png") && !this.url.contains("noPreview.png") && this.url != null && actionValue != undefined &&
                    actionValue != "" && actionValue != null) {
                    attr = document.createAttribute('OnClick');
                    attr.value = actionValue;
                    //this.$.imgDiv.setAttributeNode(attr);
                }
            },
            IsNullorEmpty: function (text) {
                return (text) ? false: true;
            }

        });
    </script>

</dom-module>
<dom-module id="PFT-Comments" assetpath="Components/Review/">
    <template>
        <div class="commentsContainer">
            <div class="commentsCallout">
                <div class="commentsContent container" id="commentsScrollCnt_{{indexId}}">
                    <div class="content">
                        <template is="dom-repeat" items="{{commentsdata}}" as="commentdata" index-as="o_index">
                            <ul class="commetSection">
                                <li>
                                    <div class="CommentDetails commentDetailsWrp">
                                        <pft-text value="{{commentdata.CommentedBy}}" cssclass-name="commenterDetails" class=""></pft-text>
                                        <div class="commentSeparator"> at </div>
                                        <pft-text value="{{GetFormattedDate(commentdata.CreatedOn)}}" cssclass-name="commentedDateTime"></pft-text>
                                    </div>
                                </li>
                                <li class="commentsTxtWrp">
                                    <pft-text value="{{commentdata.Comment}}" cssclass-name="commentValue"></pft-text>
                                </li>
                            </ul>
                        </template>
                    </div>
                </div>
                <div class="addCommentContainer">
                    <input type="text" id="comment_{{indexId}}" class="addCommentInput FL" placeholder="Add Comments" on-keyup="ShowHideSendnow">
                    <div class="FL sendCommentContainer" on-tap="SubmitComment" index$="{{indexId}}" id$="sendNowContainer_{{indexId}}" action$="{{action}}">
                        <div class="clear-sendNow sendNowButton"></div>
                    </div>
                    <div class="clr"></div>
                </div>
            </div>
        </div>
    </template>
    <script>
        Polymer({

            is: 'PFT-Comments',
            attached: function () {
            },
            properties: {
                value:
                   {
                       Type: String
                   },
                commentdata: {
                    Type: Array,
                    value: function () {
                        return []
                    }
                },
                indexId: {
                    Type: String
                },
                event: {
                    Type: String
                },
                eventValue: {
                    Type: String
                }
            },
            SubmitComment: function (e) {
                var comment = $jq('#comment_' + $jq($(this)).attr('index-id')).val();
                if (comment.length == 0) {
                    return;
                }
                var functionToCall = this.event;
                var params = this.eventValue;
                params += '&&Comment+' + comment;
                HandleClick('', '', functionToCall, params);
            },
            ShowHideSendnow: function (e) {
                var comment = e.target.value;
                var index = e.target.id.split('comment_')[1];
                (comment.length > 0) ? $jq("#sendNowContainer_" + index).css({ "color": "#43c6e3", "Opacity": "1", "cursor": "pointer" }) : $jq("#sendNowContainer_" + index).css({ "color": "#fff", "Opacity": "0.3", "cursor": "default" });

                if (e.keyCode == 13)
                    this.SubmitComment();
            },
            GetFormattedDate: function (date) {
                try{
                    var newDate = new Date(date);
                    var hours = newDate.getHours();
                    var minutes = newDate.getMinutes();
                    var ampm = hours >= 12 ? 'PM' : 'AM';
                    hours = hours % 12;
                    hours = hours ? hours : 12; // the hour '0' should be '12'
                    minutes = minutes < 10 ? '0' + minutes : minutes;
                    var strTime = hours + ':' + minutes + ' ' + ampm;
                    var arrDate = newDate.toString().split(' ');
                    return strTime + " " + arrDate[0] + ' ,  ' + arrDate[2] + ' ' + arrDate[1];
                }
                catch (ex) {
                    return date;
                }
            }

        });
    </script>

</dom-module>
<dom-module id="PFT-Input" assetpath="Components/Review/">
    <template>
        <input type$="{{type}}" id$="{{indexId}}" class$="{{cssClassName}}" title$="{{title}}" value$="{{value}}">
    </template>
    <script>
        Polymer({
            is: 'PFT-Input',
            onready: function () {
                if (this.readOnly=="true")
                    document.getElementById(this.indexId).setAttribute("readonly", true);
            },
            properties: {
                value: String,
                cssClassName: String,
                title: String,
                IsReadOnly: {
                    Type:String,
                    notify:true,
                    computed:'_readOnly()'
                },
                readOnly:String,
                type: String,
                indexId:String
            },
            _readOnly: function () {
                //document.getElementById(this.id).setAttribute("readonly",true);
                //this.$.idInput.Set
                //return (this.readOnly=="true") ? "readonly" : "";
            }
        });
    </script>

</dom-module>
<dom-module id="PFT-Subtitle" assetpath="Components/Subtitle/">
    <template>
        <template is="dom-if" if="{{HasData(subtitleData)}}">
            <template is="dom-repeat" items="{{subtitleData}}" as="subtitledata">
                <div class="userSubtitlePanel" user-id$="{{subtitledata.UserId}}" data-tc-in$="{{subtitledata.TcIn}}" data-tc-out$="{{subtitledata.TcOut}}">
                    <div class$="subttlaccordion {{isLoggedInUser(subtitledata.UserId)}}" onclick="accordianView(this, event)">
                        <div class="stUsrIcon clear-person"></div>
                        <div class="subtitleUserName">{{subtitledata.UserName}}</div>
                        <template is="dom-if" if="{{launchPoint(subtitledata.UserId)}}">
                            <div class="subtitleUserTcInOut FR">{{subtitledata.TcIn}} / {{subtitledata.TcOut}} ({{timeInMins(subtitledata.TcIn, subtitledata.TcOut)}} Min)</div>
                        </template>
                    </div>
                        <pft-subtitletextbar subtitlesegments="{{subtitledata.Subtitle}}"></pft-subtitletextbar>
                    </div>
            </template>
        </template>
        <template is="dom-if" if="{{!HasData(subtitleData)}}">
            <pft-createimportsubtitle></pft-createimportsubtitle>
        </template>
    </template> 
    <script type="text/javascript">
        Polymer({
            is: 'PFT-Subtitle',
            properties: {
                subtitleData:
                    {
                        type: Array,
                        notify: true,
                        value: function () {
                            return [];
                        }
                    }
            },
            HasData: function (data) {
                if (data) {
                    if (data.length > 0) {
                        jQuery(".actionbar").fadeIn(300);
                        return true;
                    } else {
                        jQuery(".actionbar").fadeOut(300);
                        return false;
                    }
                }
                else {
                    jQuery(".actionbar").fadeOut(300);
                    return false;
                }
            },         
            
            launchPoint: function (UserId) {
                if (jQuery('#launchPoint').val().toLowerCase() != 'library' && UserId == jQuery('#usrId').val())
                return true;
            },

            timeInMins: function(tcIn, tcOut){
                return calculateTimeInMins(tcIn, tcOut).toFixed(2);
            },
            
            isLoggedInUser: function (UserId) {
                if (UserId == jQuery('#usrId').val()) {
                    return "logged-user";
                } else {
                    return "non-loggedin-user";
                }
                   
            }
        });
    </script>

</dom-module>
<dom-module id="PFT-Subtitletextbar" assetpath="Components/Subtitle/">
    <template>
        <div class="panel">
                <template is="dom-if" if="{{HasData(subtitlesegments)}}">
                    <template is="dom-repeat" items="{{subtitlesegments}}" as="segments" index-as="o_index" initial-count="10" target-framerate="10">
                        <div class="subtitlesec" data-mode$="{{isEditModeOn(segments.subtitleEditableMode)}}" data-recentlyaddedorupdateflag$="{{segments.recentAddUpdateFlag}}" index$="subtitle_{{segments.Position}}" id$="{{segments.ObjId}}" subtitleerrorclass$="{{hasErrorClass(segments.errorMsg)}}" onkeyup="subtitleBoxKeyUpEvents(this, event)" onkeydown="subtitleBoxKeyDownEvents(this, event)" data-userid$="{{segments.UserId}}" data-tcin$="{{segments.TcIn}}" data-tcout$="{{segments.TcOut}}" data-class$="{{hasErrorViewMode(segments.errorMsg)}}" data-indexedid$="{{segments.indexedId}}" data-additionalinfo$="{{segments.additionalInfo}}" onclick="selectSubtitleBox(event)" ondblclick="editSubtitleBox(this, event)">
                            <div class="timeframe">
                                <div class="frameInfoLeft FL">
                                    <span class="frameno">{{segments.Position}}</span>
                                    <span class="timeframerange">
                                        <span class="stTimeIn spanstTimeIn" onclick="event.stopImmediatePropagation();" ondblclick="goEditableMode(this, event)" data-userid$="{{segments.UserId}}" inner-h-t-m-l="{{segments.TcIn}}" style="display: inline;"></span>
                                        /
                                        <span class="stTimeOut spanstTimeOut" onclick="event.stopImmediatePropagation();" ondblclick="goEditableMode(this, event)" data-userid$="{{segments.UserId}}" inner-h-t-m-l="{{segments.TcOut}}"></span>                                        
                                    </span>    
                                    <span class$="charpersec durErrorPolymer {{hasErrorInDuration(segments.errorMsg)}}">{{findDurError(segments.SubtitleText, segments.TcIn, segments.TcOut)}}</span>
                                    <template is="dom-if" if="{{!HasErrorFlag(segments.subtitleEditableMode)}}">                                        
                                        <span class$="charpersec charpersecPolymer {{hasErrorInCharPerSecond(segments.errorMsg)}}">{{findCharPerSecond(segments.SubtitleText, segments.TcIn, segments.TcOut)}}</span>
                                        <span class$="charperlinePolymer charperline {{hasErrorInTotalCharLength(segments.errorMsg)}}">{{getCharPerLine(segments.SubtitleText)}}</span>
                                    </template>
                                </div>
                                <div class="frameInfoRight FR">
                                    <div class="subtitleArrows  clear-actionsF subActions FR parent-tooltip subtitle-extraMenu-wrapper tool-info" onclick="focusOnMenuClick(this, event)" data-subtitle-id$="{{segments.ObjId}}">
                                    </div>
                                    
                                    <div class="keyupErrMsg" style="{{displayError(segments.errorMsg)}}">  
                                        <span class="clear-error subActions FR st-tooltip-wrapper tool-info project-setting-error subActionsKeyup" onmouseover="SubtitleErrorCountAction(this, event)" data-subtitle-id$="{{segments.ObjId}}" onmouseout="this.innerHTML = ''">
                                        </span>
                                        <template is="dom-if" if="{{HasErrorFlag(segments.subtitleEditableMode)}}">
                                            <span class="voilationMsgCount labelErrorCls FR voilationMsgCountKeyup"></span>
                                        </template>
                                        <template is="dom-if" if="{{!HasErrorFlag(segments.subtitleEditableMode)}}">
                                            <span class="voilationMsgCount labelErrorCls FR voilationMsgCountPolymer" inner-h-t-m-l="{{errorCount(segments.errorMsg)}}"></span>
                                        </template>
                                    </div>
                                </div>
                            </div>

                            <div class="editableSubtitlebox">                                
                                <template is="dom-if" if="{{HasErrorFlag(segments.subtitleEditableMode)}}">
                                    <textarea autofocus="" class$="textareatrnscrptpertimeframe stSelectedArea subtitleTextArea {{applyFontFamilyForSelectLanguage()}}" onkeyup="autoGrow(event); textAreaKeyUpAction(this, event);" onkeydown="    textAreaKeyDownAction(this, event);" onclick="    clickSubtitleTextarea(this, event)" value="{{convertDivTextIntoTextarea(segments.SubtitleText)}}" spellcheck="true" onmouseup="    textAreaKeyUpAction(this, event);" onfocus="    textareaOnFocus(this, event);" ondblclick="    textareaDBLClick(this, event);" onselect="    textareaSelectAction(this, event)"></textarea>
                                </template>
                                <template is="dom-if" if="{{!HasErrorFlag(segments.subtitleEditableMode)}}">
                                    <div id$="{{segments.ObjId}}-trnscrptpertimeframe" class$="trnscrptpertimeframe subtitleTextArea  {{applyFontFamilyForSelectLanguage()}}" inner-h-t-m-l="{{convertTextAreaTextIntoDivText(segments.SubtitleText)}}" spellcheck="true" contenteditable="false" onfocus="event.stopPropagation();"></div>
                                </template>
                            </div>
                        </div>
                    </template>
                </template>
                <template is="dom-if" if="{{!HasData(subtitlesegments)}}">
                    <div class="nodatafound">No data found for this user.</div>
                </template>
            </div>
</template>
    <script type="text/javascript">
        Polymer({
            is: 'PFT-Subtitletextbar',

            properties: {
                subtitlesegments: {
                    type: Array,
                    notify: true,
                    value: []
                }
            },
            HasData: function (data) {
                if (data) {
                    if (data.length > 0) {
                        jQuery("li.export-settings, li.fix-settings").removeClass("disable-menu");
                        SubTitleModule.isSubtitleBoxAvailable = true;
                        return true;
                    }
                    else {
                        SubTitleModule.isSubtitleBoxAvailable = false;
                        return false;
                    }
                }
                else {
                    SubTitleModule.isSubtitleBoxAvailable = false;
                    return false;
                }
            },

            showHideErroMsg: function (data, subtitleEditableMode) {
                if (data) {
                    return (data.length && subtitleEditableMode == 0 > 0) ? true : false;
                }
                else {
                    return false;
                }
            },
            displayError: function (errArr) {
                errArr = updateSubtitleErrorValue(errArr);
                errorLen = errArr.length;
                return (errorLen) ? "diplay:inline-block;" : "display:none;";
            },
            errorCount: function (errArr) {
                errArr = updateSubtitleErrorValue(errArr);
                return errArr.length;
            },
            getMessages: function (errArr) {
                if (errArr.length) {
                    errArr = updateSubtitleErrorValue(errArr);
                    var spans = "";
                    errArr.forEach(function (text) {
                        spans += "<span class='style-scope pft-subtitletextbar'>" + text + "</span>";
                    });

                    return spans;

                } else {
                    return "";
                }
            },
            hasErrorClass: function (data) {
                if (data) {
                    return (data.length > 0) ? 1 : 0;
                }
                else {
                    return 0;
                }
            },
            hasSelectedClass: function (flag) {
                if (flag == 1) {
                    return 'selectedBoxColor';
                } else {
                    return '';
                }
            },
            HasErrorFlag: function (flag) {
                if (flag == 1) {
                    return true;
                } else {
                    return false;
                }
            },

            isEditModeOn: function (flag) {
                if (flag == 1) {
                    return "editModeOn";
                } else {
                    return "editModeOff";
                }
            },

            findTcTimeDifference: function (tcIn, tcOut) {
                return getSubTitleDurationInSecs(tcIn, tcOut).toFixed(3);
            },

            findCharPerSecond: function (subTitleText, tcIn, tcOut) {
                subTitleText = convertDivTextIntoTextarea(subTitleText);
                return getSubtitleSpeedCaption(subTitleText, tcIn, tcOut);
            },
            findDurError: function (subTitleText, tcIn, tcOut) {
                subTitleText = convertDivTextIntoTextarea(subTitleText);
                return getSubtitleDurationCaption(subTitleText, tcIn, tcOut);
            },

            convertDivTextIntoTextarea: function (subTitleText) {
                return convertDivTextIntoTextarea(subTitleText);
            },
            convertTextAreaTextIntoDivText: function (subTitleText) {
                return convertTextAreaTextIntoDivText(subTitleText);
            },
            getCharPerLine: function (subtitleText) {
                if (subtitleText != null) {
                    return charPerLine(subtitleText);
                } else {
                    return;
                }
            },
            displayIndex: function (index) {
                return index + 1;
            },
            hasErrorInCharPerSecond: function (data) {
                if (data) {
                    if (data.indexOf(MAX_CHAR_PER_SECOND_VOILATION_MSG) >= 0 || data.indexOf(MIN_CHAR_PER_SECOND_VOILATION_MSG) >= 0 ||
                        data.indexOf(MAX_WORD_PER_MINUTE_VOILATION_MSG) >= 0 || data.indexOf(MIN_WORD_PER_MINUTE_VOILATION_MSG) >= 0 ) {
                        return 'labelErrorCls';
                    }
                    return '';
                }
                else {
                    return '';
                }
            },
            hasErrorInDuration: function(data){
                if (data) {
                    if (data.indexOf(MAX_SUBTITLE_DURATION_VOILATION_MSG) >= 0 || data.indexOf(MIN_SUBTITLE_DURATION_VOILATION_MSG) >= 0) {
                        return 'labelErrorCls';
                    }
                    return '';
                }
                else {
                    return '';
                }
            },
            hasErrorInTotalCharLength: function (data) {
                if (data) {
                    if (jQuery.inArray(TOTAL_CHAR_LENGTH_PER_SUBTITLEBOX_VOILATION_MSG, data) >= 0) {
                        return 'labelErrorCls';
                    }
                    return '';
                }
                else {
                    return '';
                }
            },
            hasMinGapVoilation: function (data) {
                if (data) {
                    if (jQuery.inArray(GAP_VOILATION_MSG, data) >= 0) {
                        return '1';
                    }
                    return '0';
                }
                else {
                    return '0';
                }
            },

            hasErrorViewMode: function (param) {
                if (document.querySelector(".subtitleViewType").value == 'Error') {
                    return (param.length) > 0 ? 'showSubtitleWhenErrorView' : 'hideSubtitleWhenErrorView';
                } else {
                    return (param.length) > 0 ? 'hasError' : 'hasNoError';
                }
            },
            applyFontFamilyForSelectLanguage: function () {
                return GetFontFamilyForSelectLanguage();
            }
        });

    </script>

</dom-module>
<dom-module id="PFT-SubtitleSearch" assetpath="Components/Subtitle/">
    <template>
        <div class="subtitle-search-replace-wrapper">
            <div class="subtitle-search-replace-block">
                <div class="modal-header FL"><span class="heading FL">Find &amp; Replace</span> <span class="clear-cross FR" title="Close"></span></div>
                <div class="modal-body FL">
                    <div class="modal-row" style="z-index:3">
                        <div class="modal-col label"><label>Find</label></div>
                        <div class="modal-col field-wrap">
                            <div class="wrapField">
                                <input type="text" name="search" id="search" autocomplete="off">
                                <span class="searchOverlayBlock"></span>
                                <span class="found-count">0/0</span>
                                <span class="arrow clear-moveB showsearchOptions"></span>
                                <span class="searchOptions searchList">
                                    <ul class="searchListUL">
                                    </ul>
                                    <ul>
                                        <!--<li class="freeText">[Free Text]</li>-->
                                        <li class="profaneWords">[Profane Words]</li>
                                    </ul>
                                </span>
                            </div>
                        </div>
                        <div class="modal-col upDownBox">
                            <div class="leftBox move moveDown"><span class="arrow clear-moveB" title="Next"></span></div>
                            <div class="righttBox move moveUp"><span class="arrow clear-moveT" title="Previous"></span></div>
                        </div>
                    </div>

                    <div class="modal-row" style="z-index:2">
                        <div class="modal-col label"><label>Replace with</label></div>
                        <div class="modal-col field-wrap">
                            <div class="wrapField">
                                <input type="text" name="replaceWith" id="replaceWith" autocomplete="off">
                                <span class="arrow clear-moveB showsearchOptions"></span>
                                <span class="searchOptions">
                                    <ul>
                                        <li class="profaneExpression">[A***]</li>
                                    </ul>
                                </span>
                            </div>
                        </div>
                        <div class="modal-col upDownBox">
                            <div class="leftBox replaceBtn replace"><span title="Replace" class="clear-autorenew"></span></div>
                            <div class="rightBox replaceBtn replaceAll"><span title="Replace All" class="">All</span></div>
                        </div>
                    </div>

                    <div class="modal-row options-wrap">
                        <div class="modal-col label"></div>
                        <div class="modal-col field-wrap">
                            <div class="checkbox-wrap">
                                <input type="checkbox" name="matchCase" id="matchCase" class="option-checkbox"> <span class="checkmark"></span> <label for="matchCase">Match Case</label>
                            </div>
                            <div class="checkbox-wrap">
                                <input type="checkbox" name="matchWholeWord" id="matchWholeWord" class="option-checkbox"> <span class="checkmark"></span> <label for="matchWholeWord">Match Whole Word</label>
                            </div>
                            <div class="checkbox-wrap">
                                <input type="checkbox" name="preserveCase" id="preserveCase" class="option-checkbox"> <span class="checkmark"></span> <label for="preserveCase">Preserve Case</label>
                            </div>
                        </div>
                    </div>
                    
                </div>
            </div>
        </div>
    </template>
    <script type="text/javascript">
        Polymer({
            is: 'PFT-SubtitleSearch'
        });
     </script>
</dom-module><dom-module id="PFT-SubtitleAlign" assetpath="Components/Subtitle/">
    <template>
        <div id="SubtitleAlignWrapper" class="subtitle-align-wrapper">
            <div class="modal-header FL subtitle-align-header">
                <div class="heading FL">Align</div>
                <div class="clear-cross subtitle-align-close FR" onclick="closeDraggablePopup('#SubtitleAlignWrapper');"></div>
            </div>
            <div class="modal-body FL subtitle-align-positions">
                <div class="subtitle-align-position seven box-border left2" data-xpos="left" data-ypos="2" onclick="setSubtitlePosition(this, event)"><span>7</span></div>
                <div class="subtitle-align-position eight center2" data-xpos="center" data-ypos="2" onclick="setSubtitlePosition(this, event)"><span>8</span></div>
                <div class="subtitle-align-position nine box-border right2" data-xpos="right" data-ypos="2" onclick="setSubtitlePosition(this, event)"><span>9</span></div>
                <div class="subtitle-align-position four box-border left8" data-xpos="left" data-ypos="8" onclick="setSubtitlePosition(this, event)"><span>4</span></div>
                <div class="subtitle-align-position five center8" data-xpos="center" data-ypos="8" onclick="setSubtitlePosition(this, event)"><span>5</span></div>
                <div class="subtitle-align-position six box-border right8" data-xpos="right" data-ypos="8" onclick="setSubtitlePosition(this, event)"><span>6</span></div>
                <div class="subtitle-align-position one box-border left13" data-xpos="left" data-ypos="13" onclick="setSubtitlePosition(this, event)"><span>1</span></div>
                <div class="subtitle-align-position two center13" data-xpos="center" data-ypos="13" onclick="setSubtitlePosition(this, event)"><span>2</span></div>
                <div class="subtitle-align-position three box-border right13" data-xpos="right" data-ypos="13" onclick="setSubtitlePosition(this, event)"><span>3</span></div>
            </div>
        </div>
    </template>
    <script type="text/javascript">
        Polymer({
            is: 'PFT-SubtitleAlign'
        });
    </script>
</dom-module><dom-module id="PFT-SubtitleOffset" assetpath="Components/Subtitle/">
    <template>
        <div id="SubtitleOffsetWapper" class="subtitle-offset-wrapper">
            <div class="modal-header FL subtitle-align-header">
                <div class="heading FL">Offset Subtitle</div>
                <div class="clear-cross subtitle-align-close FR" onclick="closeDraggablePopup('#SubtitleOffsetWapper');"></div>
            </div>
            <div class="modal-body FL setOffsetWrapper">
                <div id="SubtitleOffsetFrameOrSec" class="form-group wrapFields st-width100">
                    <label for="setOffset">Offset by</label>
                    <input type="text" id="offset_frames" name="offset_frames" title="Enter only integer value" data-target="Offset-Ok" onkeydown="offsetKeyDownEvent(this, event)" autocomplete="off">
                    <label id="labelOffsetFrameOrSec" for="offsetframe">Frame(s)</label>
                </div>
                <div class="form-group wrapFields st-width100 CustomCheckDiv">
                    <label for=""></label>
                    <input type="checkbox" id="playerPosition" name="playerPosition" onchange="offsetToPlayerPosition(this, event)" style="display:none">
                    <label class="CustomCheckLbl style-scope" for="playerPosition">Offset to current video position</label>
                </div>
                <div class="form-group wrapFields st-width100">
                    <div class="st-inline-block"><label for="setOffset">Offset Selected</label></div>
                    <div class="st-inline-block tg-list-item">
                        <input class="tgl tgl-light" id="offset-to" type="checkbox" onchange="event.stopPropagation()">
                        <label class="tgl-btn" for="offset-to" onclick="event.stopPropagation()"></label>
                    </div>
                    <div class="st-inline-block"><label id="offset-to-message">Offset All</label></div>
                </div>
                <input type="hidden" id="offset-from" value="">
                <input type="hidden" id="offset-till" value="">
            </div>
            <div class="modal-footer FL">
                <div class="modal-btn" title="Cancel" id="Offset-Cancel" onclick="offsetButtonClickAction('cancel')">Cancel</div>
                <div class="modal-btn" title="Ok" id="Offset-Ok" onclick="offsetButtonClickAction('ok')">Ok</div>
                <div class="clr"></div>
            </div>
    </div></template>
    <script type="text/javascript">
        Polymer({
            is: 'PFT-SubtitleOffset'
        });
    </script>
</dom-module><dom-module id="PFT-CreateImportSubtitle" assetpath="Components/Subtitle/">
    <template>
        <div class="createImportPanel" onhover="">
            <span class="clear-add subtitlePlusSign" onclick="createNewAndChooseLanguage()"></span>
            <span class="createImportText" onclick="createNewAndChooseLanguage()">Create New</span>
        </div>
    </template>
    <script type="text/javascript">
        Polymer({
            is: 'PFT-CreateImportSubtitle',
            ready: function () {              
                if (SubTitleModule.launchPoint == "WOM") {
                    setTimeout(function () { jQuery("div.createImportPanel").addClass("noHover"); }, 200);
                }
            },
        });

    </script>

</dom-module>

<dom-module id="PFT-SubtitleTranslateSourcePanel" assetpath="Components/Subtitle/">
    <template>
        <template is="dom-if" if="{{HasData(subtitleData)}}">
            <template is="dom-repeat" items="{{subtitleData}}" as="subtitledata">
                <div class="userSubtitlePanel">
                        <pft-translatesourcesubtitles subtitlesegments="{{subtitledata.Subtitle}}"></pft-translatesourcesubtitles>
                    </div>
            </template>
        </template>       
    </template> 
    <script type="text/javascript">
        Polymer({
            is: 'PFT-SubtitleTranslateSourcePanel',
            properties: {
                subtitleData:
                    {
                        type: Array,
                        notify: true,
                        value: function () {
                            return [];
                        }
                    }
            },
            HasData: function (data) {
                if (data) {
                    if (data.length > 0) {                        
                        return true;
                    } else {
                        return false;
                    }
                }
                else {                    
                    return false;
                }
            },         
            
            launchPoint: function (UserId) {
                if (jQuery('#launchPoint').val().toLowerCase() != 'library' && UserId == jQuery('#usrId').val())
                return true;
            },

            timeInMins: function(tcIn, tcOut){
                return calculateTimeInMins(tcIn, tcOut).toFixed(2);
            },
            
            isLoggedInUser: function (UserId) {
                if (UserId == jQuery('#usrId').val()) {
                    return "logged-user";
                } else {
                    return "non-loggedin-user";
                }
                   
            }
        });
    </script>

</dom-module>
<dom-module id="PFT-TranslateSourceSubtitles" assetpath="Components/Subtitle/">
    <template>
        <div class="panel">
            <template is="dom-if" if="{{HasData(subtitlesegments)}}">
                <template is="dom-repeat" items="{{subtitlesegments}}" as="segments" index-as="o_index" initial-count="10" target-framerate="10">
                    <div class="sourceSubtitleBox">                        
                        <div class="timeframe">
                            <div class="frameInfoLeft FL">            
                                <span class="frameno">{{segments.Position}}</span>                                                   
                                <span class="timeframerange">
                                    <span class="stTimeIn spanstTimeIn" inner-h-t-m-l="{{convertToSettingBasedFormat(segments.TcIn)}}" style="display: inline;"></span>/
                                    <span class="stTimeOut spanstTimeOut" inner-h-t-m-l="{{convertToSettingBasedFormat(segments.TcOut)}}"></span>
                                </span>

                                <span class$="charpersec durErrorPolymer {{hasErrorInDuration(segments.errorMsg)}}">{{findDurError(segments.SubtitleText, segments.TcIn, segments.TcOut)}}</span>
                                <span class$="charpersec charpersecPolymer {{hasErrorInCharPerSecond(segments.errorMsg)}}">{{findCharPerSecond(segments.SubtitleText, segments.TcIn, segments.TcOut)}}</span>
                                <span class="charperlinePolymer charperline {{hasErrorInTotalCharLength(segments.errorMsg)}}">{{getCharPerLine(segments.SubtitleText)}}</span>
                            </div>
                            <div class="frameInfoRight FR">
                                <div class="keyupErrMsg" style="{{displayError(segments.errorMsg.length)}}">
                                    <span class="clear-error subActions FR st-tooltip-wrapper tool-info project-setting-error subActionsKeyup">
                                        <span class="subtitle-tool-tip-popup project-setting-error-popup keyupErrMsgSpan" data-ismingapvoilation$="{{hasMinGapVoilation(segments.errorMsg)}}" inner-h-t-m-l="{{getMessages(segments.errorMsg)}}">
                                        </span>
                                    </span>
                                    <span class="voilationMsgCount labelErrorCls FR voilationMsgCountKeyup" inner-h-t-m-l="{{segments.errorMsg.length}}"></span>
                                </div>

                                <template is="dom-if" if="{{showHideErroMsg(segments.errorMsg,segments.subtitleEditableMode)}}">
                                    <div class="keyupErrMsg-edit">
                                        <span class="clear-message subActions FR"></span>
                                        <span class="clear-error subActions FR st-tooltip-wrapper tool-info project-setting-error">
                                            <span class="subtitle-tool-tip-popup project-setting-error-popup errMsgPolymer">
                                                <template is="dom-repeat" items="{{segments.errorMsg}}" as="errorMsg"><span>- {{errorMsg}}</span></template>
                                            </span>
                                        </span>
                                        <span class="voilationMsgCount labelErrorCls FR">{{segments.errorMsg.length}}</span>
                                    </div>
                                </template>
                            </div>
                        </div>
                        <div class="editableSubtitlebox">
                            <div class$="trnscrptpertimeframe subtitleTextArea  {{applyFontFamilyForSelectLanguage()}}" inner-h-t-m-l="{{convertTextAreaTextIntoDivText(segments.SubtitleText)}}"></div>
                        </div>
                </div></template>
            </template>
            <template is="dom-if" if="{{!HasData(subtitlesegments)}}">
                <div class="nodatafound">No data found.</div>
            </template>
        </div>
    </template>
    <script type="text/javascript">
        Polymer({
            is: 'PFT-TranslateSourceSubtitles',

            properties: {
                subtitlesegments: {
                    type: Array,
                    notify: true,
                    value: []
                }
            },
            HasData: function (data) {
                if (data) {
                    if (data.length > 0) {                       
                        return true;
                    }
                    else {                        
                        return false;
                    }
                }
                else {
                    return false;
                }
            },

            showHideErroMsg: function (data, subtitleEditableMode) {
                if (data) {
                    return (data.length && subtitleEditableMode == 0 > 0) ? true : false;
                }
                else {
                    return false;
                }
            },
            displayError: function (errorLen) {
                return (errorLen) ? "diplay:inline-block;" : "display:none;";
            },
            getMessages: function (errArr) {
                if (isArray(errArr) && errArr.length) {
                    var spans = "";
                    errArr.forEach(function (text) {
                        spans += "<span class='style-scope pft-subtitletextbar'>" + text + "</span>";
                    });

                    return spans;

                } else {
                    return "";
                }
            },
            hasErrorClass: function (data) {
                if (data) {
                    return (data.length > 0) ? 1 : 0;
                }
                else {
                    return 0;
                }
            },
            hasSelectedClass: function (flag) {
                if (flag == 1) {
                    return 'selectedBoxColor';
                } else {
                    return '';
                }
            },
            HasErrorFlag: function (flag) {
                if (flag == 1) {
                    return true;
                } else {
                    return false;
                }
            },

            isEditModeOn: function (flag) {
                if (flag == 1) {
                    return "editModeOn";
                } else {
                    return "editModeOff";
                }
            },

            findTcTimeDifference: function (tcIn, tcOut) {
                return getSubTitleDurationInSecs(tcIn, tcOut).toFixed(3);
            },

            findCharPerSecond: function (subTitleText, tcIn, tcOut) {
                subTitleText = convertDivTextIntoTextarea(subTitleText);
                return getSubtitleSpeedCaption(subTitleText, tcIn, tcOut);
            },
            findDurError: function (subTitleText, tcIn, tcOut) {
                subTitleText = convertDivTextIntoTextarea(subTitleText);
                return getSubtitleDurationCaption(subTitleText, tcIn, tcOut);
            },

            convertDivTextIntoTextarea: function (subTitleText) {
                return convertDivTextIntoTextarea(subTitleText);
            },
            convertTextAreaTextIntoDivText: function (subTitleText) {
                return convertTextAreaTextIntoDivText(subTitleText);
            },
            getCharPerLine: function (subtitleText) {
                if (subtitleText != null) {
                    return charPerLine(subtitleText);
                } else {
                    return;
                }
            },
            displayIndex: function (index) {
                return index + 1;
            },
            hasErrorInCharPerSecond: function (data) {
                if (data) {
                    if (data.indexOf(MAX_CHAR_PER_SECOND_VOILATION_MSG) >= 0 || data.indexOf(MIN_CHAR_PER_SECOND_VOILATION_MSG) >= 0 ||
                        data.indexOf(MAX_WORD_PER_MINUTE_VOILATION_MSG) >= 0 || data.indexOf(MIN_WORD_PER_MINUTE_VOILATION_MSG) >= 0 ) {
                        return 'labelErrorCls';
                    }
                    return '';
                }
                else {
                    return '';
                }
            },
            hasErrorInDuration: function(data){
                if (data) {
                    if (data.indexOf(MAX_SUBTITLE_DURATION_VOILATION_MSG) >= 0 || data.indexOf(MIN_SUBTITLE_DURATION_VOILATION_MSG) >= 0) {
                        return 'labelErrorCls';
                    }
                    return '';
                }
                else {
                    return '';
                }
            },
            hasErrorInTotalCharLength: function (data) {
                if (data) {
                    if (jQuery.inArray(TOTAL_CHAR_LENGTH_PER_SUBTITLEBOX_VOILATION_MSG, data) >= 0) {
                        return 'labelErrorCls';
                    }
                    return '';
                }
                else {
                    return '';
                }
            },
            hasMinGapVoilation: function (data) {
                if (data) {
                    if (jQuery.inArray(GAP_VOILATION_MSG, data) >= 0) {
                        return '1';
                    }
                    return '0';
                }
                else {
                    return '0';
                }
            },

            hasErrorViewMode: function (param) {
                if (document.querySelector(".subtitleViewType").value == 'Error') {
                    return (param.length) > 0 ? 'showSubtitleWhenErrorView' : 'hideSubtitleWhenErrorView';
                } else {
                    return (param.length) > 0 ? 'hasError' : 'hasNoError';
                }
            },
            applyFontFamilyForSelectLanguage: function () {
                return GetFontFamilyForSelectLanguage();
            },
            convertToSettingBasedFormat: function (timecode) {
                return switchOperationObj.convertToSettingBasedFormat(timecode);
            }
        });

    </script>

</dom-module>
<dom-module id="PFT-Header" assetpath="Components/">
    <template>
        <div class="HeaderContainer" id="HeaderContainer">
            <table id$="{{tId}}" class$="{{tClass}}">
                <tbody><tr>
                    <template is="dom-if" if="{{GetCheckboxClass(checkboxClass)}}">
                        <th class="chckbox" rowspan="3">
                            <div id="checkAllBoxDiv" class="SelectBox SelectAllBox"><input id="checkAllBox" type="checkbox" on-tap="AlterCheckboxState"><label for="checkAllBox"></label></div>
                        </th>
                    </template>

                    <template is="dom-repeat" items="{{headerData}}" as="headerVal" index-as="h_index">
                        <template is="dom-if" if="{{CheckGroupName(headerVal.GroupName)}}">
                            <th class$="{{headerVal.GroupCss}}" colspan$="{{headerVal.GroupValue.length}}">
                                {{headerVal.GroupName}}
                            </th>
                        </template>
                    </template>

                    <template is="dom-repeat" items="{{headerData}}" as="headerVal" index-as="h_index">
                        <template is="dom-repeat" items="{{headerVal.GroupValue}}" as="headerGroups" index-as="h_index">
                            <template is="dom-if" if="{{!CheckIfWorkflowInstanceHeader(headerGroups.headerName,'false')}}">
                                <th class$="{{GetHeaderClass(h_index)}}">
                                    <div class$="{{headerGroups.headerCss}}" on-click="LoadHeaderAttributes">{{headerGroups.headerName}}</div>
                                </th>
                            </template>
                            <template is="dom-if" if="{{CheckIfWorkflowInstanceHeader(headerGroups.headerName,'true')}}">
                                <th class="progressStatusCol">
                                    <ul class="statusbarWrapper">
                                        <template is="dom-repeat" items="{{headerGroups.headerValues}}" as="wfHeaderValue" index-as="o_index">
                                            <li class$="statuBarli {{wfHeaderValue.headerCss}}">{{wfHeaderValue.headerName}}</li>
                                        </template>
                                    </ul>
                                </th>
                            </template>
                        </template>
                    </template>
                    <template is="dom-if" if="{{isChevron}}">
                        <th class="progressStatusColchevron">
                        </th>
                    </template>
                </tr>
            </tbody></table>
        </div>
    </template>

    <script>
        Polymer({

            is: 'PFT-Header',

            properties: {
                headerData: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                data: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                id: {
                    type: String
                },
                class: {
                    type: String
                },
                tId: {
                    type: String
                },
                tClass: {
                    type: String
                },
                checkboxClass: {
                    type: String
                },
                groupName: {
                    type: String
                },
                functionName: {
                    type: String
                },
                functionParams: {
                    type: String,
                    value: "e"
                },
                isChevron: {
                    type: Boolean,
                    value: false
                }
            },
            GetCheckboxClass: function (checkboxClass) {
                if (checkboxClass == "true")
                    return true;
                else
                    return false;
            },
            CheckGroupName: function (groupName) {
                if (groupName != "")
                    return true;
                else
                    return false;
            },
            GetHeaderClass: function (headerIndex) {
                if (headerIndex < 6) {
                    return "column" + (headerIndex + 1);
                }
                else
                    return "progressStatusTD";
            },
            AlterCheckboxState: function () {
                this.domHost.checkUncheckAllCheckbox();
            },
            CheckIfWorkflowInstanceHeader: function (headerName, isWfInstanceCol) {
                this.isChevron = this.dataHost.dashboardType == "chevron" ? true : false;
                if (headerName && headerName.toLowerCase() == "workflowinstance" && ((isWfInstanceCol == 'true' && this.dataHost.dashboardType != "chevron") || isWfInstanceCol == 'false'))
                    return true;
                else
                    return false;
            },
            LoadHeaderAttributes: function (e) {
                if (typeof loadAttributes === "function") {
                    var componentId = e.target.textContent.replace('HD', 'idHeader');
                    loadAttributes(componentId, "pft-header", "headerName;headerCss");
                }
            }
        });
    </script>
</dom-module><dom-module id="PFT-EssenceUpload" assetpath="Components/">
    <template>
        <template is="dom-if" if="{{Validation(rowData)}}">
            <div id="essUpld" class$="actionDivWrap {{hideClass}}">
                <div class="actionDiv">
                    <pft-text title="{{title}}" cssclass-name="{{cssClass}}" action="{{SetClickAttribute(rowData,uploadonWo,isTaskExecutable)}}" value="{{label}}"></pft-text>
                </div>
            </div>
        </template>
    </template>
    <script>
        Polymer({

            is: 'PFT-EssenceUpload',

            properties: {
                rowData: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                isTaskExecutable: {
                    type: Boolean,
                    value: false
                },
                hideClass: {
                    type: String,
                    value: ""
                },
                uploadonWo: {
                    type: String,
                    value: "false"
                },
                cssClass: {
                    type: String,
                    computed: 'getCssClass(rowData,isTaskExecutable)'
                },
                title: {
                    type: String,
                    computed: 'getToolTip(rowData,isTaskExecutable)'
                },
                label: {
                    type: String,
                    computed: 'getLabel(rowData)'
                }

            },
            Validation: function (rowData) {
                if (rowData != undefined && rowData != "" && rowData.StdAttributes != undefined) {
                    if ((rowData.StdAttributes.S_WO_ID != undefined && rowData.StdAttributes.S_WO_ID != "") ||
                         (rowData.StdAttributes.WorkorderId != undefined && rowData.StdAttributes.WorkorderId != "") ||
                         (rowData.StdAttributes.taskId != undefined && rowData.StdAttributes.taskId != "")) {
                        var assignmentDetails = this.getAssignmentDetailsFromRowData(rowData);
                        if ((!rowData.StdAttributes.StatusAcronym ||
                            IsValidateTaskAction(JSON.parse(assignmentDetails), rowData.StdAttributes.StatusAcronym)))
                            this.isTaskExecutable = true;
                        else
                            this.isTaskExecutable = false;
                        return true;
                    }
                    else
                        return false;
                }
                return false;
            },
            SetClickAttribute: function (rowData, uploadonWO, isTaskExecutable) {
                var woId = '';
                var taskId = '';
                var objTenantId = '';
                var objId = '';
                var taskAssignmentDetails = '';
                var statusAcronym = '';
                var woStatus = '';
                var taskTitle = '';
                var taskTenantId = '';
                if (rowData.StdAttributes.S_WO_ID != undefined && rowData.StdAttributes.S_WO_ID != "") {
                    woId = rowData.StdAttributes.S_WO_ID;
                    woStatus = rowData.StdAttributes.S_STATUS;
                }
                else
                    woId = rowData.StdAttributes.WorkorderId;
                if (rowData && rowData.StdAttributes.TaskId != undefined && rowData.StdAttributes.TaskId != "") {
                    /*For Task Dashboards*/
                    taskId = rowData.StdAttributes.TaskId;
                    var assignmentDetailsJson = this.getAssignmentDetailsFromRowData(rowData);
                    taskAssignmentDetails = GetAssignmentDetails(assignmentDetailsJson);
                    statusAcronym = rowData.StdAttributes.StatusAcronym;
                }
                if (rowData && rowData.StdAttributes.ObjTenantId != undefined && rowData.StdAttributes.ObjTenantId != "") {                    
                    objTenantId = rowData.StdAttributes.ObjTenantId;
                }
                if (rowData.StdAttributes.ObjTenantId != undefined && rowData.StdAttributes.ObjTenantId != "")
                    objId = rowData.StdAttributes.S_DMGUID;

                if (rowData && rowData.PFTRow && rowData.PFTRow[0].PFTColumn)
                    taskTitle = rowData.PFTRow[0].PFTColumn[1].PFTCell[0].Value
                else if (rowData && rowData.Attributes){
                    if(rowData.Attributes.TaskTitle)
                        taskTitle = rowData.Attributes.TaskTitle;
                    else if(rowData.Attributes.Title)
                        taskTitle = rowData.Attributes.Title;
                    else if(rowData.Attributes.MAINTITLE)
                        taskTitle = rowData.Attributes.MAINTITLE;
                }
                if (rowData && rowData.StdAttributes.TaskTenantId)
                    taskTenantId = rowData.StdAttributes.TaskTenantId;
                var actionValue = "HandleClick('', '', 'LaunchSubtitleIngestTool', 'workOrderId+" + woId + "&&woStatus+" + woStatus + "&&objTenantId+" + objTenantId + "&&objId+" + objId + "&&taskId+" + taskId + "&&taskAssignmentDetails+" + taskAssignmentDetails + "&&statusAcronym+" + statusAcronym + "&&uploadonWO+" + uploadonWO + "&&taskTitle+" + base64EncodingUTF8(taskTitle) + "&&taskTenantId+" + taskTenantId + "', this)";
                return actionValue;
            },
            getCssClass: function (rowData, isTaskExecutable) {
                var cssClass = '';
                if (rowData && rowData.StdAttributes && rowData.StdAttributes.TaskId != undefined && rowData.StdAttributes.TaskId != "") {
                    cssClass = "subtitleuploadwrap uploadIcon clearupload";
                    if (!isTaskExecutable)
                        cssClass += " disableAction";
                }
                else
                    cssClass = "woAttachmentWrap clearlink";
                return cssClass;
            },
            getToolTip: function (rowData, isTaskExecutable) {
                var toolTip = "Click here to Upload";
                if (rowData && rowData.StdAttributes && rowData.StdAttributes.TaskId != undefined && rowData.StdAttributes.TaskId != "" && !isTaskExecutable)
                    toolTip = GetTaskTooltips("PICKTASK");
                return toolTip;
            },
            getAssignmentDetailsFromRowData: function (rowData) {
                return GetTaskAssignmentObject(rowData);
            },
            getLabel: function (rowData) {
                var label = '';
                if (rowData && rowData.StdAttributes && rowData.StdAttributes.TaskId != undefined && rowData.StdAttributes.TaskId != "")
                    label = "Upload";
                else
                    label = "Attach";
                return label;
            }
        });
    </script>
</dom-module>
<dom-module id="PFT-DueDate" assetpath="Components/">
    <template>
        <div class="clear-calendar_img dDtWrap">
            <div class="dDtWrapGroup">
                <div class="dDtYear"><pft-date cssclass-name="timeClass" date="{{dueDate}}" format="YYYY" tooltip-format="YYYY"></pft-date></div>
                <div class="dDtDay"><pft-date cssclass-name="timeClass" date="{{dueDate}}" format="dd MMM" tooltip-format="dd MMM"></pft-date></div>
                <div class="dDtTime"><pft-date cssclass-name="timeClass" date="{{dueDate}}" format="hhh:nn" tooltip-format="hhh:nn"></pft-date></div>
            </div>
        </div>
    </template>

    <script>
        Polymer({
            is: "PFT-DueDate",
            attached: function () {
            },
            properties: {
                dueDate: {
                    type: String,
                    value: function () {
                        return "";
                    }
                },
                prevDueDate: {
                    type: String,
                    value: function () {
                        return "";
                    }
                },
                completionStatus: {
                    type: String,
                    value: function () {
                        return "";
                    }
                }
            },
            DateFormat: function (date, dateFormat) {
                var currentDate = new Date();
                var dueDate = new Date(date);
                var nextDay = new Date(currentDate.getTime() + (1 * 24 * 60 * 60 * 1000));
                if (dueDate.toDateString() == currentDate.toDateString())
                    return "Today";
                else if (dueDate.toDateString() == nextDay.toDateString())
                    return "Tomorrow";
                else
                    return Date_Format(date, dateFormat);
            },
            computeDueDateClass: function (dueDate, prevDue, completionStatus) {
                return "";
                if (!dueDate || (completionStatus && completionStatus.toUpperCase() == "TRUE"))
                    return "";
                var cssClass = "";
                var latestDueDate = dueDate ? new Date(dueDate) : "";
                var prevDueDate = prevDue ? new Date(prevDue) : "";
                var curDate = new Date($jq('#serverStandardTime').val());
                cssClass = latestDueDate >= curDate ? !prevDue ? "" : "dueDateChanged" : "dueDateOverDue";
                return cssClass;
            },
            getTitle: function (dueDate, prevDue, completionStatus, format) {
                var formattedDate = DateFormat(dueDate, format);
                return formattedDate;
                var cssClass = this.computeDueDateClass(dueDate, prevDue, completionStatus);
                if (!cssClass)
                    return formattedDate;
                else
                    return cssClass.toUpperCase() == "DUEDATECHANGED" ? "Due Date changed from " + DateFormat(prevDue, 'ddd\, dd MMM') + " to " + formattedDate : "Over Due " + formattedDate;
            }
        });
    </script>
</dom-module><dom-module id="PFT-Chart" assetpath="Components/">
    <template>
        <div id$="chartTitle_{{id}}" class="chartTitle posRel" getchartconfig="{{getChartConfiguration(chartconfig)}}"></div>
        <template is="dom-if" if="{{isChartFilterRequired(chartconfig)}}">
            <div class="chartFilterContainer">
                <pft-chartfilter id$="chartFilter_{{id}}" chartfilterconfig="{{chartconfig}}"></pft-chartfilter>
            </div>
        </template>
        <div id$="chartRender_{{id}}"></div>
    </template>
    <script>
        Polymer({
            is: "PFT-Chart",
            attached: function () {
                this.displayChartArea();
                this.async(function () {
                    if (this.chartconfig == null || this.chartconfig.length != 0) {
                        ChartManager.getChartData(this.id, this.chartconfig);
                        if (this.chartconfig != null && this.chartconfig.length != 0)
                            this.chartconfig.caption = decodeURIComponent(this.chartconfig.caption);
                    }
                });

                var timer = localStorage.getItem("refreshChartsTimer");
                if (timer)
                    clearInterval(timer);
                localStorage.setItem("refreshChartsTimer", setInterval(WOM_RefreshCharts, 600000));
            },
            properties: {
                chartconfig: {
                    type: Object
                },
                id: {
                    type: String,
                    value: 0
                }
            },
            displayChartArea: function () {
                if ($jq('.lhsGrid').hasClass('setWide') || $jq('.lhsGridWO').hasClass('setWide')) {
                    $jq('.lhsGrid').removeClass('setWide');
                    $jq('.lhsGridWO').removeClass('setWide');
                }
                $jq('#openChart').css("display", "block");
            },
            getChartConfiguration: function (chartconfig) {
                if (chartconfig && chartconfig.length > 0) {
                    chartConfig = ChartManager.getChartConfiguration(this.id, chartconfig)
                    this.chartconfig = chartConfig;
                }
            },
            isChartFilterRequired: function (chartconfig) {
                if (chartconfig && chartconfig != "") {
                    return ChartManager.isChartFilterRequired(chartconfig);
                }
            },
            renderChartData: function (actualData) {
                ChartManager.renderChart(actualData, 'chartRender_' + this.id, this.id, this.chartconfig);
            }
        });
    </script>
</dom-module>
<dom-module id="PFT-ChartFilter" assetpath="Components/">
    <template>
        <div class="chartFltrContWrapper">
            <div id$="chartFilterContainer-{{id}}" class="chartFltrCont posRel" style="display:none;">
                <div id$="chartFilterLabel-{{id}}" class="chartFilterLabel FL" style="display:none;">{{chartFilterTitle(chartfilterconfig)}}</div>
                <div id$="chartFilterIcon-{{id}}" class="chartFilterIcon clear-filter FL" on-tap="showChartFilterDetails">
                </div>
                <div class="clr"></div>
                <ul id$="chartFilterPanel-{{id}}" class="chartFilterPanel" style="display:none;">
                    <template is="dom-repeat" items="{{chartfilterconfig.chartFilter}}" as="filterObj">
                        <template is="dom-if" if="{{checkRangeFilter(filterObj)}}">
                            <li id="chartDateRange_Callout" class="dateRangeCallout">
                                <div id="chartDateRange_Title" class="chartDateRangeTitle">{{filterObj.DisplayName}}</div>
                                <div id="chartDateRange_Left" class="dateRangeWrapper dateRangeLeft">
                                    <span id="chartDateRange_From" class="dateRangeLabel">From :</span>
                                    <input id="chartDateRange_Input" type="text" class="dateRangeValueField" placeholder="Select">
                                    <span id="chartDateRange_ChooseDate" class="clear-calender chartRangeCalendar"></span>
                                </div>
                                <div id="chartDateRange_Right" class="dateRangeWrapper dateRangeRight">
                                    <span id="chartDateRange_To" class="dateRangeLabel">To :</span>
                                    <input id="chartDateRangeDropDown_Field" class="dateRangeValueField" on-tap="showDateRangeOptions" placeholder="Select">
                                    <span id="chartDateRangeDropDown_Icon" class="chartDropDownIcon clear-moveB" on-tap="showDateRangeOptions"></span>
                                    
                                    <ul class="dateRangeRightDD" id="chartDateRange_ChooseSpanDropDown" style="display:none;">
                                        <li id="chartDateRange_Select" class="chooseChartSpan" on-tap="getDateSpan">Select</li>
                                        <li id="chartDateRange_Span" class="chooseChartSpan" on-tap="getDateSpan"><span id="chartDateRange_ChartDate" class="clear-calender chartRangeCalendar"></span> Date</li>
                                        <template is="dom-repeat" items="{{filterObj.Value}}" as="spanObj">
                                            <li id$="chartDateRange_{{setDateSpanId(spanObj.Span)}}" on-tap="getDateSpan" class="chooseChartSpan" xyz="{{spanObj.Span}}" value="{{spanObj.Span}}">{{spanObj.Span}}</li>
                                        </template>
                                    </ul>
                                </div>
                            </li>
                            <div id="chartDateRange_chartFooter" class="chartFilterFooter">
                                <div id="chartRange_Apply" class="newActionApplyBtn FR" title="Click here to Apply" on-tap="applyChartFilters">Apply</div>
                                <div id="chartDateRange_Reset" class="newActionBtn FR marR10" title="Click here to Reset" on-tap="resetChartFilters">Reset</div>
                                <!--<div class="newActionBtn FL closePanelBtn" title="Click here to Close" on-tap="closeFilterPanel">Close</div>-->
                                <div class="clr"></div>
                            </div>
                        </template>
                        <template is="dom-if" if="{{!checkRangeFilter(filterObj)}}">
                            <li class="chartFilterDiv" on-tap="getChartFilterData">
                                <span id$="chartFilterValue-{{id}}" class="chartFilterValue" value="{{filterObj.Value}}">
                                    {{filterObj.DisplayName}}
                                </span>
                            </li>
                        </template>
                    </template>
                </ul>
            </div>
            <div class="clr"></div>
        </div>
        <div class="clr"></div>
    </template>
    <script>
        Polymer({
            is: "PFT-ChartFilter",
            attached: function () {
            },
            properties: {
                chartfilterconfig: {
                    Type: Object
                },
                id: {
                    type: String,
                    value: 0
                },
                defaultChartRangeFilter: {
                    type: String,
                    value: 0
                },
                selectedChartFilter: {
                    type: String,
                    value: 0
                },
                appliedChartFilter: {
                    type: String,
                    value: 0
                }
            },
            showChartFilterDetails: function () {
                document.body.addEventListener('click', hideChartFilter, false);
                initializeDateTimeCalendarV2ById("chartDateRange_ChooseDate", "chartDateRange_Input", '%d %b %Y', false, null, false, false, false, showChartDateRange, null);
                initializeDateTimeCalendarV2ById("chartDateRange_Span", "chartDateRangeDropDown_Field", '%d %b %Y', false, null, false, false, false, showChartDateRange, null);
                if (!this.chartfilterconfig.defaultChartFilter || this.chartfilterconfig.defaultChartFilter[0].Type.toUpperCase() == "DATERANGE") {
                    if (!$jq('#chartDateRange_Input').val() || this.appliedChartFilter == 0)
                        $jq('#chartDateRange_Input').val(this.defaultChartRangeFilter.split('|')[0]);
                    if (!$jq('#chartDateRangeDropDown_Field').val() || this.appliedChartFilter == 0)
                        $jq('#chartDateRangeDropDown_Field').val(this.defaultChartRangeFilter.split('|')[1]);
                    $jq('#chartDateRange_Input').removeClass('dateRangeValueFieldError');
                    if (this.appliedChartFilter) {
                        $jq('#chartDateRange_Input').val(this.appliedChartFilter.split('|')[0]);
                        $jq('#chartDateRangeDropDown_Field').val(this.appliedChartFilter.split('|')[1]);
                    }
                }
                else if (!$jq('#chartDateRange_Input').val() && this.chartfilterconfig.defaultChartFilter[0].Type.toUpperCase() == "DATE")
                    $jq('#chartDateRangeDropDown_Field').val("Select");
                $jq('#chartDateRangeDropDown_Field').on('change', function () {
                    showChartDateRange();
                });
            },
            getChartFilterData: function (e) {
                var filter = e.model.__data__;
                if (filter && filter.filterObj)
                    document.getElementById("chartFilterLabel-"+this.id).innerHTML = filter.filterObj.DisplayName;
                ChartManager.getChartData(this.domHost.id, this.domHost.chartconfig, filter.filterObj);
            },
            checkRangeFilter: function (filterObj) {
                if (filterObj.Type.toUpperCase() == "DATERANGE")
                    return true;
                else
                    return false;
            },
            getDateSpan: function (event) {
                var existingDateTo = $jq("#chartDateRangeDropDown_Field");
                var newDateTo = $jq('#' + event.target.id);
                if (newDateTo.text().toUpperCase().trim(" ") != "DATE" && existingDateTo.val().toUpperCase() != newDateTo.text().toUpperCase()) {
                    existingDateTo.val(newDateTo.text());
                    existingDateTo.text(newDateTo.text());
                    existingDateTo.trigger('change');
                }
                this.async(function () {
                    $jq('#chartDateRange_ChooseSpanDropDown').hide();
                }, 1);
            },
            showDateRangeOptions: function () {
                document.body.addEventListener('click', hideChartRangeDropDown, false);
            },
            setDateSpanId: function (value) {
                var id = value.split(' ')[2];
                return id;
            },
            applyChartFilters: function (e) {
                if (!$jq('#chartDateRange_Input').val()) {
                    $jq('#chartDateRange_Input').addClass('dateRangeValueFieldError');
                    return;
                }
                if (!$jq('#chartDateRange_Input').hasClass('dateRangeValueFieldError')) {
                    this.chartfilterconfig.chartFilter[0].Value = this.selectedChartFilter;
                    this.appliedChartFilter = this.selectedChartFilter;
                    //  document.getElementById("chartFilterLabel-" + this.id).innerHTML = this.chartFilterTtl != "" ? this.chartFilterTtl : this.selectedChartFilter.replace('|', ' - ');
                    ChartManager.getChartData(this.domHost.id, this.domHost.chartconfig, this.chartfilterconfig.chartFilter[0]);
                }
            },
            resetChartFilters: function () {
                $jq('#chartDateRange_Input').removeClass('dateRangeValueFieldError');
                if (this.chartfilterconfig.defaultChartFilter && this.chartfilterconfig.defaultChartFilter[0].Type.toUpperCase() == "DATERANGE" || this.defaultChartRangeFilter) {
                    $jq('#chartDateRange_Input').val(this.defaultChartRangeFilter.split('|')[0]);
                    $jq("#chartDateRangeDropDown_Field").val(this.defaultChartRangeFilter.split('|')[1]);
                }
                else {
                    $jq('#chartDateRange_Input').val("");
                    $jq("#chartDateRangeDropDown_Field").val("Select");
                }
                showChartDateRange();
            },
            chartFilterTitle: function (chartfilterconfig) {
                var defaultFilter = "";
                if (!chartfilterconfig.defaultChartFilter || chartfilterconfig.defaultChartFilter[0].Type.toUpperCase() == "DATERANGE") {
                    var today = SUT_USR(new Date());
                    var dd = today.getDate();
                    var mm = today.getMonth() + 1;
                    var yyyy = today.getFullYear();

                    defaultFilter = Date_Format(new Date(yyyy, mm - 1, dd), "dd mmm yyyy");

                    if (chartfilterconfig.defaultChartFilter)
                    {
                        this.defaultChartRangeFilter = defaultFilter + "|" + chartfilterconfig.defaultChartFilter[0].DisplayName;
                        defaultFilter = defaultFilter + " - " + chartfilterconfig.defaultChartFilter[0].DisplayName;
                    }
                    else {
                        this.defaultChartRangeFilter = defaultFilter + "|+/- 7 Days";
                        defaultFilter = defaultFilter + " - +/- 7 Days";
                    }
                }
                else
                    defaultFilter = chartfilterconfig.defaultChartFilter[0].DisplayName;
                chartfilterconfig.defaultChartFilter[0].Value = this.defaultChartRangeFilter;
                return defaultFilter;
            }
        });
    </script>
</dom-module>
<dom-module id="PFT-Date" assetpath="Components/">
    <template>
        <div class$="lblText {{cssclassName}}" title$="{{getTooltip(date,tooltipFormat)}}">{{dateFormat(date,format)}}</div>
    </template>
    <script>
        Polymer({
            is: "PFT-Date",
            attached: function () {
            },
            properties: {
                date: {
                    type: String,
                    value: function () {
                        return "";
                    }
                },
                format: {
                    type: String,
                    value: function () {
                        return "ddd\, dd MMM";
                    }
                },
                cssclassName: {
                    type: String,
                    value: function () {
                        return "";
                    }
                },
                tooltipFormat: {
                    type: String,
                    value: function () {
                        return "ddd\, dd MMM YYYY";
                    }
                }
            },
            getTooltip: function (date, dateFormat) {
                var date = SUT_USR(date, dateFormat);
                if (date == "00:00")
                    return "23:59"
                else
                    return date;
            },
            dateFormat: function (date, dateFormat) {
                var dateTimeInUserPreferedTZ = SUT_USR(date);
                if (date && (date.toUpperCase() == 'NA' || date.toUpperCase() == 'N/A'))
                    return date;
                else
                    return DateFormat24Hour(dateTimeInUserPreferedTZ, dateFormat);
            }
        });
    </script>
</dom-module><dom-module id="PFT-Title" assetpath="Components/">
    <template>
        <div class="dboardTitle" id="divEntry">
            <template is="dom-if" if="{{IsNewEntry(value)}}">
                <span id="newEntryIcon" class="newIcon FL">New</span>
            </template>
            <pft-text value="{{title}}" class="FL" action="{{action}}" function-name="{{functionName}}" function-params="{{functionParams}}" cssclass-name="{{GetActionClassName(action,functionName)}}"></pft-text>
        </div>
    </template>
    <script>
        Polymer({

            is: 'PFT-Title',
            properties: {

                title: {
                    type: String,
                    value: ""
                },
                value: {
                    type: String,
                    value: ""
                },
                action: {
                    type: String,
                    value: ""
                },
                functionName: String,
                functionParams: String
            },
            IsNewEntry: function (value) {
                var res = WOM_IsNewEntry(value);
                if (res) {
                    var element = this.$.divEntry;
                    element.addClassName("divNewEntry");
                }
                return res;

            },
            GetActionClassName: function (actionValue, functionName) {
                if ((actionValue != "" && actionValue != undefined) || (functionName != "" && functionName != undefined))
                    return "actionLink";
                else
                    "";
            }
        });
    </script>

</dom-module>
<dom-module id="PFT-HouseIdAction" assetpath="Components/">
    <template>
        <div>
            <template is="dom-if" if="{{!CheckIfCompleted(rowData,houseData)}}">
                <div id="houseIDText" onclick$="{{SetClickAttribute(actionValue,rowData)}}" class$="lblText {{GetLinkedActionClass(rowData)}}">Assign</div>
            </template>
            <template is="dom-if" if="{{CheckIfCompleted(rowData,houseData)}}">
                <div id="houseIDText">{{houseData}}</div>
            </template>
        </div>
    </template>
    <script>
        Polymer({
            is: 'PFT-HouseIdAction',
            properties: {
                rowData: {
                    type: Array,
                    value: []
                },
                data: {
                    type: String
                },
                actionValue: {
                    type: String
                },
                action: {
                    Type: String,
                    value: ""
                },
                houseData: {
                    Type:String,
                    value:""
                }
            },
            ready: function() {
                //console.log('HouseIDAction');
                
            },
            CheckIfCompleted: function (rowData, houseData) {
                if ((rowData.TaskStatus == "COMPLETED" || rowData.TaskStatus == "APPROVED") && houseData!=null) {
                    return true;
                } else {
                    return false;
                }
            },
            CheckIfHouseId: function () {
                if (this.houseData) {
                    return true;
                } else {
                    return false;
                }
                
            },
            GetLinkedActionClass: function (rowData) {
                var cssClass = "actionDiv";
                var status = this.GetHouseTaskStatus(rowData);
                //For HouseId Assignment. Since it is integrated in Process monitoring. Needs to make conditions for House ID only
                if (status != "INPROGRESS") {
                    cssClass = "disableAction prgDisVersionType";
                }                
                return cssClass;
            },
            GetHouseTaskStatus: function (rowData) {
                var status = "";
                if (rowData.TaskId == null) {
                    status="NOTSTARTED";
                }else if (rowData.TaskId != null && (rowData.TaskStatus!="COMPLETED")) {
                    status = "INPROGRESS";
                }else{
                    status = "COMPLETED";
                }
                return status;
            },
            SetClickAttribute: function (actionValue,rowData) {
                var status = this.GetHouseTaskStatus(rowData);
                if (status == "INPROGRESS") {
                    return actionValue;
                } else {
                    return "";
                }
            }
        });
    </script>
</dom-module><dom-module id="PFT-SmartAlerts" assetpath="Components/">
    <template>
        <div id="SAIcon" class="smartAlertEnable smartAlertIconWrap" title="Alert" on-tap="launchSmartAlertPopUp">
            <span id="bellIcon" class$="{{cssclassName}} smartAlertIcon"></span>
            <span id="flaggedicon" class$="{{flagClass}} smartAlertIcon"></span>
        </div>
        <div id="smartAlertInfo" class="smartalertsWrapper"></div>
    </template>
    <script>
        Polymer({

            is: 'PFT-SmartAlerts',
            properties: {
                data: Object,
                tenantId: {
                    type: String,
                    value: ''
                },
                cssclassName: {
                    type: String,
                    computed: 'computeClassName(data)'
                },
                flagClass: {
                    type: String,
                    computed: 'flaggedAlerts(data)'
                },
                count: {
                    type: Number,
                    value: 0
                },
                flagCount: {
                    type: Number,
                    value: 0,
                },
                isOnlyComments: {
                    type: Boolean,
                    value: false
                }
            },
            launchSmartAlertPopUp: function (event) {
                $jq(".selectedTask").each(function () {
                    $jq(this).removeClass("selectedTask");
                });
                var alertInfo = this.data;
                var dashboardRow = $jq(event.path).closest('tr').attr('id')
                $jq('#' + dashboardRow).addClass("selectedTask");
                LoadAllSmartAlerts(event, this, alertInfo.CorrelationId, alertInfo.TenantId);
            },
            computeClassName: function (data) {
                if (data && data.CorrelationId && data.CorrelationId==this.id.split('_')[1] && data.TenantId) {
                    this.assignCount(data);
                    this.assignFlagCount(data);
                    this.setIsOnlyComments(data);
                    jQuery(this).parent('div .smartAlertWrapper').addClass('classSMA')
                    if (this.isOnlyComments)
                        return "clear-notificationsNone smartAlertdisable";
                    else if ((this.flagCount > 0 && this.count == 1) || (this.flagCount > 0 && this.flagCount == this.count))
                        return "clear-notificationsNone smartAlertdisable";
                    else if (this.count > 0)
                        return "clear-notifications smartAlertEnable";
                    else
                        return "clear-notificationsNone smartAlertdisable";
                }
                else
                    return '';
            },
            assignCount: function (data) {
                if (data && data.Count >= 0) {
                    this.count = data.Count;
                }
            },
            assignFlagCount:function(data){
                if (data && data.FlagCount >= 0) {
                    this.flagCount = data.FlagCount;
                }
            },
            flaggedAlerts: function (data) {
                if (data && data.Count > 0 && data.FlagCount > 0)
                    return "clear-flag22";
                else return '';
            },
            setIsOnlyComments: function (data) {
                if (data && data.Count > 0 && data.IsOnlyComments && data.IsOnlyComments == true)
                    this.isOnlyComments = true;
            }
        });
    </script>

</dom-module>
<dom-module id="PFT-Version" assetpath="Components/">
    <template>        
        <pft-text value="{{getVersion(version,index,data,groupedTaskdetails)}}" row-value="{{rowValue}}" grouped-taskdetails="{{groupedTaskdetails}}" parent-cmpid="{{SetParentCompId(uid)}}" cssclass-name="{{cssclassName}}" action="{{action}}"></pft-text>
    </template>
    <script>
        Polymer({
            is: 'PFT-Version',
            properties: {
                version: {
                    Type: String,
                    value: ""
                },
                index: {
                    type: Number,
                    value: 0
                },
                data: {
                    Type: String,
                    value: ""
                },
                rowValue: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                groupedTaskdetails: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                cssclassName: {
                    type: String,
                    value: ""
                },
                action: {
                    Type: String,
                    value: ""
                }
            },
            getVersion: function (version, index, data, groupedTaskdetails) {                
                var prefix = 'VER';
                if (version)
                    prefix = version;

                if (groupedTaskdetails && groupedTaskdetails.VersionNumber && !isNaN(groupedTaskdetails.VersionNumber))
                    return prefix + " " + groupedTaskdetails.VersionNumber;

                var groupedData = this.GetTaskDetails(data);
                if (groupedData && groupedData.length > 0) {
                    var totalCount = groupedData.length;
                    index = totalCount - (parseInt(index));
                    return prefix + " " + index;
                }
            },
            GetTaskDetails: function (wfstepsInfo) {
                var wfStepsObj;
                if (wfstepsInfo != undefined && wfstepsInfo != "") {
                    wfStepsObj = JSON.parse(wfstepsInfo);
                }
                return wfStepsObj;
            },
            SetParentCompId: function (uId) {
                return uId + "_0";
            }
        });
    </script>
</dom-module><dom-module id="PFT-SmartAlertsPopUp" assetpath="Components/">
    <template>
        <div id="smartalerts" class="smartalerts">
            <div class="notification-Header">
                <div class="tab-Wraper FL">
                    <div class="tab-Content tabActive">Alerts</div>
                </div>
                <div class="FR pinNavPos">
                    <div class="FL clear-closeB clsNPnl" on-tap="closeAlertPopup" title="Close Notification Panel"></div>
                </div>
            </div>


            <div class="smartalertsContWrapper">

                <div class="smartAlertAxnWrapper">
                    <div>
                        <pft-filter id="smtfilterDiv" filter-data="{{GetSmtAltFilterData()}}" static-filter="{{staticFilter}}" data-filterid="smartAltFilter"></pft-filter>
						<div class="smartAlertTaskTitle">{{taskTitle}}</div>
                        <div class="smartAlertTaskType">{{taskType}}</div>
                    </div>
                </div>
                <div id="smartAlertScrollContainer" class="container smartAlertContainer">
                    <div id="smartAlertScroll" class="content">
                        <div class="smartAlertContent">
                            <template is="dom-if" if="{{isEmptyData(data)}}">
                                <p class="noData">No Record(s) Found.</p>
                            </template>
                            <template is="dom-if" if="{{!isEmptyData(data)}}">
                                <template is="dom-repeat" items="{{data}}" as="rowData">
                                    <pft-smartalertinfo data="{{rowData}}" id$="alertInfo_{{rowData._id}}"></pft-smartalertinfo>
                                </template>
                            </template>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </template>
    <script>
        Polymer({
            is: "PFT-SmartAlertsPopUp",
            attached: function () {
                updateScrollAsync('smartAlertScrollContainer');
            },
            properties: {
                data: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                Id: {
                    type: String,
                    value: function () {
                        return "";
                    }
                },
                TenantId:
                    {
                        type: String,
                        value: function () {
                            return "";
                        }
                    },
                Context:
                    {
                        type: String,
                        value: function () {
                            return "";
                        }
                    },
                IsDisposed:
                    {
                        type: Boolean,
                        value: function () {
                            return false;
                        }
                    },
                activeTabClass: {
                    type: String,
                    computed: 'getActiveTabClass(data)'
                },
                disposedTabClass: {
                    type: String,
                    computed: 'getDisposedTabClass(data)'
                },
                smartAltFilter: {
                    type: String,
                    value: ""
                },
                filterData: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
             taskTitle: {
                 type: String,
                 value: function () {
                     return "";
                 }
             },
             taskType: {
                 type: String,
                 value:function()
                 {
                     return "";
                 }
             }
             
            },
            isEmptyData: function (data) {
                if (data && data.length > 0)
                    return false;
                else
                    return true;
            },
            getActiveTabClass: function (data) {

               return !this.IsDisposed ? "activeBtn" : "disposedBtn"
              
            },
            getDisposedTabClass: function (data) {
                return this.IsDisposed ? "activeBtn" : "disposedBtn"
            },            
            closeAlertPopup: function (e) {
                $jq(".selectedTask").each(function () {
                    $jq(this).removeClass("selectedTask");
                });
                var belliconid = $jq(event.path).closest('span').attr('id')
                if (belliconid == "bellIcon") {
                    var dashboardrow = $jq(e.path).closest('tr').attr('id')
                    $jq('#' + dashboardrow).addClass("selectedTask");
                }
                var sa_Elem = $jq("[name=smartAlerts]");
                if (sa_Elem && sa_Elem.length > 0) {
                        var cmntbox = document.getElementsByClassName('SmartAlertCmtField');
                        if (cmntbox.length > 0 && jQuery.grep(cmntbox, function (data, index) { return (data.value != '' && data.value.trim().length > 0) }).length > 0) {
                            PFTConfirmNG('confirmAlertClosePopup', {
                                "popupTitle": "Unsaved Data?",
                                "message": 'You have unsaved data. Do you want to discard it anyway?',
                                "buttons": ["No", "Yes"],
                                "promptButtonClick": function (buttonType) {
                                    if (buttonType == 'Yes') {
                                        document.body.removeEventListener('click', HideSmartAlertPopup, false);
                                        sa_Elem.remove();
                                    }
                                    if (buttonType == "No") {
                                        closePopupNG();
                                    }
                                }
                            });
                        }
                        else {
                            document.body.removeEventListener('click', HideSmartAlertPopup, false);
                            sa_Elem.remove();
                        }
                }
            },
            GetSmtAltFilterData: function () {
                return JSON.parse("[{\"MainCategory\":{\"key\":\"Category\",\"value\":\"Category\",\"type\":null},\"SubCategory\":[{\"key\":\"MESSAGES\",\"value\":\"Comments\",\"count\":\" \"},{\"key\":\"FAILUREALERT\",\"value\":\"Error\",\"count\":\" \"},{\"key\":\"INFORMATIONALERT\",\"value\":\"Info\",\"count\":\" \"},{\"key\":\"REMINDERALERT\",\"value\":\"Reminders\",\"count\":\" \"},{\"key\":\"ETC\",\"value\":\"Warning\" ,\"count\":\" \"}],\"DefaultFilter\":null,\"UserSavedFilter\":null,\"IsStatic\":false},{\"MainCategory\":{\"key\":\"Status\",\"value\":\"Status\",\"type\":null},\"SubCategory\":[{\"key\":\"Active\",\"value\":\"Active\" ,\"count\":\" \"},{\"key\":\"Disposed\",\"value\":\"Inactive\" ,\"count\":\" \"}],\"DefaultFilter\":[\"Active\"],\"UserSavedFilter\":null,\"IsStatic\":false}]");
            }
        });
    </script>
</dom-module><dom-module id="PFT-SmartAlertInfo" assetpath="Components/">
    <template>
        <div class="smartAlertData" id="div_{{data._id}}">
            <div class="contextualIcon">
                <div class$="{{getContextualIcon(data.Purpose)}}" title$="{{getAlertIconToolTip(data.Purpose)}}"></div>
            </div>
            <template is="dom-if" if="{{!isMessagesAlertType(data.Purpose)}}">
                <div class="messageSection">
                    <div class="messageSectionWrap">
                        <span class="smartAlertTitle" title="{{data.Title}}">
                            {{data.Title}}
                        </span>
                        <span class="titleSeparator"> - </span>
                        <pft-date date="{{data.CreatedOn}}" format="ddd, MMM, dd, yyyy hh:nn"></pft-date>
                    </div>
                    <div class="description">
                        {{getMessage(data.Message)}}
                    </div>
                </div>
            </template>
            <template is="dom-if" if="{{!isDisposed(data)}}">
                <div class$="cancelSection {{cssClassForMessages(data.Purpose)}}">
                    <template is="dom-if" if="{{checkAlertType(data.Purpose)}}">
                        <span id="commenticon_{{data._id}}" class="clear-commenting CommentIcon linked" title="Click here to show/hide comment box" on-tap="showHideCommentBox"></span>
                    </template>
                    <template is="dom-if" if="{{!isMessagesAlertType(data.Purpose)}}">
                        <span id="flagIcon_{{data._id}}" class$="{{getFlagClass(data.UserFlags,data.Purpose)}} linked" title="{{getFlagTitle(data.UserFlags)}}" on-tap="flagAlert"></span>
                        <span id="disposeIcon_{{data._id}}" class="clear-deleteNew CrossIcon linked" title="Click here to dispose alert" on-tap="dispose"></span>
                    </template>
                    <template is="dom-if" if="{{checkMessageTypeForMsgIcon(data)}}">
                        <span id="mssgicon_{{data._id}}" class$="{{getFlagClass(data.UserFlags,data.Purpose)}} linked" title="Mark as Read" on-tap="flagAlert"></span>
                    </template>
                </div>
            </template>
            <template is="dom-if" if="{{checkAlertType(data.Purpose)}}">
                <div id="userCommentSection" class="userCommentSection">
                    <template is="dom-repeat" items="{{data.UserComments}}" as="rowData">
                        <div class="userCommentSecWrap">
                            <span class="smartAlertTitle">{{rowData.UserName}}</span>
                            <span class="titleSeparator"> - </span>
                            <pft-date date="{{rowData.CommentedOn}}" format="ddd, MMM, dd, yyyy hhh:nn"></pft-date>
                            <div class="clr description usercomment" title$="{{rowData.Comments}}">
                                {{rowData.Comments}}
                            </div>
                        </div>
                    </template>
                    <template is="dom-if" if="{{!isDisposed(data)}}">
                        <div class="SmartAlertCommentbox" style="display:none">
                            <input type="text" class="SmartAlertCmtField" placeholder="Write your comment here" on-keypress="showhideEventListener">
                            <span class="clear-cross commentReset" style="display:none" title=" click here to reset comment" on-tap="resetComment"></span>
                            <span class="clear-sendNow commentsend" style="display:none" title=" click here to send comment" on-tap="addComment"></span>
                        </div>
                    </template>
                </div>
            </template>
            <template is="dom-if" if="{{isMessagesAlertType(data.Purpose)}}">
                <div class="commentsSection UnreadMssg">
                    <div class="messageSectionWrap">
                        <br>
                        {{getVersion(data.Version)}}
                        {{getLanguage(data.Language)}}
                        <pft-date date="{{data.TaskDueDate}}" format="ddd, MMM, dd, yyyy hhh:nn"></pft-date>
                        <br>
                        <span class="timeCodeSectionWrap">{{getTc(data.TcIn, data.TcOut)}}</span>
                    </div>
                    <div class="userCommentSecWrap commentsSmartAlertBottom">
                        <span class="smartAlertTitle">{{getDisplayNameForSubContext(data.SubContext)}}</span>
                        <span class="taskCommntBy">By</span>
                        <span class="lblText">{{data.CreatedByName}}</span>
                        <span class="taskCommntAt">At</span>
                        <span class="titleSeparatorSmall"> - </span>
                        <pft-date date="{{data.CreatedOn}}" format="ddd, MMM, dd, yyyy hhh:nn"></pft-date>
                        <div class="clr description commentsDivDimensions">
                            <template is="dom-if" if="{{isUpdateStatus(data.SubContext)}}">
                               <span class="smartAlertTitle">{{getTaskStatus(data.TaskStatus)}}</span>
                            </template>
                            <span title$="{{data.Message}}">{{getTrimmedMessage(data.Message)}}</span>
                        </div>
                    </div>
                </div>
            </template>
        </div>
    </template>
    <script>
        Polymer({
            is: "PFT-SmartAlertInfo",
            attached: function () {
            },
            properties: {
                data: Object
            },
            listeners: {
                'keydown': 'keyPressed'
            },
            getContextualIcon: function (context) {
                switch (context) {
                    case "FAILUREALERT": return "clear-closeB ErrorIcon FailureAlert";
                    case "REMINDERALERT": return "clear-warning AlertIcon";
                    case "INFORMATIONALERT": return "clear-information InfoIcon";
                    case "ETC": return "clear-warning  EtcIcon";
                    case "MESSAGES": return "clear-new_comments MssgIcon";
                    default: break;
                }
            },
            getAlertIconToolTip: function (context) {
                switch (context) {
                    case "FAILUREALERT": return "Failure";
                    case "REMINDERALERT": return "Reminder";
                    case "INFORMATIONALERT": return "Information";
                    case "ETC": return "ETC";
                    case "MESSAGES": return "Comments";
                    default: break;
                }
            },
            dispose: function (e) {
                DisposeAlert(this.data);
            },
            flagAlert: function (e) {
                var amsData = this.data;
                this.data.Purpose == "MESSAGES" ? UnFlagAlert(amsData) : !this.isFlagged(amsData.UserFlags) ? FlagAlert(amsData) : UnFlagAlert(amsData)               
            },
            isDisposed: function (alertData) {
                return alertData.IsDisposed ? true:false;                
            },
            isFlagged: function (userFlags) {
                if (userFlags) {
                    var currentUserFlags = jQuery.grep(userFlags, function (item, index) {
                        return (item.UserId == MasterVar.userId);
                    });
                    return currentUserFlags.length > 0 ? true:false;
                }
                return false;
            },
            getFlagTitle: function (userFlags) {
                var title = "Click here to flag alert";
                if (this.isFlagged(userFlags))
                    return 'Click here to Unflag alert';
                else
                    return title;
            },
            getFlagClass: function (userFlags, Purpose) {
                var dashboardId = document.getElementById('dashboardId').value;
                var dataGrid = document.getElementById(dashboardId);
                var context = dataGrid.requestParams.context;
                if (Purpose == "MESSAGES")
                {
                        return "clear-mail_outline MssgIcon";
                }
                else if (this.isFlagged(userFlags))
                    return "clear-flag22 FlagIcon";
                else
                    return "clear-flag22 unFlagIcon";
            },
            checkAlertType: function (purpose) {
                if (purpose == "ETC")
                    return true;
                else return false;
            },
            keyPressed: function (e) {
                if (e.keyCode === 13) {
                    this.addComment(e);
                }
            },
            showHideCommentBox: function () {
                jQuery(this).find('.SmartAlertCommentbox').toggle();
                if (jQuery(this).find('.SmartAlertCommentbox').css('display') == 'block')
                    {
                    jQuery(jQuery(this).find('.SmartAlertCmtField')).focus();
                    document.getElementById('sendMsg').addEventListener("keypress", showhideEventListener, false);
                }
                else 
                    document.getElementById('sendMsg').removeEventListener("keypress", showhideEventListener, false);
           },
        
            showhideEventListener: function () {
                this.getElementsByClassName('commentReset')[0].style.display = "block";
                this.getElementsByClassName('clear-sendNow')[0].style.display = "block";
            },

            addComment: function (e) {
                if (jQuery(this).find('input').val().length > 0 && jQuery(this).find('input').val().trim().length > 0) {
                    AddSmartAlertComment(this.data, jQuery(this).find('input').val(), e);
                    this.resetComment();
                }
            },
            resetComment: function (e) {
                jQuery(this).find('input').val("");
                this.getElementsByClassName('commentReset')[0].style.display = "none";
                this.getElementsByClassName('clear-sendNow')[0].style.display = "none";
                jQuery(jQuery(this).find('.SmartAlertCmtField')).focus();
            },
            getMessage: function (msg) {
                var formattedMsg = msg;
                if (msg && msg.includes("%S_DUE_DATE%")) {
                    var msgData = formattedMsg.split("|");
                    var context = msgData[0];
                    var userName = msgData[2];
                    var oldDate = msgData[3];
                    var newDate = msgData[4];
                    var userOldDate = new Date(SUT_USR(oldDate, "ddd, MMM dd, yyyy HHH:nn:ss"));
                    var userNewDate = new Date(SUT_USR(newDate, "ddd, MMM dd, yyyy HHH:nn:ss"));
                    if (userNewDate.getFullYear() == userOldDate.getFullYear() && userNewDate.getMonth() == userOldDate.getMonth() && userOldDate.getDate() == userNewDate.getDate())
                        if (context == "%TASK%")
                            formattedMsg = "Due Time of the Task has been modified by " + userName + " from " + userOldDate.getHours() + ":" + userOldDate.getMinutes() + " hrs to " + userNewDate.getHours() + ":" + userNewDate.getMinutes() + " hrs due on " + userNewDate.format("ddd, MMM dd, YYYY");
                        else
                            formattedMsg = "Due Time of the Work Order has been modified by " + userName + " from " + userOldDate.getHours() + ":" + userOldDate.getMinutes() + " hrs to " + userNewDate.getHours() + ":" + userNewDate.getMinutes() + " hrs due on " + userNewDate.format("ddd, MMM dd, YYYY");
                    else
                        if (context == "%TASK%")
                            formattedMsg = "Due Date of the Task has been modified by " + userName + " from " + userOldDate.format("ddd, MMM dd, YYYY") + " to " + userNewDate.format("ddd, MMM dd, YYYY");
                        else
                            formattedMsg = "Due Date of the Work Order has been modified by " + userName + " from " + userOldDate.format("ddd, MMM dd, YYYY") + " to " + userNewDate.format("ddd, MMM dd, YYYY");
                }
                if (msg && msg.includes("%%")) {
                    var i = 0;
                    var Startindex = 0;
                    var regex = RegExp('%%*', 'g');
                    while ((result = regex.exec(msg)) !== null) {
                        i++;
                        if (i % 2 == 1) {
                            Startindex = result.index;
                        }
                        else {
                            var functionName = msg.substring(Startindex + 2, result.index).trim();
                            var operator = functionName.substring(0, functionName.indexOf('('));
                            var value = functionName.substring(functionName.indexOf('(') + 1, functionName.indexOf(')'))
                            switch (operator.toUpperCase()) {
                                case "SUT_USR":
                                    var newValue = SUT_USR(value, "ddd, MMM dd, yyyy HH:nn:ss");
                                    formattedMsg = formattedMsg.replace(functionName, newValue);
                                    break;
                                case "USR_SUT":
                                    Console.log("USR_SUT");
                                    break;
                                default:
                                    Console.log("None");
                                    break;
                            }
                        }
                    }
                    formattedMsg = formattedMsg.replace(/%%/g, '');
                }
                return formattedMsg;
            },
            isMessagesAlertType: function (purpose) {
                return (purpose == "MESSAGES") ? true : false;
            },
            checkMessageTypeForMsgIcon: function(data)
            {
                return (data.Purpose == "MESSAGES" && jQuery.grep(data.UserFlags, (function (x, index) { return (x.UserId == MasterVar.userId) })).length > 0) ? true : false;
            },
            getDisplayNameForSubContext: function (subContext) {
                switch (subContext) {
                    case 'MARK_AS_COMPLETE':
                        return 'Mark As Complete';
                        break;
                    case 'ASSIGN':
                        return 'Task Assigned';
                        break;
                    case 'TRANSFER':
                        return 'Task Transferred ';
                        break;
                    case 'REVIEW':
                        return 'Task Reviewed';
                        break;
                    case 'REJECT':
                        return 'Task Rejected';
                        break;
                    case 'SKIP':
                        return 'Task Skipped';
                        break;
                    case 'DEPENDENT_REVIEW':
                        return 'Task Review';
                        break;
                    default:
                        return subContext;
                        break;
                }
            },
            getVersion: function (version) {
                if (version)
                    return 'VER ' + version + " - ";
            },
            getTaskStatus: function (TaskStatus) {
                if (TaskStatus)
                    return TaskStatus + " - ";
            },
            getLanguage: function (language) {
                if (language)
                    return language.substring(0, 3).toUpperCase() + '   ';
            },
            getTc: function (TcIn, TcOut) {
                if ((TcIn && TcIn != '00:00:00:00' && TcIn != '0') || (TcOut && TcOut != '00:00:00:00' && TcOut != '0'))
                    return TcIn + ' - ' + TcOut;
            },
            isCancelSection: function (data) {                
                return (!this.isDisposed(data) && !this.isMessagesAlertType(data.Purpose)) ? true : false;
            },
            isUpdateStatus: function (subContext) {
                return (subContext && (subContext.toString().toUpperCase() == 'REVIEW' || subContext.toString().toUpperCase() == 'MARK_AS_COMPLETE')) ? true : false;
            },
            getTrimmedMessage: function (message) {
                var trimmedMsg = message;
                if (message && message.length > 216)
                {
                    trimmedMsg = message.substring(0, 214);
                    trimmedMsg = trimmedMsg + '..';
                }
                return trimmedMsg;
            },
            cssClassForMessages: function (purpose) {
                return (purpose == "MESSAGES") ? " messageCancelSection" : "";
            }
        });
    </script>
</dom-module><dom-module id="PFT-WFStatusBar" assetpath="Components/WorkOrder/">
    <template>
        <div id="main_wfStatusBar" class$="master_wfStatusBar{{dashboardType}} statusbar{{dashboardType}} linked " title$="{{DisplayValue}}" c-action="{{populateAttributes(parentcmpid,woType)}}" action="{{SetClickAttribute(actioninfo)}}">
            <div class$="{{baseClass}}">
                <div id="wfStatusBar" class$="{{ClassSelector}} {{actionClass}} statusbarH{{dashboardType}}">
                    <div id="div_wfStatusBar" class$="pft-wfstatusbar {{CheckIfNodeFailed(actioninfo.stepInfo,dashboardType)}}"></div>
                </div>
            </div>
            <span action="{{SetClickAttribute(actioninfo)}}" class$="StatusLabel{{dashboardType}}">{{actioninfo.stepInfo.DisplayName}}</span>
        </div>
        <div id="wfStepActions" class$="wfActions{{dashboardType}}"></div>
        <div id="wfProgressInfo" class$="wfProgressInfo{{dashboardType}}"></div>
    </template>

    <script>
        Polymer({
            is: 'PFT-WFStatusBar',
            attached: function () {
                if (this.dataHost && this.dataHost.dashboardType)
                    this.dashboardType = this.dataHost.dashboardType;
                else
                    this.dashboardType = "";
            },
            properties: {
                actioninfo: Object,
                WFId: String,
                clickFunction: {
                    type: String,
                    value: ""
                },
                WorkflowObj: Object,

                actionClass: {
                    type: String,
                    value: ""
                },

                ClassSelector: {
                    type: String,
                    computed: 'computeClassName(actioninfo.stepInfo)'
                },
                DisplayValue: {
                    type: String,
                    computed: 'computeDisplay(actioninfo.stepInfo)'
                },
                dashboardType: {
                    type: String,
                    value: ""
                },
                baseClass: {
                    type: String,
                    value: "progressStatusBarNotstarted"
                },
                woType: {
                    type: String,
                    value: ""
                }
            },
            removeProgessInfo: function () {
                var element = this.$.wfProgressInfo.querySelector("*");
                if (element) {
                    element.parentNode.removeChild(element);
                }
            },
            removeActionInfo: function () {
                var element = this.$.wfStepActions.querySelector("*");
                if (element) {
                    element.parentNode.removeChild(element);
                }
            },
            loadStepActions: function (event) {
                if (this.actioninfo && this.actioninfo.stepInfo && typeof LoadWFStepActions === "function")
                    LoadWFStepActions(event, this.actioninfo, this);
            },
            computeClassName: function (WorkflowObj) {
                if (this.clickFunction != "" && this.clickFunction != undefined)
                    this.actionClass = "progressStatusBarAction";
                else
                    this.actionClass = "";

                if (WorkflowObj.StepStatus && WorkflowObj.StepStatus.toUpperCase() == "FAILED") {
                    $jq(this.$.wfStatusBar).width('100%');
                    return "progressStatusBarFailed posRel";
                }
                var percentage;

                if (WorkflowObj.StepType && WorkflowObj.StepType.toUpperCase() == "EMBEDDED") {
                    if (WorkflowObj.TotalSubWo && WorkflowObj.CompletedSubWo) {
                        percentage = (WorkflowObj.TaskStatus && (WorkflowObj.TaskStatus.toUpperCase() == "FAILED" || WorkflowObj.TaskStatus.toUpperCase() == "REJECTED" ||
                            WorkflowObj.TaskStatus.toUpperCase() == "FAIL")) ? 100 : (parseInt((WorkflowObj.CompletedSubWo / WorkflowObj.TotalSubWo) * 100) || 0);
                    }
                }
                else
                    percentage = parseInt(WorkflowObj.StepProgress) || 0;

                percentage = percentage > 0 ? percentage : 100;

                $jq(this.$.wfStatusBar).width(percentage + '%');
                if (WorkflowObj.StepType != undefined && WorkflowObj.StepType != null && WorkflowObj.StepType != "" &&
                    WorkflowObj.StepType.toUpperCase() == "EMBEDDED") {
                    if (WorkflowObj.TaskStatus != undefined && WorkflowObj.TaskStatus != null && WorkflowObj.TaskStatus != "" &&
                        WorkflowObj.TaskStatus.toUpperCase() == "FAILED")
                        return "progressStatusBarFailed";
                    else
                        WorkflowObj.TaskStatus = "";
                }

                if (WorkflowObj.TaskStatus == undefined || WorkflowObj.TaskStatus == "") {
                    if (!WorkflowObj.StepStatus)
                        return "progressStatusBarNotstarted";

                    if (WorkflowObj.StepStatus.toUpperCase() == "INITIATED" || WorkflowObj.StepStatus.toUpperCase() == "INPROGRESS" ||
                        WorkflowObj.StepStatus.toUpperCase() == "PROCESSING" || WorkflowObj.StepStatus.toUpperCase() == "IN PROGRESS") {
                        this.baseClass = "progressStatusBarInProgressPercentage";
                        return (!percentage || percentage == 100) ? "progressStatusBarInProgress" : ((percentage > 0 && percentage != 100) ? "progressStatusBarInProgress" : "progressStatusBarInProgressPercentage");
                    }
                    else if (WorkflowObj.StepStatus.toUpperCase() == "COMPLETED" || WorkflowObj.StepStatus.toUpperCase() == "SUCCEEDED" ||
                        WorkflowObj.StepStatus.toUpperCase() == "APPROVED") {
                        return "progressStatusBarComplete";
                    }
                    else if (WorkflowObj.StepStatus.toUpperCase() == "FAILED" || WorkflowObj.StepStatus.toUpperCase() == "REJECTED") {
                        return "progressStatusBarFailed posRel";
                    }
                    else if (WorkflowObj.StepStatus.toUpperCase() == "ABORTED")
                        return "progressStatusBarAborted";
                    else {
                        return "progressStatusBarNotstarted";
                    }
                }
                else {
                    if (!WorkflowObj.TaskStatus)
                        return "progressStatusBarNotstarted";

                    if (WorkflowObj.TaskStatus.toUpperCase() == "INITIATED" || WorkflowObj.TaskStatus.toUpperCase() == "INPROGRESS" ||
                        WorkflowObj.TaskStatus.toUpperCase() == "PROCESSING" || WorkflowObj.TaskStatus.toUpperCase() == "IN PROGRESS") {
                        this.baseClass = "progressStatusBarInProgressPercentage";
                        return (!percentage || percentage == 100) ? "progressStatusBarInProgress" : ((percentage > 0 && percentage != 100) ? "progressStatusBarInProgress" : "progressStatusBarInProgressPercentage");
                    }
                    else if (WorkflowObj.TaskStatus.toUpperCase() == "NOTSTARTED" || WorkflowObj.TaskStatus.toUpperCase() == "NOT STARTED") {
                        return "progressStatusBarInProgressPercentage";
                    }
                    else if (WorkflowObj.TaskStatus.toUpperCase() == "COMPLETED" || WorkflowObj.TaskStatus.toUpperCase() == "SUCCEEDED"
                        || WorkflowObj.TaskStatus.toUpperCase() == "APPROVED" || WorkflowObj.TaskStatus.toUpperCase() == "PASS"
                        || WorkflowObj.TaskStatus.toUpperCase() == "SKIPPED") {
                        return "progressStatusBarComplete";
                    }
                    else if (WorkflowObj.TaskStatus.toUpperCase() == "FAILED" || WorkflowObj.TaskStatus.toUpperCase() == "REJECTED" ||
                        WorkflowObj.TaskStatus.toUpperCase() == "FAIL") {
                        return "progressStatusBarFailed";
                    }
                    else if (WorkflowObj.TaskStatus.toUpperCase() == "ABORTED")
                        return "progressStatusBarAborted";
                    else {
                        return "progressStatusBarNotstarted";
                    }
                }
            },
            computeDisplay: function (WorkflowObj) {
                if (this.dataHost._rootDataHost.domHost && this.dataHost._rootDataHost.domHost.domHost && this.dataHost._rootDataHost.domHost.domHost.id.contains('V2'))
                    return "Click to configure actions";
                else {

                    if (WorkflowObj.StepType && WorkflowObj.StepType.toUpperCase() == 'EMBEDDED' &&
                        WorkflowObj.TotalSubWo && WorkflowObj.TotalSubWo != '0') {
                        return WorkflowObj.CompletedSubWo + '/' + WorkflowObj.TotalSubWo + ' Completed'
                    }
                    else if (WorkflowObj.TotalTaskUsers && WorkflowObj.CompletedTaskUsers && WorkflowObj.TotalTaskUsers != "0" && WorkflowObj.TotalTaskUsers != "1") {
                        return WorkflowObj.CompletedTaskUsers + '/' + WorkflowObj.TotalTaskUsers + ' Completed'
                    }
                    else {
                        var status = "NA";
                        if (WorkflowObj.StepStatus && (WorkflowObj.StepStatus.toUpperCase() == "FAILED" || WorkflowObj.StepStatus.toUpperCase() == "REJECTED")) {
                            status = WorkflowObj.StepStatus;
                        }
                        else {
                            var status = "NA";
                            if (WorkflowObj.StepStatus && (WorkflowObj.StepStatus.toUpperCase() == "FAILED" || WorkflowObj.StepStatus.toUpperCase() == "REJECTED")) {
                                status = WorkflowObj.StepStatus;
                            }
                            else {
                                status = WorkflowObj.TaskStatus ? WorkflowObj.TaskStatus : WorkflowObj.StepStatus;
                            }
                            if (status && status != "NA") {
                                status = GetStepStatusInCamelCase(status);
                                var percentage = parseInt(WorkflowObj.StepProgress) || 0;
                                return percentage > 0 && percentage < 100 ? status + "-" + percentage + "%" : status;
                            }
                            else {
                                return "NA";
                            }
                        }
                    }
                }
            },
            SetClickAttribute: function (actionInfo) {
                if (actionInfo) {
                    this.listen(this.$.main_wfStatusBar, 'tap', 'loadStepActions');
                }
            },
            CheckIfNodeFailed: function (WorkflowObj, dashboardType) {
                if (WorkflowObj.StepStatus && (WorkflowObj.StepStatus.toUpperCase() == "FAILED" || WorkflowObj.StepStatus.toUpperCase() == "REJECTED")) {
                    return "progressBarNodeFailed" + dashboardType + " clear-cross";
                }
            },
            populateAttributes: function (compId, woType) {
                if (typeof loadAttributes === "function" && compId !== "" && compId !== undefined) {
                    if (compId.includes('idWFCNG')) {
                        var parentcmpId;
                        parentcmpId = compId.slice(0, -2);
                        attr = document.createAttribute('onclick');
                        attr.value = "loadAttributes('" + compId + "', 'pft-wfstatusbar', '', '" + parentcmpId + "', '" + woType + "')";
                        this.dataHost._nodes[1].setAttributeNode(attr);
                        return;
                    }
                }
            }
        });
    </script>
</dom-module>
<dom-module id="PFT-WFStatusIcon" assetpath="Components/WorkOrder/">
    <template>
        <div id="wfStatus" class$="{{ClassSelector}}" title$="{{status}}" action="{{SetClickAttribute(clickFunction,wfId,woId)}}">{{DisplayValue}}</div>
        <ul id="wfright-click" class="wfright-click" name="wfContextMenu">{{priorityData}}</ul>
    </template>

    <script>
        Polymer({
            is: 'PFT-WFStatusIcon',

            properties: {

                status: String,
                wfId: String,
                woId: String,
                clickFunction: String,
                priorityData: String,
                wficonId: String,
                ClassSelector: {
                    type: String,
                    computed: 'computeClassName(status, wfId)'
                },
                DisplayValue: {
                    type: String,
                    computed: 'computeDisplay(status)'
                }

            },
            computeClassName: function (status, wfId) {
                if (wfId != undefined && wfId != "" && wfId != "0") {
                    if (status.toUpperCase() == "APPROVED" || status.toUpperCase() == "COMPLETED" ||
                        status.toUpperCase() == "SUCCEEDED") {
                        return "completedImage";
                    }
                    else if (status.toUpperCase() == "REJECTED" || status.toUpperCase() == "FAILED") {

                        return "failedImage";
                    }
                    else if (status.toUpperCase() == "INPROGRESS" || status.toUpperCase() == "INITIATED"
                        || status.toUpperCase() == "IN PROGRESS") {
                        return "inProgressImage"
                    }
                    else if (status.toUpperCase() == "ABORTED") {
                        return "clear-WorkFlow abortedImage "
                    }
                    else if (status.toUpperCase() == "N/A") {
                        return "clear-WorkFlow wfNotStarted";
                    }
                    else if (status.toUpperCase() == "PAUSED") {
                        return "pausedImage";
                    }
                }
                else
                    return "clear-WorkFlow wfNotStarted";
            },
            computeDisplay: function (status) {
                if (status == "N/A") {
                    return status;
                }
                else {
                    return "";
                }
            },
            SetClickAttribute: function (actionValue, wfId, woId) {
                var attr = '';
                var params = '';
                var functionToCall = '';
                var divId = '';
                if (wfId != undefined && wfId != "" && actionValue != undefined && actionValue != "" && actionValue != null) {
                    attr = document.createAttribute('OnClick');
                    attr.value = actionValue;
                    this.children[0].setAttributeNode(attr);
                }
            }
        });
    </script>

</dom-module><dom-module id="PFT-DropDown" assetpath="Components/WorkOrder/">
    <template>
        <div id="main_dropDownDiv" class="dropDownCallOut" name="dropDownCallOut">
            <div id="dropDownDiv" class="dropDownWrapper">
                <template is="dom-repeat" items="{{dropdownData}}" as="dropDown" index-as="o_index">
                    <div id="drpDown_[[o_index]]" class="dropDownItem " on-tap="SetClickAttribute">
                        <div class="linked scrnrSrtTxt  FL label" title="{{dropDown.DisplayName}}">
                            {{dropDown.DisplayName}}
                        </div>
                        <span class$="{{dropDown.DropDownClassName}} FR icon" title$="{{dropDown.ToolTip}}"></span>
                        <div class="clr"></div>
                    </div>
                </template>
            </div>
        </div>
    </template>

    <script>
        Polymer({
            is: "PFT-DropDown",
            attached: function () {
                //this.divId = this.domHost.id.split('wfDiv_')[1];
            },
            properties: {
                dropdownData: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                sortAttribute: {
                    type: Object,
                    value: {
                        order: null,
                        value: null
                    }
                },
                idProp: String,
                action: String,
                divId: String
            },
            removeDropDown: function () {
                var element = this.$.main_dropDownDiv.querySelector("*");
                if (element) {
                    element.parentNode.removeChild(element);
                }
            },
            SetClickAttribute: function (e) {
                var data = e.model.__data__;
                var functionName = data.dropDown.Function;
                var isDirectCall = data.dropDown.IsDirectCall ? data.dropDown.IsDirectCall : false;
                if (functionName) {
                    var params = data.dropDown.Params;
                    if (params) {
                        if (isDirectCall)
                            window[functionName].apply(this, params);
                        else {
                            var requestUrlDTOObject = {};
                            requestUrlDTOObject.Params = params;
                            window[functionName].call(this, [JSON.stringify(requestUrlDTOObject)]);
                        }
                    }
                    else
                        window[functionName].apply(this);
                }
                this.removeDropDown();
            }
        });
    </script>
</dom-module><dom-module id="PFT-AbortAction" assetpath="Components/WorkOrder/">
    <template>        
        <template is="dom-if" if="{{!isActionTextRequired(actionConfig)}}">
            <div id="abortAction" title="Abort" class="linked" title$="{{actionConfig.ActionTooltip}}" on-tap="Invokefunction" actionname$="{{actionConfig.ActionName}}">            
                <span class="FL abortObject clear-block"></span>
            </div>
        </template>
        <template is="dom-if" if="{{isActionTextRequired(actionConfig)}}">
            <div id="abortAction" title="Abort" class="actionWrap" title$="{{actionConfig.ActionTooltip}}" on-tap="Invokefunction" actionname$="{{actionConfig.ActionName}}">
                <span class="actionIcon clear-block"></span>
                <span class="actionLabel">{{actionConfig.ActionDisplayText}}</span>
            </div>
        </template>        
    </template>
    <script>
        Polymer({

            is: 'PFT-AbortAction',

            properties: {
                actionConfig: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                }
            },
            Invokefunction: function () {
                if (IsActionDisabled(this.id))
                    return false;
                else
                    this.domHost.dataHost.InvokeAbortActionMethod(this.actionConfig.ActionOnClickFunction);
            },
            isActionTextRequired: function (actionConfig) {
                return IsToolbarActionTextRequired(actionConfig);
            }
        });
    </script>

</dom-module>
<dom-module id="PFT-ImportAction" assetpath="Components/WorkOrder/">
    <template>                
        <template is="dom-if" if="{{!isActionTextRequired(actionConfig)}}">
            <div id="importAction" class="importAction" title$="{{actionConfig.ActionTooltip}}" importactionconfig="{{SetClickAttribute(actionConfig.ActionOnClickFunction,actionConfig.ActionDefaultParams)}}" actionname$="{{actionConfig.ActionName}}">
                <span class="importAction clear-fileUpload2 FL marL10 iconSpacer linked no-js"></span>
            </div>
        </template>
        <template is="dom-if" if="{{isActionTextRequired(actionConfig)}}">
            <div id="importAction" class="actionWrap divImportaction" title$="{{actionConfig.ActionTooltip}}" importactionconfig="{{SetClickAttribute(actionConfig.ActionOnClickFunction,actionConfig.ActionDefaultParams)}}" actionname$="{{actionConfig.ActionName}}">
                <input class="uploadFiledrpdown" id="dvUploadWOBrowse" text="Upload File" type="file" accept=".xls,.xlsx,.csv" title="Click here to import workorders" on-change="uploadWO">
                <span class="actionIcon clear-fileUpload2 linked"></span>
                <span class="actionLabel">{{actionConfig.ActionDisplayText}}</span>

            </div>
        </template>        
    </template>
    <script>
        Polymer({

            is: 'PFT-ImportAction',

            properties: {                
                actionConfig: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                }
            },
            uploadWO: function () {
                if (IsActionDisabled(this.id))
                    return false;
                else
                    sendWorkOrderFile();
            },
            SetClickAttribute: function (actionName, actionParams) {
                if (IsActionDisabled(this.id))
                    return false;
                else {
                    var attr = '';
                    var params = '';
                    var paramsObj = '';
                    var functionToCall = '';
                    if (actionName != undefined && actionName != null) {
                        attr = document.createAttribute('OnClick');
                        if (actionParams != null && actionParams != undefined && actionParams != "") {
                            paramsObj = actionParams.split(',');
                            params = paramsObj.join("','");
                            functionToCall = actionName + "('" + params + "');";
                        }
                        else
                            functionToCall = actionName;
                        attr.value = functionToCall;
                    }
                    if (document.getElementById('importaction') != undefined)
                        document.getElementById('importaction').setAttributeNode(attr);
                }
            },
            isActionTextRequired: function (actionConfig) {
                return IsToolbarActionTextRequired(actionConfig);
            }
        });
    </script>

</dom-module>
<dom-module id="PFT-EditWO" assetpath="Components/WorkOrder/">
    <template>
        <div id="editWO">
            <template is="dom-if" if="{{CheckForWorkOrderId(rowData)}}">
                <span class="actionDiv">
                    <div class="lblText actEditWO" title="Click here to edit workorder" action="{{SetClickAttribute(rowData)}}">Edit Workorder</div>
                </span>
            </template>
        </div>
    </template>
    <script>
        Polymer({

            is: 'PFT-EditWO',

            properties: {
                rowData: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                }
            },
            CheckForWorkOrderId: function (rowData) {
                if (rowData != undefined && rowData != "" && rowData.StdAttributes !=undefined) {
                    if ((rowData.StdAttributes.S_WO_ID != undefined && rowData.StdAttributes.S_WO_ID != "") ||
                        (rowData.StdAttributes.WorkorderId != undefined && rowData.StdAttributes.WorkorderId != ""))
                        return true;
                    else
                        return false;
                }
                return false;
            },
            SetClickAttribute: function (rowData) {
                var woId;
                var taskId = '';
                var userDetails = '';
                var objTenantId = '';
                var statusAcronym = '';
                if (rowData.StdAttributes.S_WO_ID != undefined && rowData.StdAttributes.S_WO_ID != "")
                    woId = rowData.StdAttributes.S_WO_ID;
                else
                    woId = rowData.StdAttributes.WorkorderId;
                if (rowData.StdAttributes.TaskId != undefined && rowData.StdAttributes.TaskId != "") {
                    taskId = rowData.StdAttributes.TaskId;
                    userDetails = GetAssignmentDetails(this.getAssignmentDetails(rowData));
                    statusAcronym = rowData.StdAttributes.StatusAcronym;
                    objTenantId = rowData.StdAttributes.ObjTenantId;
                }
                var actionValue = "HandleClick('', '', 'LaunchEditWorkorderTool', 'workOrderId+" + woId + "&&objTenantId+" + objTenantId + "&&taskId+" + taskId + "&&taskAssignmentDetails+" + userDetails + "&&statusAcronym+" + statusAcronym + "')";
                var attr = '';
                var params = '';
                var functionToCall = '';
                if (actionValue != null) {
                    attr = document.createAttribute('OnClick');
                    attr.value = actionValue;
                    this.$.editWO.setAttributeNode(attr);
                }
            },
            getAssignmentDetails: function (rowData) {
                return GetTaskAssignmentObject(rowData);
            }
        });
    </script>
</dom-module>
<dom-module id="PFT-ProgressInfo" assetpath="Components/WorkOrder/">
    <template>
        <div class="progresssInfo" data="{{wfstepInfo}}" id="mainDiv_progressInfo">
            <div class="hdProgresssInfo"><span>Progress Info</span></div>

            <div id="containerProgInfo" class="container containerProgInfo">
                <ul class="ulProgressInfo">
                    <li>
                        <label>Progress</label>
                        <div>{{getProgress(wfstepInfo)}}</div>

                    </li>
                    <template is="dom-if" if="{{isCompleted(wfstepInfo)}}">
                        <li>
                            <label>Completed On</label>
                            <pft-date date="{{getUpdatedOn(wfstepInfo)}}" format="yyyy-mm-dd hhh:nn:ss"></pft-date>
                           <!-- <div>{{getUpdatedOn(wfstepInfo)}}</div>-->
                        </li>
                    </template>
                    <template is="dom-if" if="{{isFailed(wfstepInfo)}}">
                        <li>
                            <label>Updated On</label>
                            <pft-date date="{{getUpdatedOn(wfstepInfo)}}" format="yyyy-mm-dd hhh:nn:ss"></pft-date>
                            <!--<div>{{getUpdatedOn(wfstepInfo)}}</div>-->
                        </li>
                        <li>
                            <label>Last Error</label>
                            <div>{{getLastError(wfstepInfo)}}</div>
                            <!--<span>(more...)</span>-->
                        </li>
                    </template>
                    <template is="dom-if" if="{{isInProgress(wfstepInfo)}}">
                        <li>
                            <label>Updated On</label>
                            <pft-date date="{{getUpdatedOn(wfstepInfo)}}" format="yyyy-mm-dd hhh:nn:ss"></pft-date>
                            <!--<div>{{getUpdatedOn(wfstepInfo)}}</div>-->
                        </li>
                        <template is="dom-if" if="{{isAdditionalInfoAvailble(wfstepInfo)}}">
                            <li>
                                <label>Details</label>
                                <template is="dom-repeat" items="{{getAdditionalInfoObject(wfstepInfo.AdditionalInfo)}}" as="info">
                                    <div>{{getAdditionalInfoValue(info)}}</div>
                                </template>
                            </li>
                        </template>
                    </template>


                </ul>
            </div>
        </div>
    </template>
</dom-module>
<script>
    Polymer({
        is: "PFT-ProgressInfo",
        properties: {
            wfstepInfo:
                   {
                       type: Object,
                   }
        },
        getProgress: function (wfStepInfo) {
            var status = "NA";
            if (wfStepInfo.StepStatus && (wfStepInfo.StepStatus.toUpperCase() == "FAILED" || wfStepInfo.StepStatus.toUpperCase() == "REJECTED")) {
                status = wfStepInfo.StepStatus;
            }
            else {
                status = wfStepInfo.StepStatus && (wfStepInfo.StepStatus.toUpperCase() == "COMPLETED" || wfStepInfo.StepStatus.toUpperCase() == "SUCCEEDED") ? wfStepInfo.StepStatus :
                    (wfStepInfo.TaskStatus ? wfStepInfo.TaskStatus : wfStepInfo.StepStatus);
            }
            if (status) {
                status = GetStepStatusInCamelCase(status);
                var percentage = parseInt(wfStepInfo.StepProgress) || 0;
                return percentage > 0 && percentage < 100 ? status + "-" + percentage + "%" : status;
            }
            else {
                return "NA";
            }
        },
        getCallOutPositionClass: function (e) {
            var containerElement = $jq('#masteringDiv');
            var callOutHeight = 200;
            var styleHeight = ((event.detail.sourceEvent.clientY - containerElement.offset().top) / (containerElement.height())) * 100;

            if (styleHeight >= callOutHeight) {
                return "callOutShowDown";
                //divElementNew.removeClass("callOutShowUp");
                //divElementNew.addClass("callOutShowDown");
            }
            else if (styleHeight < callOutHeight) {
                return "callOutShowUp";
                //document.getElementById('mainDiv_progressInfo').addClassName('callOutShowUp')
                //divElementNew.addClass("callOutShowUp");
                //divElementNew.removeClass("callOutShowDown");
            }

            //var divElement = $jq('#mainDiv_progressInfo');
            //var callOutHeight = 200;
            //return "callOutShowUp";
            //var cssClass = setCalloutPosition(e, containerElement, divElement, callOutHeight);
            //return cssClass;
        },
        getUpdatedOn: function (wfStepInfo) {
            var updatedOn = wfStepInfo.LastUpdatedOn;
            if (updatedOn)
                return updatedOn;
            else
                return "NA";
        },
        getLastError: function (wfStepInfo) {
            var error = wfStepInfo.LastError;
            if (error && this.isFailed(wfStepInfo))
                return decodeURIComponent(error);
            else
                return "NA";
        },
        isAdditionalInfoAvailble: function (wfStepInfo) {
            if (wfStepInfo && wfStepInfo.AdditionalInfo && wfStepInfo.AdditionalInfo.length > 0)
                return true;
            else
                return false;
        },
        getAdditionalInfoValue: function (info) {
            if (info && info.propertyDisplayName) {
                return info.propertyDisplayName + " " + (info.propertyValue ? info.propertyValue : " NA");
            }
            else
                return "NA";
        },
        getAdditionalInfoObject: function (info) {
            try {
                if (info) {
                    var infoJSON = info.replace(/'/g, '"');
                    return JSON.parse(infoJSON);
                }
            }
            catch (err)
            { }
            return null;
        },
        isCompleted: function (wfStepInfo) {            
            var wfStatus = wfStepInfo.StepStatus && (wfStepInfo.StepStatus.toUpperCase() == "COMPLETED" || wfStepInfo.StepStatus.toUpperCase() == "SUCCEEDED") ? "STEPCOMPLETED" : (wfStepInfo.TaskStatus ? wfStepInfo.TaskStatus : wfStepInfo.StepStatus);
            if (wfStatus && wfStatus.toUpperCase() == "STEPCOMPLETED")
                return true;
            else
                return false;
        },
        isFailed: function (wfStepInfo) {
            var wfStatus = wfStepInfo.StepStatus && wfStepInfo.StepStatus.toUpperCase() == "FAILED" ? "STEPFAILED" : (wfStepInfo.TaskStatus ? wfStepInfo.TaskStatus : wfStepInfo.StepStatus);
            if (wfStatus && wfStatus.toUpperCase() == "STEPFAILED")
                return true;
            else
                return false;
        },
        isInProgress: function (wfStepInfo) {            
            var wfStatus = wfStepInfo.StepStatus && (wfStepInfo.StepStatus.toUpperCase() == "COMPLETED" || wfStepInfo.StepStatus.toUpperCase() == "SUCCEEDED" || wfStepInfo.StepStatus.toUpperCase() == "FAILED") ? "STEPDONE" : (wfStepInfo.TaskStatus ? wfStepInfo.TaskStatus : wfStepInfo.StepStatus);
            if (wfStatus && (wfStatus.toUpperCase() == "STEPDONE"))
                return false;
            else
                return true;
        },
        close: function () {
            this.hide();
            this.remove();
        }

    });
</script><dom-module id="PFT-NewEntry" assetpath="Components/WorkOrder/">
    <template>
        <div id="wom_newEntry" class="newEntry" on-tap="onClick">
            <span>{{displayCount}}</span><span id="newEntryClose" style="display:none" class="clear-cross"></span>
        </div>
    </template>

    <script>
        Polymer({

            is: 'PFT-NewEntry',
            properties: {
                workOrderType: {
                    type: String,
                    value: function () {
                        return "";
                    }
                },
                totalCount: {
                    type: Number
                },
                displayCount: {
                    type: String,
                    value: function () {
                        return "";
                    },
                    notify: true
                },
                newEntry: {
                    type: Object,
                    value: {
                    }
                },
                isViewed: {
                    type: Boolean,
                    value: false
                },
                latestValue: {
                    type: String,
                    value: ""
                }
            },
            attached: function () {
                this.async(function () {
                    var workOrderType = $jq('#mainWoType').val();
                    var dashboardType = $jq('#dashboardType') ? $jq('#dashboardType').val() : '';
                    if (workOrderType) {
                        if (dashboardType && dashboardType.toUpperCase() == 'CHEVRON')
                            this.workOrderType = workOrderType
                        else
                            this.workOrderType = workOrderType
                        this.getCount(this.workOrderType);
                    }
                    else {
                        this.$.wom_newEntry.hide();
                        this.$.newEntryClose.hide();
                    }
                });
            },
            incrementCount: function (workOrderType) {
                if (this.workOrderType.split('|').indexOf(workOrderType) >= 0) {
                    this.totalCount = this.totalCount + 1;
                    this.updateCount();
                }
            },
            decrementCount: function (workOrderType) {
                if (this.workOrderType.split('|').indexOf(workOrderType) >= 0) {
                    this.totalCount = this.totalCount - 1;
                    this.updateCount();
                }
            },
            updateCount: function () {
                var actionType = $jq('#actionType').val();
                if (actionType != 'WorkOrderDashboard' && this.totalCount > 0) {
                    this.$.wom_newEntry.show();
                    this.displayCount = this.totalCount + " New";
                }
                else {
                    this.$.wom_newEntry.hide();
                }
            },
            getCount: function (workOrderType) {
                var newEntries = sessionStorage.getItem("WOM_NewEntries");
                var count = 0;
                if (newEntries && workOrderType) {
                    newEntries = JSON.parse(newEntries);
                    var templateIndex = 0;
                    jQuery.each(workOrderType.split('|'), function (index, workOrderType) {
                        templateIndex = 0;
                        var templateEntries = jQuery.grep(newEntries, function (entry, index) {
                            templateIndex = index;
                            return entry.workOrderType == workOrderType;
                        });
                        if (templateEntries && templateEntries.length > 0) {
                            var notViewedItems = jQuery.grep(templateEntries[0].values, function (woItem, woIndex) {
                                return woItem.isViewed == false;
                            });
                            if (notViewedItems.length > 0) {
                                newEntries[templateIndex] = {
                                    workOrderType: workOrderType,
                                    values: notViewedItems
                                };
                            }
                            else {
                                var templateEntries = jQuery.grep(newEntries, function (entries, index) {
                                    return entries.workOrderType != workOrderType;
                                });
                                newEntries = templateEntries;
                            }
                            count = notViewedItems && notViewedItems.length > 0 ? count + notViewedItems.length : count;
                        }
                    });

                }
                if (newEntries && newEntries.length > 0) {
                    sessionStorage.setItem("WOM_NewEntries", JSON.stringify(newEntries));
                }
                else {
                    sessionStorage.removeItem("WOM_NewEntries");
                }
                this.totalCount = count;
                this.updateCount();
            },
            isWOAlreadyExists: function (currentValues, value) {
                var filtered = jQuery.grep(currentValues, function (item, index) {
                    return (item.woId == value);
                });
                if (filtered.length > 0)
                    return true;
                else
                    return false;
            },
            addNewEntry: function (workOrderType, value) {
                var newEntries = sessionStorage.getItem("WOM_NewEntries");
                if (newEntries) {
                    newEntries = JSON.parse(newEntries);
                    var templateIndex = 0;
                    var templateEntries = jQuery.grep(newEntries, function (entries, index) {
                        templateIndex = index;
                        return entries.workOrderType == workOrderType;
                    });
                    if (templateEntries && templateEntries.length > 0) {
                        var currentValues = templateEntries[0].values;
                        if (currentValues && currentValues.length > 0) {
                            if (!this.isWOAlreadyExists(currentValues, value)) {
                                currentValues.push({ woId: value, isViewed: this.isViewed });
                                newEntries[templateIndex] = {
                                    workOrderType: workOrderType,
                                    values: currentValues
                                };
                            }
                            else
                                return;
                        }
                    }
                    else {
                        var templateEntry = {
                            workOrderType: workOrderType,
                            values: [{ woId: value, isViewed: this.isViewed }]
                        };
                        newEntries.push(templateEntry);
                    }
                }
                else {
                    newEntries = [];
                    var templateEntry = {
                        workOrderType: workOrderType,
                        values: [{ woId: value, isViewed: this.isViewed }]
                    };
                    newEntries.push(templateEntry);
                }
                sessionStorage.setItem("WOM_NewEntries", JSON.stringify(newEntries));
                this.incrementCount(workOrderType);
                if (this.isViewed) {
                    LoadNewEntries(false);
                }
            },
            removeNewEntry: function (workOrderType, value) {
                var newEntries = sessionStorage.getItem("WOM_NewEntries");
                if (newEntries) {
                    newEntries = JSON.parse(newEntries);
                    var templateIndex = 0;
                    var templateEntries = jQuery.grep(newEntries, function (entries, index) {
                        templateIndex = index;
                        return entries.workOrderType == workOrderType;
                    });
                    if (templateEntries && templateEntries.length > 0) {
                        var filtered = this.removeTemplateValue(templateEntries[0].values, value);
                        if (filtered.length > 0) {
                            newEntries[templateIndex] = {
                                workOrderType: workOrderType,
                                values: filtered
                            };
                        }
                        else {
                            var templateEntries = jQuery.grep(newEntries, function (entries, index) {
                                return entries.workOrderType != workOrderType;
                            });
                            newEntries = templateEntries;
                        }
                    }
                    else
                        return;

                    sessionStorage.setItem("WOM_NewEntries", JSON.stringify(newEntries));
                    this.decrementCount(workOrderType);
                    if (this.isViewed) {
                        LoadNewEntries(false);
                    }
                }
            },
            removeTemplateValue: function (templateEntries, entryToRemove) {
                var filtered = jQuery.grep(templateEntries, function (item, index) {
                    return (item.woId != entryToRemove);
                });
                return filtered;
            },
            isNewEntry: function (value) {
                var isNew = false;
                if (this.isViewed)
                    return isNew;
                var newEntries = sessionStorage.getItem("WOM_NewEntries");
                if (newEntries && this.workOrderType) {
                    newEntries = JSON.parse(newEntries);
                    var templateIndex = 0;
                    jQuery.each(this.workOrderType.split('|'), function (index, workOrderType) {
                        var templateEntries = jQuery.grep(newEntries, function (entries, index) {
                            templateIndex = index;
                            return entries.workOrderType == workOrderType;
                        });
                        if (templateEntries && templateEntries.length > 0) {
                            var filtered = jQuery.grep(templateEntries[0].values, function (item, index) {
                                return (item.woId == value && !item.isViewed);
                            });
                            if (filtered && filtered.length > 0) {
                                isNew = true;
                                return true;
                            }
                        }
                    });
                }
                return isNew;
            },
            getAllNewEntries: function (workOrderType) {
                var newEntries = sessionStorage.getItem("WOM_NewEntries");
                var currentValues = null;
                if (newEntries) {
                    newEntries = JSON.parse(newEntries);
                    jQuery.each(workOrderType.split('|'), function (index, template) {
                        var templateEntries = jQuery.grep(newEntries, function (entries, index) {
                            return entries.workOrderType == template;
                        });
                        if (templateEntries && templateEntries.length > 0) {
                            jQuery.each(templateEntries[0].values, function (index, value) {
                                if (this.isViewed) {
                                    currentValues = currentValues && currentValues.length > 0 ? currentValues + "," + value.woId : value.woId;
                                }
                                else {
                                    if (!value.isViewed) {
                                        currentValues = currentValues && currentValues.length > 0 ? currentValues + "," + value.woId : value.woId;
                                    }
                                }
                            });
                        }
                    });
                }
                return currentValues;
            },
            getCurrentTemplateEntries: function () {
                return this.getAllNewEntries(this.workOrderType);
            },
            removeCurrentTemplateEntries: function (workOrderType) {
                var newEntries = sessionStorage.getItem("WOM_NewEntries");
                if (newEntries) {
                    var templateEntries = JSON.parse(newEntries);;
                    jQuery.each(workOrderType.split('|'), function (index, template) {
                        templateEntries = jQuery.grep(templateEntries, function (entries, index) {
                            return entries.workOrderType != template;
                        });
                    });
                    if (templateEntries && templateEntries.length > 0) {
                        sessionStorage.setItem("WOM_NewEntries", JSON.stringify(templateEntries));
                    }
                    else
                        sessionStorage.removeItem("WOM_NewEntries");
                }
            },
            makeMarkAsViewed: function (workOrderType) {
                var newEntries = sessionStorage.getItem("WOM_NewEntries");
                if (newEntries) {
                    var templateEntries = JSON.parse(newEntries);
                    jQuery.each(templateEntries, function (index, template) {
                        jQuery.each(template.values, function (valueIndex, woValue) {
                            woValue.isViewed = true;
                        });
                    });
                    sessionStorage.setItem("WOM_NewEntries", JSON.stringify(templateEntries));
                }
            },
            removeEntries: function (workOrderType) {
                this.removeCurrentTemplateEntries(workOrderType);
                this.latestValue = "";
                if (workOrderType == this.workOrderType) {
                    this.totalCount = 0;
                    this.updateCount();
                }
            },
            onClick: function () {
                if (this.isViewed) {
                    this.onClose();
                } else {
                    $jq('#Search').val('');
                    this.$.newEntryClose.show();
                    if ($jq("#actionsDiv").length > 0)
                        $jq("#actionsDiv").addClass("disabledActions");
                    if ($jq('#sortDiv').length > 0)
                        $jq("#sortDiv").addClass("disabledActions");
                    if ($jq('#filterDiv').length > 0)
                        $jq("#filterDiv").addClass("disabledActions");
                    this.isViewed = true;
                    LoadNewEntries(false);
                    this.makeMarkAsViewed();
                }
            },
            onClose: function () {
                this.isViewed = false;
                this.$.wom_newEntry.hide();
                this.$.newEntryClose.hide();
                this.removeEntries(this.workOrderType);
                if ($jq("#actionsDiv").length > 0)
                    $jq("#actionsDiv").removeClass("disabledActions");
                if ($jq('#sortDiv').length > 0)
                    $jq("#sortDiv").removeClass("disabledActions");
                if ($jq('#filterDiv').length > 0)
                    $jq("#filterDiv").removeClass("disabledActions");
                if (document.getElementById('Search'))
                    document.getElementById('Search').value = '';
                LoadDashboardData(false);
            }
        });
    </script>

</dom-module>
<dom-module id="PFT-WFComponent" assetpath="Components/WorkOrder/">
    <template>
        <ul id$="statusbarWrapper_{{tempProcessInstanceId}}" class$="statusbarWrapper{{dashboardType}}">
            <li class="wfIconli right-content cuz-menu RowData">
                <pft-wfstatusicon id$="{{assignIdToWFIcon(wfData.ProcessInstanceId,rowData.StdAttributes.S_WO_ID)}}" wo-id="{{rowData.StdAttributes.S_WO_ID}}" wf-id="{{wfData.ProcessInstanceId}}" click-function="HandleClick('/BC/Product/Actions/ClearActionHandler.aspx','','showWfContextMenu','wfId+{{wfData.ProcessInstanceId}}&amp;&amp;wfTemplateName+{{wfData.WFTemplateName}}&amp;&amp;status+{{wfData.WFStatus}}&amp;&amp;clearFileName+{{rowData.StdAttributes.S_WO_ID}}&amp;&amp;priority+{{rowData.PFTRow.0.PFTColumn.4.PFTCell.3.Value}}&amp;&amp;wfIconId+{{assignIdToWFIcon(wfData.ProcessInstanceId,rowData.StdAttributes.S_WO_ID)}}')" status="{{wfData.WFStatus}}"></pft-wfstatusicon>
            </li>
            <template is="dom-if" if="{{isChevron(dashboardType)}}">
                <li id$="outerchevron_{{tempProcessInstanceId}}" class="wfbox-outerchevron" style$="width:{{setWidth(tempProcessInstanceId,wfData,'och')}}px">
                    <a id$="arrow_{{tempProcessInstanceId}}" style="display: none" class="wfarrow-leftchevron wfarrow clear-moveL" clicked="clicked"></a>
                    <a id$="arrow_{{tempProcessInstanceId}}" style="display: none" class="wfarrow-rightchevron wfarrow clear-moveR"></a>
                    <div id$="wfBox_{{tempProcessInstanceId}}" class="wfbox-innerchevron" style$="width:{{setWidth(tempProcessInstanceId,wfData,'ich')}}px">
                        <ul id$="wfThumb_{{tempProcessInstanceId}}" class="wfthumbchevron" style$="width:{{setThumbWidth(tempProcessInstanceId,wfData)}}px">
                            <template is="dom-repeat" items="{{wfData.WorkflowStepsInfo}}" as="stepInfo" index-as="o_index">
                                <li class$="statuBarli {{CheckIfFirstStatusBar(o_index,wfData.WorkflowStepsInfo)}}">
                                    <pft-wfstatusbar id$="{{assignIdToStatusBar(stepInfo,rowData.StdAttributes.S_WO_ID)}}" actioninfo="{{getWFStatusBarParams(stepInfo,action,rowData)}}" dashboard-type="{{dashboardType}}" parentcmpid="{{SetParentCompId(parentCmpid,o_index)}}" wo-type="{{woType}}">
                                    </pft-wfstatusbar>
                                </li>
                            </template>
                        </ul>
                    </div>
                </li>
                    <li id="viewDetail_{{tempProcessInstanceId}}" class="viewStatusDetail clear-actions" title="click here to view Details" on-click="showStatusDetails">
                        <div id="showOption_{{tempProcessInstanceId}}" style="display: none" class="displayOptions">
                            <div class="viewDetails" title="click here to show View Details" on-click="showViewDetails">Details</div>
                            <div class="viewDetails" title="click here to show Chat Details" on-click="showChatDetails">Chat</div>
                        </div>
                    </li>
                </template>
            <template is="dom-if" if="{{!isChevron(dashboardType)}}">
                <template is="dom-repeat" items="{{wfData.WorkflowStepsInfo}}" as="stepInfo" index-as="o_index">
                    <li class$="statuBarli {{CheckIfFirstStatusBar(o_index,wfData.WorkflowStepsInfo)}}">
                        <pft-wfstatusbar id$="{{assignIdToStatusBar(stepInfo,rowData.StdAttributes.S_WO_ID)}}" actioninfo="{{getWFStatusBarParams(stepInfo,action,rowData)}}" dashboard-type="{{dashboardType}}">
                        </pft-wfstatusbar>
                    </li>
                </template>
            </template>
        </ul>
    </template>
    <script>
        Polymer({
            is: 'PFT-WFComponent',
            attached: function () {
                if (this.dataHost && this.dataHost.dashboardType)
                    this.dashboardType = this.dataHost.dashboardType;
                else
                    this.dashboardType = "";
            },
            properties: {
                wfData: {
                    type: Object,
                    observer: '_setStatusBarCount'
                },
                action: Object,
                rowData: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                dashboardType: {
                    type: String,
                    value: ""
                },
                statusbarColwidth: {
                    type: Number
                },
                tempProcessInstanceId: {
                    type: Number,
                    value: 0
                },
                woType: {
                    type: String,
                    value: ""
                }
            },
            assignIdToWFIcon: function (processInstanceId, woId) {
                return GetWFIconId(processInstanceId, woId);
            },
            getWFStatusBarParams: function (stepInfo, action, data) {
                var wfStepActionConfig = '';
                var actionConfig = '';
                var actionConfigObj = '';
                if (action != "" && action != undefined && action.length == undefined) {
                    var newActionList = new Array();
                    newActionList.push(JSON.stringify(action));
                    action = newActionList;
                }
                if (action && action.length > 0) {
                    for (var i = 0; i < action.length; i++) {
                        actionConfigObj = JSON.parse(action[i]);
                        if (actionConfigObj.WFStepActionConfig) {
                            wfStepActionConfig = jQuery.grep(actionConfigObj.WFStepActionConfig, function (item, index) {
                                return (item.Cng == stepInfo.Cng);
                            });
                            if (wfStepActionConfig && wfStepActionConfig.length > 0) {
                                actionConfigObj.WFStepActionConfig = wfStepActionConfig;
                                break;
                            }
                            else
                                actionConfigObj = '';
                        }
                    }
                }
                var params = {
                    "actionType": stepInfo.ActionType,
                    "stepInfo": stepInfo,
                    // "dependentStepInfo": stepInfo.DependentWFStepInfo ? stepInfo.DependentWFStepInfo : '',
                    "dependentStepCng": (actionConfigObj && actionConfigObj.WFStepActionConfig) ? actionConfigObj.WFStepActionConfig[0].DependentStepCngs : "",
                    "actionConfig": actionConfigObj && actionConfigObj.WFStepActionConfig ? actionConfigObj.WFStepActionConfig : "",// action && action.WFStepActionConfig ? action.WFStepActionConfig : "",
                    "assetId": data.StdAttributes.S_DMGUID,
                    "assetTenantId": data.StdAttributes.ObjTenantId,
                    "woTitle": data.StdAttributes.S_WO_ID,
                    "dueDate": data.PFTRow != null ? data.PFTRow[0].PFTColumn[1].PFTCell[2].Value : "",
                    "dashboardId": this.domHost.id.split('_')[1],
                    "WOId": data.StdAttributes.S_WO_ID
                };
                return params;
            },
            assignIdToStatusBar: function (wfStepInfo, woId) {
                return GetWFBarId(wfStepInfo, woId);
            },
            CheckIfFirstStatusBar: function (index, wfSteps) {
                if (index == 0)
                    return "statuBarliFirstChild";
                else if (index == wfSteps.length - 1)
                    return "statuBarliLastChild";
                else
                    return "";
            },
            _setStatusBarCount: function (wfData) {
                SetWfStatusBarCount(wfData.WorkflowStepsInfo);
                if ($jq('#dashboardType') && ($jq('#dashboardType').val().toUpperCase() == "CHEVRON" || $jq('#dashboardType').val().toUpperCase() == "V2")) {
                    this.tempProcessInstanceId = SetTempScrollId(wfData);
                    var scrollId = "arrow_" + this.tempProcessInstanceId;

                    var elems = document.querySelectorAll("[id='" + scrollId + "']");
                    if (elems && elems.length > 1) {
                        $jq(elems[1]).removeAttr('clicked');
                        $jq(elems[0]).attr('clicked', 'clicked');
                    }

                    var box = $jq('#wfBox_' + this.tempProcessInstanceId + '.wfbox-innerchevron');
                    var x = ((box.width() / 2)) + box.scrollLeft();
                    box.animate({
                        scrollLeft: -x,
                    });
                    this.async(function () {
                        $jq('.wfarrow#' + scrollId).hide();
                        $jq('.wfthumbchevron#wfThumb_' + scrollId.split('_')[1]).show();
                        OnMouseAction(wfData.WorkflowStepsInfo.length, scrollId);
                        if (wfData.WorkflowStepsInfo.length > 6) {
                            AttachScrollClickEvent(scrollId);
                        }
                    }, 1);
                }
            },


            isChevron: function (dashhboardType) {
                if (dashhboardType && dashhboardType.toUpperCase() == "CHEVRON")
                    return true;
                else
                    return false;
            },
            setWidth: function (tempProcessInstanceId, wfData, elementType) {
                var scrollId = "arrow_" + tempProcessInstanceId;
                var thumbChevronElem = $jq('.wfthumbchevron#wfThumb_' + scrollId.split('_')[1]).children();
                var statusLiWidth = wfData.WorkflowStepsInfo.length >= 6 ? 330 :
                    (wfData.WorkflowStepsInfo.length * ((thumbChevronElem && thumbChevronElem.length > 0) ? parseInt(thumbChevronElem.css('width').split('p')[0]) : 55));
                if (elementType && elementType == 'och')
                    statusLiWidth = statusLiWidth + 40;
                return statusLiWidth;
            },
            setThumbWidth: function (tempProcessInstanceId, wfData) {
                var width = '';
                var thumbChevronElem = $jq('.wfthumbchevron#wfThumb_' + tempProcessInstanceId).children();
                if (wfData.WorkflowStepsInfo.length > 6) {
                    width = wfData.WorkflowStepsInfo.length * ((thumbChevronElem && thumbChevronElem.length > 0 && thumbChevronElem.css('width').split('p')[0] != "0") ? parseInt(thumbChevronElem.css('width').split('p')[0]) : 55);
                }
                if (this.domHost.domHost && this.domHost.domHost.defaultParams && this.domHost.domHost.defaultParams.TemplateName.contains('Clear_ProcessMonitoringTemplate')) {
                    this.async(function () {
                        var thumbChevronElem = $jq('.wfthumbchevron#wfThumb_' + tempProcessInstanceId).children();
                        width = wfData.WorkflowStepsInfo.length * ((thumbChevronElem && thumbChevronElem.length > 0 &&thumbChevronElem.css('width').split('p')[0] != "0")? parseInt(thumbChevronElem.css('width').split('p')[0]):55);
                        $jq('.wfthumbchevron#wfThumb_' + tempProcessInstanceId).css("width", width);
                    }), 1;
                }
                return width;
            },
            showStatusDetails: function () {
                $jq(".displayOptions").each(function (index) {
                    var id = $jq(".displayOptions")[index].id;
                    document.getElementById(id).hide();
                });
                var getId = this.tempProcessInstanceId;
                if ((isMobile.any()))
                {
                $jq('#showOption_' + getId).css("display", "block");
                }
                else
                {
                     LoadDetailStatusView(this.wfData, this.rowData, this.dashboardType);
                }
            },
            showViewDetails: function () {
                LoadDetailStatusView(this.wfData, this.rowData, this.dashboardType);
            },
            showChatDetails: function () {
                LoadChatView(this.rowData.StdAttributes.S_WO_ID, this.rowData.StdAttributes.MAINTITLE, this.tempProcessInstanceId);
            },
            SetParentCompId: function (uId, index) {
                return uId + "_" + index;
            }
        });
    </script>
</dom-module>
<dom-module id="PFT-ExportAction" assetpath="Components/WorkOrder/">
    <template>
        <template is="dom-if" if="{{!isActionTextRequired(actionConfig)}}">
            <div id="exportAction" class="exportAction" title$="{{actionConfig.ActionTooltip}}" exportactionconfig="{{SetClickAttribute(actionConfig.ActionOnClickFunction,actionConfig.ActionDefaultParams)}}" actionname$="{{actionConfig.ActionName}}">
                <span class="exportAction clear-fileDownload FL marL10 iconSpacer linked no-js"></span>
            </div>
        </template>
        <template is="dom-if" if="{{isActionTextRequired(actionConfig)}}">
            <div id="exportAction" class="actionWrap exportAction" title$="{{actionConfig.ActionTooltip}}" exportactionconfig="{{SetClickAttribute(actionConfig.ActionOnClickFunction,actionConfig.ActionDefaultParams)}}" actionname$="{{actionConfig.ActionName}}" on-tap="downloadWOtemplate">
                <span class="actionIcon exporttAction clear-fileDownload"></span>
                <span class="actionLabel">{{actionConfig.ActionDisplayText}}</span>
                <iframe id="WOImportTemplate" framebordxer="0" style="display: none;" src="Components/WorkOrder"></iframe>
            </div>
        </template>
    </template>        
    <script>
        Polymer({

            is: 'PFT-ExportAction',

            properties: {
                actionConfig: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                }
            },
            SetClickAttribute: function (actionName, actionParams) {
                var attr = '';
                var params = '';
                var paramsObj = '';
                var functionToCall = '';
                if (actionName != undefined && actionName != null) {
                    attr = document.createAttribute('OnClick');
                    if (actionParams != null && actionParams != undefined) {
                        paramsObj = actionParams.split(',');
                        params = paramsObj.join("','");
                        functionToCall = actionName + "('" + params + "');";
                    }
                    else
                        functionToCall = actionName;
                    attr.value = functionToCall;
                }
                if (this.$.createAction != undefined)
                    this.$.createAction.setAttributeNode(attr);
            },
            isActionTextRequired: function (actionConfig) {
                return IsToolbarActionTextRequired(actionConfig);
            },
            downloadWOtemplate: function () {
                if (IsActionDisabled(this.id))
                    return false;
                else
                    InvokeEditActionForWorkorder(this.actionConfig.ActionOnClickFunction);
               // downloadWOTemplate();
            }
        });
    </script>

</dom-module>
<dom-module id="PFT-ActionStartWO" assetpath="Components/WorkOrder/">
    <template>
        <div id="startWf" class="actionDivWrap">
            <div class="actionDiv">
                <pft-text title="{{getToolTip(rowData)}}" cssclass-name="{{getCssClass(rowData)}}" action="{{SetClickAttribute(rowData)}}" value="{{getLabel(rowData)}}"></pft-text>
            </div>
        </div>
    </template>
    <script>
        Polymer({
            is: 'PFT-ActionStartWO',
            properties: {
                rowData: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                cssClass: {
                    type: String,
                },
                title: {
                    type: String,
                },
                label: {
                    type: String,
                }
            },
            SetClickAttribute: function (rowData) {
                var woId = '';
                var woStatus = '';
                if (rowData.StdAttributes.S_WO_ID != undefined && rowData.StdAttributes.S_WO_ID != "") {
                    woId = rowData.StdAttributes.S_WO_ID;
                    woStatus = rowData.StdAttributes.S_STATUS;
                }
                var actionValue = "HandleClick('', '', 'InitiateProcessOnDemand', 'workOrderId+" + woId + "&&woStatus+" + woStatus + "')";
                return actionValue;
            },
            getCssClass: function (rowData) {
                var cssClass = 'actplayoutline';
                return cssClass;
            },
            getToolTip: function (rowData) {
                var toolTip = "Click here to start Process";
                return toolTip;
            },
            getLabel: function (rowData) {
                var label = 'Start WO';
                return label;
            }
        });
    </script>

</dom-module>

<dom-module id="PFT-StartWFAction" assetpath="Components/WorkOrder/">
    <template>
        <template is="dom-if" if="{{!isActionTextRequired(actionConfig)}}">
            <div id="startAction" class="startAction" title$="{{actionConfig.ActionTooltip}}" startactionconfig="{{SetClickAttribute(actionConfig.ActionOnClickFunction,actionConfig.ActionDefaultParams)}}" actionname$="{{actionConfig.ActionName}}">
            </div>
        </template>
        <template is="dom-if" if="{{isActionTextRequired(actionConfig)}}">
            <div id="startAction" class="actionWrap" title$="{{actionConfig.ActionTooltip}}" startactionconfig="{{SetClickAttribute(actionConfig.ActionOnClickFunction,actionConfig.ActionDefaultParams)}}" actionname$="{{actionConfig.ActionName}}" on-tap="startProcess">
                <span class="actionIcon exporttAction clear-playOutline"></span>
                <span class="actionLabel">{{actionConfig.ActionDisplayText}}</span>

            </div>
        </template>
    </template>
    <script>
        Polymer({

            is: 'PFT-StartWFAction',

            properties: {
                actionConfig: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                }
            },
            startProcess: function () {
                if (IsActionDisabled(this.id))
                    return false;
                else
                    InitiateProcessOnDemand();
            },
            SetClickAttribute: function (actionName, actionParams) {
                var attr = '';
                var params = '';
                var paramsObj = '';
                var functionToCall = '';
                if (actionName != undefined && actionName != null) {
                    attr = document.createAttribute('OnClick');
                    if (actionParams != null && actionParams != undefined && actionParams != "") {
                        paramsObj = actionParams.split(',');
                        params = paramsObj.join("','");
                        functionToCall = actionName + "('" + params + "');";
                    }
                    else
                        functionToCall = actionName;
                    attr.value = functionToCall;
                }
                if (document.getElementById('startAction') != undefined)
                    document.getElementById('startAction').setAttributeNode(attr);
            },
            isActionTextRequired: function (actionConfig) {
                return IsToolbarActionTextRequired(actionConfig);
            }
        });
    </script>

</dom-module>
<dom-module id="PFT-DetailedStatusView" assetpath="Components/WorkOrder/">
    <template>
        <div id="detailedStatusView" class="container">
            <div class="content">
                <ul id="statusbarWrapper" class$="statusbarWrapper{{dashboardType}}">
                    <template is="dom-repeat" items="{{wfData.WorkflowStepsInfo}}" as="stepInfo" index-as="o_index">
                        <li id$="{{assignIdToStatusBarLi(stepInfo,stepInfo.WorkflowItemID)}}" class$="statuBarli detailStatusBar {{CheckIfFirstStatusBar(o_index,wfData.WorkflowStepsInfo)}}">
                            <pft-wfstatusbar id$="{{assignIdToStatusBar(stepInfo,stepInfo.WorkflowItemID)}}" actioninfo="{{getWFStatusBarParams(stepInfo)}}" dashboard-type="{{dashboardType}}">
                            </pft-wfstatusbar>
                            <div class="wfBarStatus">
                                <div id="wfStatusInfo" class="wfStatusInfo" title$="{{getBarStatus(stepInfo)}}">{{getBarStatus(stepInfo)}} </div>
                                <span class="wfStartDate" title$="{{getWFDate('createdOn',stepInfo)}}">{{getWFDate('createdOn',stepInfo)}}</span>
                                <span class="wfEndDate" title$="{{getWFDate('lastUpdatedOn',stepInfo)}}">{{getWFDate('lastUpdatedOn',stepInfo)}}</span>
                            </div>
                        </li>
                    </template>
                </ul>
            </div>
        </div>
    </template>
    <script>
        Polymer({
            is: 'PFT-DetailedStatusView',
            attached: function () {
                this.async(function () {
                    //loadScroll('detailedStatusView');
                    Ps.initialize(document.getElementById('detailedStatusView'), {
                        wheelPropagation: false,
                        swipePropagation: true,
                        useBothWheelAxes: true,
                        useKeyboard: true,
                        suppressScrollX: false,
                        suppressScrollY: true,
                    });
                }, 1);
            },
            properties: {
                wfData: {
                    type: Object,
                    observer: '_setStatusBarCount'
                },
                rowData: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                dashboardType: {
                    type: String,
                    value: ""
                }
            },
            CheckIfFirstStatusBar: function (index, wfSteps) {
                if (index == 0)
                    return "statuBarliFirstChild";
                else if (index == wfSteps.length - 1)
                    return "statuBarliLastChild";
                else
                    return "";
            },
            assignIdToStatusBar: function (wfStepInfo, workItemId) {
                return GetWFBarId(wfStepInfo, workItemId);
            },
            assignIdToStatusBarLi: function (wfStepInfo, workItemId) {
                if (wfStepInfo && wfStepInfo.WorkflowInstanceID) {
                    return 'wfDetails_WF_' + wfStepInfo.WorkflowInstanceID + '_' + wfStepInfo.Cng;
                }
                else if (this.rowData.StdAttributes.S_WO_ID && wfStepInfo.Cng) {
                    return 'wfDetails_WF_' + this.rowData.StdAttributes.S_WO_ID + '_' + wfStepInfo.Cng;
                }
                else if (wfStepInfo && wfStepInfo.StepGuid) {
                    return 'wfDetails_WF_' + wfStepInfo.StepGuid;
                }
            },
            getWFStatusBarParams: function (stepInfo) {
                var params = {
                    "stepInfo": stepInfo
                };
                return params;
            },
            _setStatusBarCount: function (wfData) {
                SetWfStatusBarCount(wfData.WorkflowStepsInfo);
                this.async(function () {
                    var width = (wfData.WorkflowStepsInfo.length * (parseInt($jq('.detailStatusBar').children().css('width').split('p')[0]) + 25)) - 25;
                    $jq('#statusbarWrapper').css("width", width);
                }, 1)
            },
            getBarStatus: function (stepInfo) {
                var wfStatus = "NA";
                if (stepInfo.StepStatus && (stepInfo.StepStatus.toUpperCase() == "FAILED" || stepInfo.StepStatus.toUpperCase() == "REJECTED")) {
                    wfStatus = stepInfo.StepStatus;
                }
                else {
                    wfStatus = stepInfo.TaskStatus ? stepInfo.TaskStatus : stepInfo.StepStatus;
                }
                if (wfStatus.toUpperCase() != "NA") {
                    wfStatus = GetStepStatusInCamelCase(wfStatus);
                }
                return wfStatus == "NA" ? "Not Started" : wfStatus;
            },
            getWFDate: function (dateInfo, stepInfo) {
                var dateTime = null; var wfDate = null;
                if (dateInfo == "createdOn")
                    dateTime = stepInfo.CreatedOn;
                else if (dateInfo == "lastUpdatedOn" && ((stepInfo.TaskStatus &&stepInfo.TaskStatus.toUpperCase() == "COMPLETED") || stepInfo.StepStatus.toUpperCase() == "COMPLETED"))
                    dateTime = stepInfo.LastUpdatedOn;
                if (dateTime) {
                    wfDate = SUT_USR(dateTime, "ddd,dd mmm hhh:nn:ss");
                }
                return wfDate != null ? wfDate : "NA";
            }
        });
    </script>
</dom-module>
<dom-module id="PFT-CloneWorkorder" assetpath="Components/WorkOrder/">
    <template>
        <template is="dom-if" if="{{!isActionTextRequired(actionConfig)}}">
            <div id="cloneAction" class="startAction" title$="{{actionConfig.ActionTooltip}}" startactionconfig="{{SetClickAttribute(actionConfig.ActionOnClickFunction,actionConfig.ActionDefaultParams)}}" actionname$="{{actionConfig.ActionName}}">
            </div>
        </template>
        <template is="dom-if" if="{{isActionTextRequired(actionConfig)}}">
            <div id="cloneAction" class="actionWrap" title$="{{actionConfig.ActionTooltip}}" startactionconfig="{{SetClickAttribute(actionConfig.ActionOnClickFunction,actionConfig.ActionDefaultParams)}}" actionname$="{{actionConfig.ActionName}}" on-tap="cloneWO">
                <span class="actionIcon exporttAction clear-copy2"></span>
                <span class="actionLabel">{{actionConfig.ActionDisplayText}}</span>

            </div>
        </template>
    </template>
    <script>
        Polymer({

            is: 'PFT-CloneWorkorder',

            properties: {
                actionConfig: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                }
            },
            cloneWO: function () {
                cloneWorkOrder();
            },
            SetClickAttribute: function (actionName, actionParams) {
                var attr = '';
                var params = '';
                var paramsObj = '';
                var functionToCall = '';
                if (actionName != undefined && actionName != null) {
                    attr = document.createAttribute('OnClick');
                    if (actionParams != null && actionParams != undefined && actionParams != "") {
                        paramsObj = actionParams.split(',');
                        params = paramsObj.join("','");
                        functionToCall = actionName + "('" + params + "');";
                    }
                    else
                        functionToCall = actionName;
                    attr.value = functionToCall;
                }
                if (document.getElementById('cloneAction') != undefined)
                    document.getElementById('cloneAction').setAttributeNode(attr);
            },
            isActionTextRequired: function (actionConfig) {
                return IsToolbarActionTextRequired(actionConfig);
            }
        });
    </script>

</dom-module>
<dom-module id="PFT-SubWOComponent" assetpath="Components/WorkOrder/">
    <template>

        <template is="dom-if" if="{{CheckForDashboardType('CHEVRON')}}">
            <div class="wfStatusBars">
                <template is="dom-repeat" items="{{GetWorkflowStepsInfoObj(rowData.Attributes.WorkflowInstances)}}" as="value" index-as="w_index">
                    <pft-wfcomponent id="wfComp" dashboard-type="{{dashboardType}}" wf-data="{{value}}" action="{{action}}" row-data="{{rowData}}" statusbar-colwidth="{{statusbarColwidth}}" parent-cmpid="{{uid}}"></pft-wfcomponent>
                </template>
            </div>
        </template>

        <template is="dom-if" if="{{CheckForDashboardType('V2')}}">
            <template is="dom-repeat" items="{{GetSubWoDataObj(rowData.Attributes.SubWOData)}}" as="SubWOData" index-as="{{rindex}}">
                <template is="dom-if" if="{{CheckForWFInstances(SubWOData.Attributes.WorkflowInstances)}}">
                    <div class="WFTblV2MetaWrapper" id$="[[AssignRowId(oindex)]]">
                        <div class="WFTblV2MetaData pfttext">
                            <pft-text class="subWOTitle" value="{{SubWOData.Attributes.MAINTITLE}}" parent-cmpid="{{SetParentCompId('idMetaData1')}}" wo-type="{{woType}}"></pft-text>
                            <div class="pfttextcomponent subWOMetaData">
                                <pft-textcomponenthz textseparator="|" labels="" data="(Meta Data)" uid="idMetaData2" wo-type="{{woType}}"></pft-textcomponenthz>
                            </div>
                        </div>
                        <div class$="progressStatusCol{{dashboardType}} WOmetadataTD2" style$="width:{{statusbarColwidth}}px">
                            <div class="wfStatusBars">
                                <template is="dom-repeat" items="{{GetWorkflowStepsInfoObj(SubWOData.Attributes.WorkflowInstances)}}" as="subWovalue" index-as="s_index">
                                    <pft-wfcomponent id="wfComp" dashboard-type="{{dashboardType}}" wf-data="{{subWovalue}}" action="{{action}}" row-data="{{SubWOData}}" statusbar-colwidth="{{statusbarColwidth}}" parent-cmpid="{{uid}}" wo-type="{{woType}}"></pft-wfcomponent>
                                </template>
                            </div>
                        </div>
                    </div>
                </template>
            </template>
        </template>
    </template>
    <script>
        Polymer({
            is: 'PFT-SubWOComponent',
            properties: {
                rowData: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                action: Object,
                rindex: {
                    type: Number
                },
                oindex: {
                    type: Number
                },
                dashboardType: {
                    type: String
                },
                statusbarColwidth: {
                    type: Number
                },
                woType: {
                    type: String,
                    value: ""
                }
            },
            GetWorkflowStepsInfoObj: function (wfstepsInfo) {
                var wfStepsObj;
                if (wfstepsInfo != undefined && wfstepsInfo != "") {
                    wfStepsObj = JSON.parse(wfstepsInfo);
                }
                return wfStepsObj;
            },
            CheckForWFInstances: function (wfInstances) {
                var wfStepsObj;
                if (wfInstances)
                    wfStepsObj = JSON.parse(wfInstances);
                if (wfStepsObj && wfStepsObj.length > 0)
                    return true;
                else
                    return false;
            },
            GetSubWoDataObj: function (subWoDataJson) {
                var subWoDataObj;
                if (subWoDataJson != undefined && subWoDataJson != "") {
                    subWoDataObj = JSON.parse(subWoDataJson);
                }
                return subWoDataObj;
            },
            SetParentCompId: function (uId) {
                return uId + "_0";
            },
            CheckForDashboardType: function (value) {
                if ($jq('#dashboardType').val().toUpperCase() == value)
                    return true;
                else
                    return false;
            }
        });
    </script>
</dom-module>
<dom-module id="PFT-TaskInfo" assetpath="Components/WorkOrder/">
    <template>
        <div id="main_TaskInfoDiv" class="taskInfoCallOut taskInfoWrapper">
            <h2 class="informationHeader">Task Status: {{GetHeaderStatusInCamelCase(taskDetails,wfstepInfo)}}</h2>
            <div id="taskInfoContainer" class="container taskInfoContainer" checkusers="{{CheckForUsers(taskDetails)}}">
                <template is="dom-if" if="{{isUserExist}}">
                    <template is="dom-repeat" items="{{taskUsers}}" as="taskUser" index-as="o_index">
                        <div id="drpDown_[[o_index]]" class="taskInfoItem">
                            <div class$="userAcrnym {{getUsercssClass(taskUser,'colNameBubble')}} FL">
                                <div class="FL">
                                    <span class$="userAbbreviation {{getUsercssClass(taskUser,'nameBubble')}}" title$="{{taskUser.UserDisplayName}}">{{taskUser.UserAbbreviation}}</span>
                                </div>
                                <span class="userTimeCodes">{{GetTimeCodes(taskUser)}}</span>
                            </div>
                            <div class="userStatus FR">
                                <span class="userStatusName">{{GetStatusInCamelCase(taskUser.UserTaskStatus.StatusAcronym)}} {{getProgress(wfstepInfo)}}</span>
                                <span class="userDueDate">{{GetFormattedDate(taskUser.UserDueDate,'ddd\, dd MMM - hhh:nn:ss')}}</span>
                            </div>
                            <div class="clr"></div>
                        </div>
                    </template>
                </template>
                <template is="dom-if" if="{{!isUserExist}}">
                    <div id="drpDown_[[o_index]]" class="taskInfoItem sysTaskDetails">
                        <div class="sysTaskStatus FL">
                            <span class="userStatusName">{{GetStatusInCamelCase(wfstepInfo)}} {{getProgress(wfstepInfo)}}</span>
                            <span class="userDueDate">{{GetFormattedDate(wfstepInfo,'ddd\, dd MMM - hhh:nn:ss')}}</span>
                        </div>
                        <div class="clr"></div>
                    </div>
                    <template is="dom-if" if="{{isFailed(wfstepInfo)}}">
                        <div class="sysErrStatus FL">
                            <span class="userStatusName">Last Error: </span>
                            <span class="userDueDate">{{getLastError(wfstepInfo)}}</span>
                        </div>
                        <div class="clr"></div>
                    </template>
                </template>
            </div>
        </div>
    </template>

    <script>
        Polymer({
            is: "PFT-TaskInfo",
            attached: function () {
                //this.divId = this.domHost.id.split('wfDiv_')[1];
            },
            properties: {
                taskUsers: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                wfstepInfo:
                  {
                      type: Object,
                  },
                taskDetails: {
                    type: Object,
                    value: {}
                },
                isUserExist: {
                    type: Boolean,
                    value: false
                }
            },
            GetFormattedDate: function (date, format) {
                var updatedOn;
                if (date.LastUpdatedOn || date.LastUpdatedOn == "")
                    updatedOn = date.LastUpdatedOn ? date.LastUpdatedOn : "NA";
                else
                    updatedOn = date;
                return SUT_USR(updatedOn, format);
            },
            GetTimeCodes: function (taskUser) {
                if (taskUser.TcOut && taskUser.TcOut != "00:00:00:00")
                    return taskUser.TcIn + " - " + taskUser.TcOut;
                else
                    return "";
            },
            getProgress: function (wfStepInfo) {
                var status = "NA";
                if (wfStepInfo.StepStatus && (wfStepInfo.StepStatus.toUpperCase() == "FAILED" || wfStepInfo.StepStatus.toUpperCase() == "REJECTED")) {
                    status = wfStepInfo.StepStatus;
                }
                else {
                    status = wfStepInfo.StepStatus && (wfStepInfo.StepStatus.toUpperCase() == "COMPLETED" || wfStepInfo.StepStatus.toUpperCase() == "SUCCEEDED") ? wfStepInfo.StepStatus :
                        (wfStepInfo.TaskStatus ? wfStepInfo.TaskStatus : wfStepInfo.StepStatus);
                }
                if (status) {
                    status = GetStepStatusInCamelCase(status);
                    var percentage = parseInt(wfStepInfo.StepProgress) || 0;
                    return percentage > 0 && percentage < 100 ? "[" + percentage + "%]" : "";
                }
                else {
                    return "";
                }
            },
            GetStatusInCamelCase: function (status) {
                var statusAcr;
                if (status.TaskStatus || status.StepStatus || status.TaskStatus == "" || status.StepStatus == "")
                    statusAcr = status.TaskStatus ? status.TaskStatus : status.StepStatus
                else
                    statusAcr = status;
                return GetStepStatusInCamelCase(statusAcr);
            },
            GetHeaderStatusInCamelCase: function (status,wfStep) {
                var statusAcr;
                if (status.TaskStatus && !status.IsSystemTaskType)
                    statusAcr = status.TaskStatus.StatusAcronym;
                else if (wfStep.TaskStatus || wfStep.StepStatus || wfStep.TaskStatus == "" || wfStep.StepStatus == "")
                    statusAcr = wfStep.TaskStatus ? wfStep.TaskStatus : wfStep.StepStatus
                return GetStepStatusInCamelCase(statusAcr);
            },
            CheckForUsers: function (taskDetails) {
                if (taskDetails && taskDetails.TaskUsers && taskDetails.TaskUsers.length > 0) {
                    this.isUserExist = true;
                    this.taskUsers = taskDetails.TaskUsers;
                }
                else
                    this.isUserExist = false;
            },
            getUsercssClass: function (taskUser, bubbleType) {
                if (taskUser.IsUserCollaborated==true && taskUser.AssignmentStatus.AssignmentStatusAcronym.toUpperCase() == "COLLABORATED") {
                    if(bubbleType == "colNameBubble")
                        return "collaboratedTaskInfoBubble collNameBubble";
                    else
                        return "";
                }
                else {
                    if (bubbleType == "colNameBubble")
                        return "";
                    else
                        return "nameBubble";
                }
            },
            isFailed: function (wfStepInfo) {
                var wfStatus = wfStepInfo.StepStatus && wfStepInfo.StepStatus.toUpperCase() == "FAILED" ? "STEPFAILED" : (wfStepInfo.TaskStatus ? wfStepInfo.TaskStatus : wfStepInfo.StepStatus);
                if (wfStatus && wfStatus.toUpperCase() == "STEPFAILED")
                    return true;
                else
                    return false;
            },
            getLastError: function (wfStepInfo) {
                var error = wfStepInfo.LastError;
                if (error && this.isFailed(wfStepInfo))
                    return decodeURIComponent(error);
                else
                    return "NA";
            }
        });
    </script>
</dom-module><dom-module id="PFT-BarGraph" assetpath="Components/Task/">
    <template>
        <div class="barChartWrapper">
            <div id="{{graphId}}" class="barChart">
                <template is="dom-repeat" items="{{items}}" as="graphData" index-as="bar">
                    <div id$="{{graphId}}obar_[[bar]]" class$="{{GetAdditionalColorClass(graphData.ChartData)}}" title="{{GetToolTip(graphData.ChartData)}}">
                        <div id$="{{graphId}}ibar_[[bar]]">
                            <pft-individualbar id$="bar_[[bar]]" chartdata="{{graphData.ChartData}}" maxvalue="{{graphData.ChartData.MaxValue}}" graph-id="[[graphId]]" bar="[[bar]]" user-index="[[userIndex]]" height="0"></pft-individualbar>
                        </div>
                        <span class="graphLabel" title="{{GetDateToolTipDetails(graphData.ChartData)}}">
                            {{graphData.ChartData.Label}}
                        </span>

                    </div>

                </template>
            </div>
        </div>
    </template>
    <script>
        Polymer({
            is: 'PFT-BarGraph',
            attached: function () {
            },
            properties:
                {
                    items: {
                        type: Array,
                        value: function () {
                            return [];
                        },
                        notify: true
                    },
                    graphId: String,
                    userIndex: String,
                    bottomHeight: {
                        type: Number,
                        value: 0
                    }

                },
            updateResource: function (data) {
                this.items = data;
            },
            GetAdditionalColorClass: function (chartData) {
                if (!chartData.isHoliday) {
                    return "outerBar";
                }
                else
                    return "holidayColor";
            },
            GetToolTip: function (chartData) {
                if (!chartData.isHoliday)
                    return "";
                else
                    return "Holiday";
            },
            GetDateToolTipDetails: function (chartData) {
                if (!chartData.isHoliday || chartData.HolidayDescription == null)
                    return "Working hours : "+chartData.WorkingHour / 60 + " Hr";
                else
                    return "Working hours : " + chartData.WorkingHour / 60 + " Hr ," + " Holiday reason- " + chartData.HolidayDescription;
            },
            

        });
    </script>
</dom-module><dom-module id="PFT-AssignAction" assetpath="Components/Task/">
    <template>        
        <template is="dom-if" if="{{!isActionTextRequired(actionConfig)}}">
            <div id="assignAction" title="Click here to assign" class="linked" on-tap="AssignTask" actionname$="{{actionConfig.ActionName}}" title$="{{actionConfig.ActionTooltip}}">
                <span class="clear-person_add taskAssignIcon marL10 FL"></span>
            </div>
        </template>
        <template is="dom-if" if="{{isActionTextRequired(actionConfig)}}">
            <div id="assignAction" title="Click here to assign" class="actionWrap" on-tap="AssignTask" actionname$="{{actionConfig.ActionName}}" title$="{{actionConfig.ActionTooltip}}">
                <span class="actionIcon clear-person_add"></span>
                <span class="actionLabel">{{actionConfig.ActionDisplayText}}</span>
            </div>
        </template>
    </template>
    <script>
        Polymer({

            is: 'PFT-AssignAction',
            attached: function () {

            },

            properties: {
                actionConfig: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                }
            },
            AssignTask: function () {
                if (IsActionDisabled(this.id))
                    return false;
                else {
                    if ($jq("#TaskBoardDiv input:checked").length > 0) {
                        if (IsTaskAssignable('Assignment')) {
                            LaunchAssignmentTool();
                        }
                    }
                    else {
                        showErrorDetailsNG('Please select one or more task(s) ', 0);
                    }
                }
            },
            isActionTextRequired: function (actionConfig) {
                return IsToolbarActionTextRequired(actionConfig);
            }
        });
    </script>

</dom-module>
<dom-module id="PFT-CalenderAction" assetpath="Components/Task/">
    <template>        
        <template is="dom-if" if="{{!isActionTextRequired(actionConfig)}}">
            <div id="calAction" title="Click here to Add/Edit Calendar" class="linked" title$="{{actionConfig.ActionTooltip}}" actionname$="{{actionConfig.ActionName}}" on-tap="Invokefunction">
                <span class="FL transferObject taskAssignIcon clear-calender"></span>
            </div>
        </template>
        <template is="dom-if" if="{{isActionTextRequired(actionConfig)}}">
            <div id="calAction" title="Click here to Add/Edit Calendar" class="actionWrap" title$="{{actionConfig.ActionTooltip}}" actionname$="{{actionConfig.ActionName}}" on-tap="Invokefunction">
                <span class="actionIcon clear-calender"></span>
                <span class="actionLabel">{{actionConfig.ActionDisplayText}}</span>
            </div>
        </template>        
    </template>
    <script>
    Polymer({

        is: 'PFT-CalenderAction',
        properties: {
            actionConfig: {
                type: Array,
                value: function () {
                    return [];
                }
            }
        },
        Invokefunction: function () {
            if (IsActionDisabled(this.id))
                return false;
            else
                loadCalenderTaskboard();          
        },
        isActionTextRequired: function (actionConfig) {
            return IsToolbarActionTextRequired(actionConfig);
        }
    });
    </script>
    </dom-module>
<dom-module id="PFT-IndividualBar" assetpath="Components/Task/">
    <template>

        <template is="dom-repeat" items="{{ResetBarHeight(chartdata.ValueDetails)}}" as="barData" index-as="task">
            <span id$="additionalColor_[[graphId]]_[[userIndex]]_[[bar]]_[[task]]" class$="{{GetAdditionalColorClass(barData)}}" style$="bottom:{{GetAdditionalBottomClass(barData.Value)}};height:{{GetAdditionalHeightClass(barData.Value,maxvalue,chartdata.unavailableHours)}}" title$="{{barData.ToolTip}}"></span>
            <span id$="unAvailable_[[graphId]]_[[userIndex]]_[[bar]]_[[task]]" class$="{{GetUnAvailableColorClass(chartdata)}}" style$="bottom:{{GetUnAvailableBottomClass(chartdata)}};height:{{GetUnAvailableHeightClass(chartdata)}}" title$="{{GetUnAvailableHourToolTip(chartdata)}}"></span>
        </template>

    </template>
    <script>
        Polymer({
            is: 'PFT-IndividualBar',
            attached: function () {
            },
            properties:
               {
                   chartdata: {
                       type: Array,
                       value: function () {
                           return [];
                       },
                       notify: true
                   },
                   height: {
                       type: Number,
                       value: 0
                   },
                   maxvalue: Number,
                   userIndex: Number,
                   graphId: Number,
                   bar: Number


               },
            GetAdditionalColorClass: function (graphdata) {
                if (graphdata != null && graphdata.IsNewAssignment)
                    return "additionalColor";
                else
                    return "innerBar";
            },
            GetUnAvailableColorClass: function (chartdata) {
                if (chartdata.unavailableHours && chartdata.unavailableHours > 0)
                    return "unAvailableColor";
            },
            GetAdditionalHeightClass: function (heightValue, maxval, unAvailableHours) {
                var barHeight = 0;
                if (heightValue != 0) {
                    barHeight = parseFloat(((heightValue) / (maxval)) * 100).toFixed(2) + "%";
                    return barHeight;
                }

                else return barHeight + "%";
            },
            GetUnAvailableHeightClass: function (chartdata) {
                return ((parseInt(chartdata.unavailableHours) / parseInt(chartdata.MaxValue)) * 100).toFixed(2) + "%";
            },
            GetAdditionalBottomClass: function (heightValue) {
                var bottomValue = this.height;
                var barBottom = 0;
                this.height = parseInt(this.height) + parseInt(heightValue);
                if (bottomValue && bottomValue != 0) {
                    barBottom = parseFloat(((bottomValue) / (this.maxvalue)) * 100).toFixed(2) + "%";
                    return barBottom;
                }
                else return barBottom + "%";
            },
            GetUnAvailableBottomClass: function (chartdata) {
                return (((parseInt(chartdata.MaxValue) - parseInt(chartdata.unavailableHours)) / parseInt(chartdata.MaxValue)) * 100).toFixed(2) + "%";
            },
            ResetBarHeight: function (data) {
                this.height = 0;
                return data;
            },
            GetUnAvailableHourToolTip: function (chartdata) {
                return  chartdata.unavailableHours/60 + "Hr - Unavailable";
            }

        });
    </script>
</dom-module><dom-module id="PFT-MarkTask" assetpath="Components/Task/">
    <template>
        <template is="dom-if" if="{{validation(rowData,actionName)}}">
            <div class$="{{getOuterClass()}}">
                <template is="dom-if" if="{{!validateToolbarAction(actionName)}}">
                    <div class="markLink" id$="statusMark_{{getCumulativeId(rowData)}}" on-click="showMarkStatusCallout" title="Click here to mark task as Complete">
                        <span class$="{{cssClassData(cssClassname)}}" id$="icon_{{getCumulativeId(rowData)}}"></span>
                        <span class="markStatusLabel" id$="label_{{getCumulativeId(rowData)}}">{{label}}</span>
                    </div>
                </template>
                <div class$="{{getClassName()}}" style$="{{getStyleData()}}" id$="markStatus_{{getCumulativeId(rowData)}}" name="markStatus">
                    <textarea id$="textArea_{{getCumulativeId(rowData)}}" class$="{{getTextAreaClass()}}" placeholder="Add Comments..." autofocus=""></textarea>                    
                    <div id$="taskComplete_{{getCumulativeId(rowData)}}" class$="{{getButtonCSS()}}" title$="{{getButtonTooltip()}}" action="{{setClickAttribute(rowData,actionName)}}">{{getButtonText()}}</div>
                    <template is="dom-if" if="{{validateToolbarAction(actionName)}}">
                        <div id="CancelAction" class="markComplete marT10 FR marR10 skipActionButton" title$="{{getCancelButtonTooltip()}}" action="{{setClickAttribute(rowData,actionName,'CancelAction')}}">Cancel</div>
                        <div class="clr"></div>
                    </template>                    
                </div>
            </div>
        </template>        
    </template>
    <script>
        Polymer({
            is: "PFT-MarkTask",
            properties: {
                rowData: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                clickAttribute: {
                    type: String,
                    value: ""
                },
                cancelClickAttribute: {
                    type: String,
                    value: ""
                },
                cssClassname: {
                    type: String,
                    value: ""
                },                
                actionName: {
                    type: String,
                    value: ""
                }
            },
            validation: function (rowData, actionName) {                
                try {
                    if (rowData && (rowData.PFTRow && rowData.PFTRow.length > 0 || rowData.Attributes)) {
                        if ((rowData.PFTRow && rowData.PFTRow.length > 0 && rowData.PFTRow[0].PFTColumn[2].PFTCell[0]) || (rowData.Attributes && rowData.Attributes.TaskAssignmentDetails)) {
                            var taskAssignmentDetails = rowData.Attributes.TaskAssignmentDetails ? JSON.parse(rowData.Attributes.TaskAssignmentDetails) : JSON.parse(rowData.PFTRow[0].PFTColumn[2].PFTCell[0].Value);
                            var filtered = jQuery.grep(taskAssignmentDetails, function (item, index) {
                                return (item.UserId == MasterVar.userId);
                            });
                            if (filtered.length > 0) {
                                if (filtered[0].IsCompletionStatus == false && filtered[0].UserTaskStatusAcronym.toUpperCase() != "NOTSTARTED" &&
                                    filtered[0].UserTaskStatusAcronym.toUpperCase() != "ABORTED")
                                    return true;
                            }
                        }                        
                    }
                    else if (actionName) {                        
                        return true;
                    }
                    return false;
                }
                catch (insertErr) {
                    console.log("Error while parsing");
                }
            },
            showMarkStatusCallout: function (e) {
                if (IsActionDisabled(e))
                    return false;
                else {
                    if (e.target != null) {
                        var taskId = '';
                        if (this.rowData.StdAttributes.TaskId != undefined && this.rowData.StdAttributes.TaskId != "")
                            taskId = this.rowData.StdAttributes.TaskId;
                        LaunchMarkStatusCalloutTool(e, taskId);
                    }
                }
            },
            setClickAttribute: function (rowData, actionName, id) {
                if (rowData && rowData.StdAttributes) {

                    var taskId = '';
                    var objTenantId = '';

                    if (rowData.StdAttributes.TaskId != undefined && rowData.StdAttributes.TaskId != "")
                        taskId = rowData.StdAttributes.TaskId;
                    if (rowData.StdAttributes.ObjTenantId != undefined && rowData.StdAttributes.ObjTenantId != "")
                        objTenantId = rowData.StdAttributes.ObjTenantId;
                    if (rowData.StdAttributes.TaskTenantId != undefined && rowData.StdAttributes.TaskTenantId != "")
                        objTenantId = rowData.StdAttributes.TaskTenantId;
                    var taskStatus = "Completed";
                    this.clickAttribute = "";
                    this.clickAttribute = "HandleClick('', '', 'LaunchMarkTaskCompleteTool', 'taskId+" + taskId + "&&objTenantId+" + objTenantId + "&&taskStatus+" + taskStatus + "')";
                    this.async(function () {
                        var attr = '';
                        if (this.clickAttribute != null) {
                            attr = document.createAttribute('OnClick');
                            attr.value = this.clickAttribute;
                            this.$$('#taskComplete_' + this.rowData.StdAttributes.TaskId).setAttributeNode(attr);
                        }
                    }, 1);
                }
                else {
                    if (actionName) {
                        if (id && id.toLowerCase() == 'cancelaction') {
                            this.cancelClickAttribute = "";
                            this.cancelClickAttribute = "ReloadToolbar('TaskSkip',true);";
                            this.async(function () {
                                var attr = '';
                                if (this.cancelClickAttribute != null) {
                                    attr = document.createAttribute('OnClick');
                                    attr.value = this.cancelClickAttribute;
                                    this.$$('#CancelAction').setAttributeNode(attr);
                                }
                            }, 1);
                        }
                        else {
                            this.clickAttribute = "";
                            this.clickAttribute = "SkipTask();";
                            this.async(function () {
                                var attr = '';
                                if (this.clickAttribute != null) {
                                    attr = document.createAttribute('OnClick');
                                    attr.value = this.clickAttribute;
                                    this.$$('#taskComplete_TaskAction').setAttributeNode(attr);
                                }
                            }, 1);
                        }
                    }
                }
            },
            cssClassData: function (cssClassName) {
                if (cssClassName != "")
                    return cssClassName;
                else
                    return "clear-radioCheck clearRC";
            },
            getButtonTooltip: function () {
                if (this.actionName && this.actionName.toUpperCase() == "SKIPTASK")
                    return "Skip Task";
                else
                    return "Mark Task Complete";
            },
            getButtonText: function () {
                if (this.actionName && this.actionName.toUpperCase() == "SKIPTASK")
                    return "Skip";
                else
                    return "Mark Complete";
            },
            getButtonCSS: function () {
                if (this.actionName && this.actionName.toUpperCase() == "SKIPTASK")
                    return "markComplete marT10 FR skipActionButton";
                else
                    return "markComplete marT10";
            },
            getCumulativeId: function (rowData) {
                if (rowData && rowData.StdAttributes && rowData.StdAttributes.TaskId) {
                    return rowData.StdAttributes.TaskId;
                }
                else {
                    return 'TaskAction';
                }                
            },
            validateToolbarAction: function (actionName) {
                try {
                    if (actionName) {                        
                        return true;
                    }
                    return false;
                }
                catch (insertErr) {
                    console.log("Error while parsing");
                }
            },            
            getClassName: function () {
                if (this.actionName)
                    return "";
                else
                    return "MarkStatusShowDown";
            },
            getStyleData: function () {
                if (this.actionName)
                    return "";
                else
                    return "display:none;";
            },
            getOuterClass: function () {
                if (this.actionName)
                    return "";
                else
                    return "FL posRel marT12";
            },
            getTextAreaClass: function () {
                if (this.actionName)
                    return "toolbarActionCommentArea";
                else
                    return "commentArea";
            },
            getCancelButtonTooltip: function () {
                if (this.actionConfig && this.actionConfig.ActionName && this.actionConfig.ActionName == "SKIPTASK")
                    return "Click here to Cancel Skip Task";
                else
                    return "Click here to Cancel";
            }
        });
    </script>
</dom-module><dom-module id="PFT-MyTaskAssignmentComponent" assetpath="Components/Task/">
    <template>
        <div class="pickBlock">
            <template is="dom-if" if="{{isPickBlockRequired(userdetails,status)}}">
                <template is="dom-if" if="{{isCollaborative()}}">
                    <div title$="{{getCollaborateUnAssignedColValue(userdetails,status)}}">{{getCollaborateUnAssignedColValue(userdetails,status)}}</div>
                </template>
                <template is="dom-if" if="{{!isCollaborative()}}">
                    <div on-tap="pickAcceptTaskOrReject" actionfor$="{{getPickOrAcceptActionForValue(userdetails,status)}}">                        
                        <span class$="{{getPickOrAcceptIconClass(userdetails,status,ispickallowed)}}" title$="{{getPickOrAcceptTooltip(userdetails,status,ispickallowed)}}"></span>
                        <span id="PickAcceptId" class$="{{getPickOrAcceptClass(userdetails,status,ispickallowed)}}" title$="{{getPickOrAcceptTooltip(userdetails,status,ispickallowed)}}">{{getPickOrAccept(userdetails,status,ispickallowed)}}</span>
                    </div>
                </template>
            </template>
            <template is="dom-if" if="{{isAssignedBlockRequired(userdetails,status)}}">
                <div class="FL assignWrap" title="{{getAssigned()}}">{{getAssigned()}} </div>
            </template>
            <template is="dom-if" if="{{!isPickBlockRequired(userdetails,status)}}">
                <pft-mytaskusercomponent userdata="{{userdetails}}" objtenantid="{{objtenantid}}" taskid="{{taskid}}" grouped-task-details="{{groupedTaskDetails}}" iscollaborated="{{getIscollaborative()}}" issplittable="{{issplittable}}" tasktenantid="{{tasktenantid}}"></pft-mytaskusercomponent>
            </template>
        </div>
    </template>
    <script>
        Polymer({
            is: 'pft-mytaskassignmentcomponent',

            properties: {
                statusname: String,
                status: String,
                userdetails: {
                    type: Array,
                    value: []
                },
                objtenantid: Number,
                taskid: Number,
                iscollaborated: Boolean,
                groupedTaskDetails: {
                    type: Array,
                    value: []
                },
                issplittable: {
                    type: String,
                    value: function () {
                        return "";
                    }
                },
                tasktenantid: Number,
                ispickallowed: {
                    type: Boolean,
                    value: false
                }
            },
            attached: function () {
                var status = this.status;
            },
            getPickOrAcceptTooltip: function (userDetails, taskStatus, isPickAllowed) {
                var iscollaborated = this.getIscollaborative();
                return GetPickOrAcceptTooltip(userDetails, taskStatus, iscollaborated, isPickAllowed);
            },
            getPickOrAccept: function (userDetails, taskStatus, isPickAllowed) {
                var iscollaborated = this.getIscollaborative();
                return GetPickOrAcceptCaption(userDetails, taskStatus, iscollaborated, isPickAllowed);
            },
            getReject: function (userDetails, taskStatus) {
                var iscollaborated = this.getIscollaborative();
                return GetRejectCaption(userDetails, taskStatus, iscollaborated);
            },
            getPickOrAcceptClass: function (userDetails, taskStatus, ispickallowed) {
                var iscollaborated = this.getIscollaborative();
                return GetPickOrAcceptClass(userDetails, taskStatus, iscollaborated, ispickallowed);
            },
            getPickOrAcceptIconClass: function (userDetails, taskStatus, ispickallowed) {
                var iscollaborated = this.getIscollaborative();
                return GetPickOrAcceptIconClass(userDetails, taskStatus, iscollaborated, ispickallowed);
            },
            getRejectClass: function (userDetails, taskStatus) {
                var iscollaborated = this.getIscollaborative();
                return GetRejectClass(userDetails, taskStatus, iscollaborated);
            },
            getRejectIconClass: function (userDetails, taskStatus) {
                var iscollaborated = this.getIscollaborative();
                return GetRejectIconClass(userDetails, taskStatus, iscollaborated);
            },
            pickAcceptTaskOrReject: function (e) {
                var isPickAllowed = GetPickPermission();

                var iscollaborated = this.getIscollaborative();
                var status = GetPickOrAccept(this.userdetails, this.status, iscollaborated);
                HandleDashboardCheckBox();
                var groupedTaskList = GetGroupedTaskList(this.groupedTaskDetails);

                AddPickRejectTaskDetailsData(this.taskid, this.tasktenantid && this.tasktenantid != "0" ? this.tasktenantid : this.objtenantid, this.userdetails);
                if (status == "INPROGRESS")
                    LaunchRejectTool(WOM_taskList, groupedTaskList);
                //else if ((status == "UNASSIGNED" && isPickAllowed) || status == "ASSIGNED")
                else if ((status == "UNASSIGNED" && e.target && !e.target.classList.contains('disableAction')) || status == "ASSIGNED")
                    LaunchPickOrAcceptTool(WOM_taskList, null, null, groupedTaskList);
            },
            rejectTask: function (e) {
                AddPickRejectTaskDetailsData(this.taskid, this.tasktenantid ? this.tasktenantid : this.objtenantid, this.userdetails);
                LaunchRejectTool(WOM_taskList);
            },
            isBlockRequired: function (userDetails, taskStatus) {
                var status = GetPickOrAccept(userdetails, status);
                if (status != "" && status != 'OTHER')
                    return true;
                else return false;
            },
            isPickBlockRequired: function (userDetails, taskStatus) {
                this.ispickallowed = GetPickPermission();
                var iscollaborated = this.getIscollaborative();
                var status = GetPickOrAccept(userDetails, taskStatus, iscollaborated);
                if (status != "" && (status == 'UNASSIGNED' || status == 'ASSIGNED'))
                    return true;
                else return false;
            },
            isUserAssignedBlockRequired: function (userDetails, taskStatus) {
                var iscollaborated = this.getIscollaborative();
                var status = GetPickOrAccept(userDetails, taskStatus, iscollaborated);
                if (status != "" && (status != 'UNASSIGNED' && status != 'ASSIGNED'))
                    return true;
                else return false;
            },
            getAction: function (userDetails, taskStatus) {
                var status = GetPickOrAccept(userDetails, taskStatus);
                if (status == 'UNASSIGNED') return status;
                else return taskStatus;
            },
            IsCollaborativeBlockRequired: function (details) {
                var iscollaborated = this.getIscollaborative();
                return GetIsCollaborativeActionButton(iscollaborated, details);
            },
            collaborateTask: function () {
                var groupedTaskList = GetGroupedTaskList(this.groupedTaskDetails);
                AddPickRejectTaskDetailsData(this.taskid, this.tasktenantid ? this.tasktenantid : this.objtenantid, this.userdetails);
                LaunchCollaborateTool(WOM_taskList, null, null, groupedTaskList);
            },
            isCollaborative: function () {
                var collaborative = this.getIscollaborative().toUpperCase();
                if (collaborative == 'TRUE')
                    return true;
                else
                    return false;
            },
            getIscollaborative: function () {
                var iscollaborated;
                if (this.dataHost.__data__ && this.dataHost.__data__.MyList)
                    iscollaborated = (this.dataHost.__data__.MyList.PFTRow["0"].PFTColumn.length >= 22 && this.dataHost.__data__.MyList.PFTRow["0"].PFTColumn[21]) ?
                        this.dataHost.__data__.MyList.PFTRow["0"].PFTColumn[21].PFTCell["0"].Value : 'false';
                else if (this.dataHost.obj)
                    iscollaborated = (this.dataHost.obj.PFTColumn.length >= 22 && this.dataHost.obj.PFTColumn[21]) ?
                        this.dataHost.obj.PFTColumn[21].PFTCell[0].Value : 'false';
                else if (this.dataHost.__data__ && this.dataHost.__data__.value)
                    iscollaborated = this.dataHost.__data__.value.IsTaskCollaborated ? this.dataHost.__data__.value.IsTaskCollaborated.toString() : "false";
                else
                    iscollaborated = 'false';
                this.iscollaborated = iscollaborated;
                return iscollaborated;
            },
            getCollaborateUnAssignedColValue: function (userDetails, taskStatus) {
                return 'Unassigned';
            },
            isAssignedBlockRequired: function (userDetails, taskStatus) {
                var iscollaborated = this.getIscollaborative();
                var status = GetPickOrAccept(userDetails, taskStatus, iscollaborated);
                if (status == "REJECTED")
                    return true;
                else return false;
            },
            getAssigned: function () {
                var iscollaborated = this.getIscollaborative().toUpperCase();
                if (iscollaborated && iscollaborated != "TRUE")
                    return "Assigned";
            },
            getPickOrAcceptActionForValue: function (userDetails, taskStatus) {
                var iscollaborated = this.getIscollaborative();
                return GetPickOrAcceptActionForValue(userDetails, taskStatus, iscollaborated);
            }            
        });
    </script>

</dom-module><dom-module id="PFT-MyTaskUserComponent" assetpath="Components/Task/">
    <template>
        <template is="dom-repeat" items="{{getObject(userdata,iscollaborated)}}" as="userlist" index-as="o_index">
            <div class$="{{getNameBubbleClass(userlist)}}" id$="{{generateIdForNameBubble(userlist,o_index)}}" onmouseover="OnMouseOverOutUserNameBuble(this, 'ONMOUSEOVER')" onmouseout="OnMouseOverOutUserNameBuble(this, 'ONMOUSEOUT')" data-args="{{userlist}}" istaskcollaborated="{{iscollaborated}}">
                <div id="passOnComponent" style="display: none" actionfor$="{{getActionFor(iscollaborated,userlist)}}">
                    <div class="addUserStatusBubble passOnBubble assignmentstatusIcon clear-cross" title="Pass On" id="" on-tap="rejectTask"></div>
                </div>
                <span class="UserNameAbr" title="{{getTooltipForUserName(userlist,issplittable)}}">
                    {{getNameAbbreviation(userlist.UserDisplayName)}}
                </span>
            </div>
        </template>
        <div class="clr"></div>
        <template is="dom-if" if="{{IsnMoreDetailsDivRequired(userdata)}}">
            <pft-nmoreusers userdata="{{userdata}}" taskid="{{taskid}}" details="{{details}}" totalusercount="{{totalusercount}}"></pft-nmoreusers>
        </template>
    </template>
    <script>
        Polymer({
            is: "PFT-MyTaskUserComponent",
            properties: {
                userdata: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                details: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                totalusercount: {
                    type: Number
                },
                objtenantid: {
                    type: Number
                },
                taskid: {
                    type: Number
                },
                groupedTaskDetails: {
                    type: Array,
                    value: []
                },
                iscollaborated: {
                    type: String,
                    value: function () {
                        return "";
                    }
                },
                issplittable: {
                    type: String,
                    value: function () {
                        return "";
                    }
                },
                    tasktenantid: {
            type: Number
                    },
            },
            attached: function () {
                var status = this.status;
            },
            getStatusAssignmentBubble: function (object) {
                return GetStatusAssignmentBubbleClass(object);
            },
            getNameAbbreviation: function (userName) {
                return getNameAbbreviation(userName);
            },
            getUserCountBubble: function (totalUsers) {
                return GetUserCountBubble(totalUsers);
            },
            getObject: function (details, isCollaborated) {
                this.totalusercount = 0;
                if (this.userdata && this.userdata.length > 0) {
                    this.details = GetUserDetailsObjectWithAssignmentStatus(this.userdata, isCollaborated);
                    this.details = jQuery.grep(this.details, function (item, index) {
                        return (item.UserId != 0 && item.AssignmentStatusAcronym != "REJECTED");
                    });
                    if (this.details.length >= 1) {
                        this.totalusercount = this.details.length;
                        if (this.details.length >= 3)
                            this.details.length = 3;
                    }
                    else {
                        this.details = [];
                        this.details.length = 0;
                        this.totalusercount = this.details.length;
                    }
                    return this.details;
                }
            },
            getNameBubbleClass: function (object) {
                return GetNameBubbleClass(object);
            },
            generateIdForNameBubble: function (object, index) {
                return GenerateIdForNameBubble(object, index)
            },
            rejectTask: function (e) {
                //if multiple tasks are selected and user clicks on passon at task level, then only that task should be passed on.
                if (e.currentTarget && !e.currentTarget.classList.contains('disableAction')) {
                    HandleDashboardCheckBox();
                    var groupedTaskList = GetGroupedTaskList(this.groupedTaskDetails);
                    AddPickRejectTaskDetailsData(this.taskid, this.tasktenantid ? this.tasktenantid : this.objtenantid, this.userdata);
                    LaunchRejectTool(WOM_taskList, groupedTaskList);
                }
            },
            getTooltipForUserName: function (object, issplittable) {
                var isSplittable = (issplittable.toString() == "" || issplittable == null || issplittable == undefined || issplittable.toString() == "True") ? true : false;
                return GetTooltipForUserName(object, isSplittable);
            },
            IsnMoreDetailsDivRequired: function (objectdata) {
                if (this.details && this.details.length == 3 && this.totalusercount && this.totalusercount > 3) {
                    return true;
                }
                return false;
            },
            getActionFor: function (isTaskCollaborated, userDetails) {
                if (isTaskCollaborated && isTaskCollaborated.toLowerCase() == 'true')
                    return;                
                var status = GetPickOrAccept(userDetails);
                if (status != "" && status == 'INPROGRESS') {
                    return "REJECTTASK";
                }
            }
        });

    </script>
</dom-module><dom-module id="PFT-PickAcceptAction" assetpath="Components/Task/">
    <template>
        <div id="pickAcceptAction" title="{{actionConfig.ActionTooltip}}" class="actionWrap" on-tap="Invokefunction" actionname$="{{actionConfig.ActionName}}">
            <span class="actionIcon clear-checkCircle"></span>
            <span class="actionLabel ">Pick</span>
        </div>
    </template>
    <script>
        Polymer({

            is: 'PFT-PickAcceptAction',
            properties: {
                actionConfig: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                }
            },            
            Invokefunction: function () {                
                if (IsActionDisabled(this.id))
                    return false;
                else
                    this.domHost.dataHost.InvokepickAcceptActionMethod(this.actionConfig.ActionOnClickFunction);
            }
        });
    </script>
</dom-module>
<dom-module id="PFT-Priority" assetpath="Components/Task/">
    <template>        
        <div class$="{{ClassSelector}}" title$="{{TooltipSelector}}" action="{{SetClickAttribute(priority,tasktenantid,taskid,woid,statusacronym)}}"></div>        
        <ul id$="{{assignIdToPriorityIcon(taskid,woid)}}" class="priorityicon-click" name="priorityContextMenu"></ul>        
    </template>

    <script>
        Polymer({
            is: 'PFT-Priority',

            properties: {

                priority: {
                    type: String,
                    value: ""
                },                
                tasktenantid: {
                    type: String,
                    value: ""
                },
                taskid: {
                    type: String,
                    value: ""
                },
                woid: {
                    type: String,
                    value: ""
                },
                priorityname: {
                    type: String,
                    value: ""
                },
                statusacronym: {
                    type: String,
                    value: ""
                },
                ClassSelector: {
                    type: String,
                    computed: 'computeClassName(priority, statusacronym)'
                },
                TooltipSelector: {
                    type: String,
                    computed: 'computeTooltip(priority, priorityname)'
                }
            },

            computeClassName: function (priority, statusacronym) {
                var classString = '';
                if (priority) {
                    var priorityCodeTitlecase = ConvertToCamelCase(priority);
                    classString = "taskPriorityCSS task" + priorityCodeTitlecase + "Priority";
                }
                else {
                    classString = "taskPriorityCSS taskNormalPriority";
                }                
                if (GetDashboardContext() == 'taskboard' && ($('TaskAssignment') == null || $('TaskAssignment') == undefined) && this.isPriorityUpdatable(statusacronym))
                    classString += " selectableField";
                return classString;
            },
            SetClickAttribute: function (priority, tasktenantid, taskId, woId, statusacronym) {
                if (GetDashboardContext() == 'taskboard' && ($('TaskAssignment') == null || $('TaskAssignment') == undefined)) {
                    if ((taskId || woId) && priority && tasktenantid) {
                        this.children[0].removeAttribute("OnClick");
                        var priorityIconId = GetPriorityIconId(taskId, woId);
                        if ($jq('#' + priorityIconId))
                            $jq('#' + priorityIconId).empty();

                        if (this.isPriorityUpdatable(statusacronym)) {
                            attr = document.createAttribute('OnClick');
                            if (!taskId)
                                taskId = null;
                            if (!woId)
                                woId = null;
                            attr.value = "showPriorityContextMenu('" + priority + "'," + tasktenantid + "," + taskId + "," + woId + ", this)";
                            this.children[0].setAttributeNode(attr);
                        }
                    }
                }
            },
            assignIdToPriorityIcon: function (taskId, woId) {
                return GetPriorityIconId(taskId, woId);
            },            
            computeTooltip: function (priority, priorityName){
                if (priorityName)
                {
                    return priorityName;
                }
                else if (priority)
                {
                    var priorityCodeTitlecase = ConvertToCamelCase(priority);
                    return priorityCodeTitlecase;
                }
            },
            isPriorityUpdatable: function (statusacronym) {
                if (statusacronym && (statusacronym.toString().toUpperCase() == 'NOTSTARTED' || statusacronym.toString().toUpperCase() == 'INPROGRESS' ||
                                    statusacronym.toString().toUpperCase() == 'SAVED'))
                    return true;
                else
                    return false;
            }
        });
    </script>

</dom-module><dom-module id="PFT-Rating" assetpath="Components/Task/">
    <style>
    </style>
    <template>
        <div id="div_rating" class="rattingWrapper" title="{{rating}}">
            <span class$="[[GetStarRating(rating,1)]]"></span>
            <span class$="[[GetStarRating(rating,2)]]"></span>
            <span class$="[[GetStarRating(rating,3)]]"></span>
            <span class$="[[GetStarRating(rating,4)]]"></span>
            <span class$="[[GetStarRating(rating,5)]]"></span>
        </div>
    </template>
    <script>
        Polymer({
            is: "PFT-Rating",
            properties: {
                rating: {
                    type: String,
                    value: ""
                }
            },
            GetStarRating: function (rating, position) {
                var intPart = Math.floor(rating);
                var decPart = parseFloat(rating) - intPart;
                if (parseFloat(rating) >= position) {
                    return "clear-star-full";
                }
                else {
                    if (decPart < 1 && decPart > 0 && intPart >= (position-1)) {
                        return "clear-star-half";
                    }
                    else
                        return "clear-star-empty";
                }

            }
        });
    </script>
</dom-module>
<dom-module id="PFT-RejectAction" assetpath="Components/Task/">
    <template>
        <div id="rejectAction" title="{{actionConfig.ActionTooltip}}" class="actionWrap" on-tap="Invokefunction" actionname$="{{actionConfig.ActionName}}">
            <span class="actionIcon clear-missedcallOut"></span>
            <span class="actionLabel">Pass On</span>
        </div>
    </template>
    <script>
        Polymer({
            is: 'PFT-RejectAction',
            properties: {
                actionConfig: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                }
            },            
            Invokefunction: function () {                
                if (IsActionDisabled(this.id))
                    return false;
                else
                    this.domHost.dataHost.InvokeRejectActionMethod(this.actionConfig.ActionOnClickFunction);
            }
        });
    </script>
</dom-module>
<dom-module id="PFT-ReviewOfflineTask" assetpath="Components/Task/">
    <template>
        <template is="dom-if" if="{{validation(rowData)}}">
            <div class="FL posRel">
                <div class="markLink" id$="statusMark_{{rowData.StdAttributes.TaskId}}" on-click="showMarkStatusCallout" title="Click here to Review Task">
                    <span class$="{{cssClassData(cssClassname)}}" id$="icon_{{rowData.StdAttributes.TaskId}}"></span>
                    <span class="markStatusLabel" id$="label_{{rowData.StdAttributes.TaskId}}">{{label}}</span>
                </div>
                <div class="MarkStatusShowDown" style="display:none;" id$="markStatus_{{rowData.StdAttributes.TaskId}}" name="markStatus">
                    <select id$="markPassOrFail_{{rowData.StdAttributes.TaskId}}" class="markPassOrFail "></select>
                    <textarea id$="textArea_{{rowData.StdAttributes.TaskId}}" class="commentArea marT10" placeholder="Add Comments..." autofocus=""></textarea>
                    <div id$="taskComplete_{{rowData.StdAttributes.TaskId}}" class="markComplete marT10" title="Mark Task Complete" action="{{setClickAttribute(rowData)}}">Submit</div>
                </div>
            </div>
        </template>
    </template>
    <script>
        Polymer({
            is: "PFT-ReviewOfflineTask",
            properties: {
                rowData: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                clickAttribute: {
                    type: String,
                    value: ""
                },
                cssClassname: {
                    type: String,
                    value: ""
                }
            },
            validation: function (rowData) {
                try {
                    if ((rowData.PFTRow && rowData.PFTRow.length > 0 && rowData.PFTRow[0].PFTColumn[2].PFTCell[0]) || (rowData.Attributes && rowData.Attributes.TaskAssignmentDetails)) {
                        var taskAssignmentDetails = rowData.Attributes.TaskAssignmentDetails ? JSON.parse(rowData.Attributes.TaskAssignmentDetails) : JSON.parse(rowData.PFTRow[0].PFTColumn[2].PFTCell[0].Value);
                        var filtered = jQuery.grep(taskAssignmentDetails, function (item, index) {
                            return (item.UserId == MasterVar.userId);
                        });
                        if (filtered.length > 0) {
                            if (filtered[0].IsCompletionStatus == false && filtered[0].UserTaskStatusAcronym.toUpperCase() != "NOTSTARTED" &&
                                filtered[0].UserTaskStatusAcronym.toUpperCase() != "ABORTED")
                                return true;
                        }
                    }
                    return false;
                }
                catch (insertErr) {
                    console.log("Error while parsing");
                }
            },
            showMarkStatusCallout: function (e) {
                if (e.target != null) {
                    var taskId = '';
                    var taskType = '';
                    var objTenantId = '';
                    if (this.rowData.StdAttributes.TaskTypeAcronym != undefined && this.rowData.StdAttributes.TaskTypeAcronym != "")
                        taskType = this.rowData.StdAttributes.TaskTypeAcronym;
                    if (this.rowData.StdAttributes.ObjTenantId != undefined && this.rowData.StdAttributes.ObjTenantId != "")
                        objTenantId = this.rowData.StdAttributes.ObjTenantId;
                    if (this.rowData.StdAttributes.TaskId != undefined && this.rowData.StdAttributes.TaskId != "")
                        taskId = this.rowData.StdAttributes.TaskId;
                    LaunchMarkStatusCalloutTool(e, taskId, taskType, objTenantId);
                }
            },
            setClickAttribute: function (rowData) {
                var taskId = '';
                var objTenantId = '';
                if (rowData.StdAttributes.TaskId != undefined && rowData.StdAttributes.TaskId != "")
                    taskId = rowData.StdAttributes.TaskId;
                if (rowData.StdAttributes.ObjTenantId != undefined && rowData.StdAttributes.ObjTenantId != "")
                    objTenantId = rowData.StdAttributes.ObjTenantId;
                if (taskId != "" && objTenantId != "") {
                    this.clickAttribute = "";
                    this.clickAttribute = "HandleClick('', '', 'LaunchMarkTaskCompleteTool', 'taskId+" + taskId + "&&objTenantId+" + objTenantId + "')";
                    this.async(function () {
                        var attr = '';
                        if (this.clickAttribute != null) {
                            attr = document.createAttribute('OnClick');
                            attr.value = this.clickAttribute;
                            this.$$('#taskComplete_' + this.rowData.StdAttributes.TaskId).setAttributeNode(attr);
                        }
                    }, 1);
                }
            },
            cssClassData: function (cssClassName) {
                if (cssClassName != "")
                    return cssClassName;
                else
                    return "clear-radioCheck clearRC";
            }
        });
    </script>
</dom-module><dom-module id="PFT-TaskAssignment" assetpath="Components/Task/">
    <template>
        <div class="AssigneeList FL">
            <div id="PFTToolbar" class="PFTToolbar">
                <table id="headerTable" class="headerTable">
                    <tbody>
                        <tr>
                            <th class="data1">
                                <div id="TA_checkAllBoxDiv" class="SelectBox">
                                    <input id="TA_checkAllBox" type="checkbox" on-tap="addorRemoveAllUserAttributes">
                                    <label for="TA_checkAllBox"></label>
                                </div>
                            </th>
                            <th class="data2">
                                <div id="TA_ExecutersHeader" class="executersHeader">Select All</div>
                            </th>
                            <th class="data3">
                                <!-----Sort Part------>

                                <div class="FR marR10" id="TA_ReviewInboxSort">
                                    <div title="Click here to Sort By" class="posRel">
                                        <div class="sortLink clear-sortNew" on-tap="showSortDetails" id="TA_sortarrow">
                                        </div>
                                        <div id="TA_Sort" class="WCsortWrapper sortDiv" style="display:none;">
                                            <div class="">
                                                <div class="sortHeader">Sort</div>
                                                <template is="dom-repeat" items="{{sortdata.columnNames}}">
                                                    <div id$="[[item.key]]" class="WCsortwrapLI  WCsortItem">
                                                        <span class="linked sortItemText" on-tap="handleTaskSort">{{item.value}}</span>
                                                        <span class="linked SrtAscDecIcon clear-arrowB" title="Descending" on-tap="handleTaskSortDesc"></span>
                                                        <span class="linked SrtAscDecIcon clear-arrowT" title="Ascending" on-tap="handleTaskSortAsc"></span>
                                                    </div>
                                                </template>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-----Sort Part------>
                                <!-----Filter Part------>

                                <div id="TA_FilterControl" class="FR marR10" onclick="">
                                    <div class="posRel" title="Click here to filter">
                                        <paper-icon-button class="filterLink clear-filter" id="TA_filterIcon" on-tap="taskFilterPopUp"></paper-icon-button>
                                        <div id="TA_FilterPanel" class="TAFltrPnl" style="display: none">
                                            <div id="TA_FilterBorder" class="monitorFltrCnt">
                                                <div class="filterHeader">Filter</div>
                                                <ul id="TA_filterValues" class="monitorFltrs">
                                                    <template is="dom-repeat" items="{{filterdata}}" as="filter">
                                                        <li class="revfltrElem" on-tap="selectGroupedFilter">
                                                            <input type="checkbox" name$="[[filter.MainCategory.key]]" value$="{{filter.MainCategory.key}}" id$="[[selectFilterID(filter.MainCategory.key,'SelectAll')]]">
                                                            <label for$="[[selectFilterID(filter.MainCategory.key,SelectAll)]]" class="revftlleaf">{{filter.MainCategory.value}}</label>
                                                        </li>
                                                        <template is="dom-repeat" items="{{filter.SubCategory}}" index-as="r_index">
                                                            <li>
                                                                <div id$="[[filter.MainCategory.key]]" on-tap="selectFilter" class="revfltrElem">
                                                                    <input type="checkbox" name$="[[filter.MainCategory.key]]" value$="{{item.value}}" id$="[[selectFilterID(filter.MainCategory.key,item.key)]]">
                                                                    <label for$="[[selectFilterID(filter.MainCategory.key,item.key)]]" class="revftlleaf">{{item.key}}</label>
                                                                </div>
                                                            </li>
                                                        </template>


                                                    </template>
                                                </ul>
                                            </div>
                                            <div class="btnFooter">
                                                <div id="TA_btnApplyFilter" class="textBtn FR" on-tap="applyFilter">Apply</div>
                                                <div id="TA_btnReset" class="textBtn FR marR10" on-tap="resetFilter">Reset</div>
                                                <div class="clr"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <!-----Filter Part------>
                                <!----------Search Part--------->
                                <div class="posRel FR">
                                    <div id="TA_SearchCntrlWrap" class="searchCntrlWrap srchCollapse">
                                        <input type="text" id="TA_Search" autocomplete="off" title="Search" placeholder="Search..." class="srchControl" onkeyup="LoadSearchData(event);">
                                        <div class="srchReset clear-cross" title="clear search" style="display: none;" id="TA_resetReviewDashBoard" on-tap="resetSearchForReview"></div>
                                    </div>
                                    <div class="clear-search marR10 WCsrchIcon" id="TA_WCsrchIcon" title="Search" on-tap="wcSearchShow"></div>
                                </div>
                                <!----------Search Part--------->
                            </th>
                        </tr>
                    </tbody>
                </table>
            </div>

            <div id="executorsContainer" class="container">
                <div id="SearchTextHighlight" class="content">
                    <div id="MultiTaskSelectedDiv" class="noData MultiTaskSelectedDiv"></div>
                    <table id="DataTable" class="tskAsgnLHSTbl dboardTable">
                        <tbody>
                            <template is="dom-repeat" items="{{getDataForExePanel(data)}}" as="object" index-as="TaskBoardAssign_Index">
                                <tr>
                                    <td class="data0">
                                        <div class="SelectBox">
                                            <input type="checkbox" id="TAL_checkboxDiv_[[TaskBoardAssign_Index]]" on-tap="addorRemoveUserAttributes">
                                            <label for$="TAL_checkboxDiv_[[TaskBoardAssign_Index]]"></label>
                                        </div>
                                        <div title="{{object.UserType}}" class$="{{getAssigneeType(object.UserType)}}"></div>
                                    </td>
                                    <td class="data1 linked" on-tap="moveUserToRightPanel">
                                        <div class="lblText textWrap">
                                            <div class="SearchTextHighlight mainTitle" inner-h-t-m-l="{{renderSearchableText(object.UserDisplayName)}}" title$="{{object.UserDisplayName}}"></div>
                                        </div>
                                        <pft-text cssclass-name="textDiv" value="{{object.UserEmail}}"></pft-text>
                                        <div class="starRating">
                                            <pft-rating id="pft_rating" rating="{{object.Rating}}"></pft-rating>
                                        </div>
                                    </td>
                                    <td class="data2 linked" on-tap="moveUserToRightPanel">
                                        <div>
                                            <pft-bargraph items="{{getArrayvalue(object.AllocationData.ChartData,object.UserType)}}" graph-id="{{getGraphId()}}" user-index="{{getUserIndex()}}"></pft-bargraph>
                                        </div>
                                    </td>
                                    <td class="data3">
                                        <div id="righarrow_[[TaskBoardAssign_Index]]" title="click here to add user" class="righarrow clear-moveR" on-tap="moveUserToRightPanel">
                                        </div>
                                    </td>
                                </tr>
                            </template>
                        </tbody>
                    </table>
                    <div id="ExtraExecutersBlock" class="noData ExtraExecutersBlock">{{displayExecterBlockMsg(data)}}</div>
                </div>
            </div>
        </div>

        <div class=""></div>
        <div class=""></div>
        <div id="taskBlock" class="AssignmentDetails FL container">
            <div class="content">
                <!--<template is="dom-if" if="{{checkForData(taskData)}}">
                    <p class="noData">No records found</p>
                </template>-->

                <template id="taskAsssignemntDetails" is="dom-repeat" items="{{taskdata}}" as="mainobject" index-as="TaskNum">
                    <table id="AssignmentDetailsTbl_[[TaskNum]]" class="AssignmentDetailsTbl dboardTable">
                        <tbody>
                            <tr id="taskRow_[[TaskNum]]" class$="{{getClassForTA_tasks(TaskNum)}}">
                                <th class="col1">
                                    <div class="SelectBox" id="TAR_checkboxMainDiv_[[TaskNum]]">
                                        <input type="checkbox" id="TAR_checkboxDiv_[[TaskNum]]" checked$="{{getDefaultCheckValue(TaskNum)}}" on-tap="addorRemoveTaskAttributes">
                                        <label for$="TAR_checkboxDiv_[[TaskNum]]"></label>
                                    </div>
                                </th>
                                <th class="col1" on-tap="toggle">
                                    <pft-priority priority="{{mainobject.Priority}}" priorityname="{{mainobject.PriorityName}}"></pft-priority>
                                </th>
                                <th class="colLeft" on-tap="toggle">
                                    <div title="{{mainobject.TaskTitle}}" class="textWrap titleCol">{{mainobject.TaskTitle}}</div>
                                    <span title="{{mainobject.TaskTypeName}}" class="textWrap metadata">( {{mainobject.TaskTypeName}} )</span>
                                </th>
                                <th class="TA_Users metadata" on-tap="toggle">
                                    <pft-taskboardusercomponent id="userBubble_[[mainobject.TaskId]]" userdata="{{getUserDetailsObject(mainobject.TaskUsers,mainobject)}}" taskid="{{mainobject.TaskId}}"></pft-taskboardusercomponent>
                                </th>
                                <th class="TA_Estimation metadata" on-tap="toggle">
                                    <span class="estimationSpan" title="{{convertTime(mainobject.Estimation)}}">Est : {{convertTime(mainobject.Estimation)}} </span>
                                </th>
                                <th class="TA_DueDate metadata" on-tap="toggle">
                                    <span class="duedateSpan">Due : </span>
                                    <pft-date date="{{mainobject.DueDate}}" format="{{headerDueDateFormat}}" cssclass-name="inline" tooltip-format="{{headerDueDateTitleFormat}}"></pft-date>
                                </th>
                                <th class="toggleArwCol"><div id$="task_[[TaskNum]]" class$="{{getToggleClass(TaskNum)}}" on-tap="toggle"></div></th>
                                <th class="data3"><div class="righarrow marR5" on-tap="removeTask"><div title="click here to remove task" class="clear-cross linked"></div></div></th>
                            </tr>
                        </tbody>
                    </table>
                    <div class$="{{showorHide(TaskNum)}}" id="taskUsersBlock_[[TaskNum]]">
                        <div id="emptyUser_[[mainobject.TaskId]]" class$="noData {{showorHideEmptyUser(mainobject.TaskUsers)}}">Add resources to this task from the left panel.</div>
                        <pft-taskuserassignment id="usersblock_[[mainobject.TaskId]]" taskid="{{mainobject.TaskId}}" block_id="[[TaskNum]]" data="{{createUserObjectList(mainobject.TaskUsers,taskdata,mainobject.TaskId)}}"></pft-taskuserassignment>
                    </div>
                </template>

                <div id="TaskSelectAllPanel" class="TaskSelectAllPanel hide">
                    <span id="TA_selectedTaskCount" class="FL  marL10"></span>
                    <span id="TA_selectAll" class="FR TaskSelectAll marR10 linked" on-tap="addorRemoveAllTaskAttributes">SELECT ALL</span>
                </div>
            </div>

        </div>

        <div class="clr"></div>
    </template>
    <script>
        Polymer({
            is: "PFT-TaskAssignment",
            attached: function () {
                this.taskdata;
                this.toggleFirstElement(this.taskdata[0]);
                UpdateExecuterSelectAllDiv();
                this.async(function () {
                    $jq('.timeCodeMask').mask("00:00:00:00", { placeholder: "00:00:00:00" });
                    $jq('.estimateMask').mask("00:00", { placeholder: "00:00" });
                    loadScroll('executorsContainer');
                    loadScroll('taskBlock');
                }, 1);
            },
            properties: {
                data:
                      {
                          type: Array,
                          value: function () {
                              return [];
                          }
                      },
                taskid:
                      {
                          type: String,
                          value: function () {
                              return "";
                          }
                      },

                taskdata: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                sortdata: {
                    type: Array,
                    value: function () {
                        return "";
                    }
                },
                filterdata: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                filterAttribute: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                sortAttribute: {
                    type: Object,
                    value: {
                        order: null,
                        value: null
                    }
                },
                totalworkhours: {
                    type: Number
                },
                headerDueDateFormat: {
                    type: String,
                    value: " hhh:nn - ddd, dd MMM"
                },
                headerDueDateTitleFormat: {
                    type: String,
                    value: " hhh:nn - ddd, dd MMM yyyy"
                }
            },
            getArrayvalue: function (obj, userType) {
                return GetArrayvalue(obj, userType);
            },
            getAssigneeType: function (assigneeType, id) {
                return GetAssigneeType(assigneeType, id);
            },
            checkForData: function (data) {
                if (data === null || data.length == 0)
                    return true;
            },
            getDataForExePanel: function (data) {
                return GetDataForExePanel(data);
            },
            showorHideEmptyUser: function (userDataList) {
                if (userDataList && userDataList.length > 0) {
                    return "hide";
                }
                else {
                    return "show";
                }
            },
            createUserObjectList: function (userDataList, taskdata, taskId) {
                var tskIndex = 0;
                var userDetails = createUserObjectList(userDataList);
                var filteredTask = jQuery.grep(taskdata, function (task, index) {
                    return (task.TaskId == taskId);
                    tskIndex = index;                    
                });                
                
                //if (filteredTask && filteredTask[0].TaskUsers && filteredTask[0].TaskUsers.length > 0)
                //    this.taskdata[tskIndex].TaskUsers = userDetails;

                return userDetails;
            },
            addUser: function (e) {
                AddUser(e);
            },
            //removeUser: function (taskUser, userTaskDetails) {
            //    removeUser(taskUser, userTaskDetails);
            //},
            toggle: function (e) {
                ToggleTask(e);
            },
            toggleFirstElement: function (FirstTask) {
                ToggleFirstElement(FirstTask);
            },
            showorHide: function (Index) {
                if (Index === 0) { return "show container"; }
                else return "hide container";
            },
            updateResource: function (completedata) {
                this.taskdata = [];
                for (i = 0; i < completedata.length ; i++) {
                    this.push('taskdata', WOM_taskList[i]);
                }
            },


            //---------search part starts----------//
            resetSearchForReview: function () {
                ResetSearchForReview();
            },
            wcSearchShow: function () {
                WCSearchShow();
            },
            //----------search part ends----------//


            //----------filter part starts----------//
            taskFilterPopUp: function (e) {
                TA_TaskFilterPopUp(e);
            },
            selectGroupedFilter: function (e) {
                SelectGroupedFilter(e);
            },
            selectFilter: function (e) {
                SelectFilter(e);
            },
            selectFilterID: function (item, text) {
                return item + text;
            },
            applyFilter: function (e) {
                ApplyFilter(e);
            },
            resetFilter: function (e) {
                ResetFilter(e);
            },
            //------filter part Ends----------//


            //-------sort part starts-------------//
            handleTaskSort: function (e) {
                HandleTaskSort(e);
            },
            handleTaskSortAsc: function (e) {
                HandleTaskSortAsc(e);
            },
            handleTaskSortDesc: function (e) {
                HandleTaskSortDesc(e);
            },
            showSortDetails: function () {
                ShowSortDetails();
            },
            hideSortDetails: function (e) {
                HideSortDetails(e);
            },
            //-------sort part ends-------------//


            getToggleClass: function (indx) {
                if (indx == 0) {
                    return "clear-moveT";
                }
                else return "clear-moveB";
            },
            convertTime: function (time) {
                return Task_FormatTime(time, 'HHMM');
            },
            removeTask: function (e) {
                var dataGrid = this.taskdata;
                var taskObject = e;
                if (this.taskdata && this.taskdata.length == 1) {
                    PFTConfirmNG('confirmTaskAssignPopUpClose', {
                        "message": 'Removing this task would close the task assignment pop-up, Do you want to continue?',
                        "buttons": ["No", "Yes"],
                        "promptButtonClick": function (buttonType) {
                            if (buttonType == 'Yes') {
                                WOM_RemoveTaskAssignment(taskObject.model.mainobject.TaskId);
                                closePopupNG();
                            }
                        }
                    });
                }
                else {
                    if (WOM_RemoveTaskAssignment(taskObject.model.mainobject.TaskId)) {
                        if (this.taskdata && this.taskdata.length > 1)
                            this.splice('taskdata', e.model.TaskNum, 1);
                        RemoveTask(e);
                    }
                }
            },
            getGraphId: function () {
                return "Resource_" + WOM_selectedTaskObject.TaskIndex;
            },
            getUserIndex: function () {
                return WOM_selectedTaskObject.TaskUsersLength;

            },
            addorRemoveUserAttributes: function (e) {
                var model = e.model;
                var index = model.TaskBoardAssign_Index;
                var userDetails = e.model.object;
                if (userDetails) {
                    if ($('TAL_checkboxDiv_' + index).checked == true) {
                        if (WOM_userList && WOM_userList.length != 0) {
                            var filtered = jQuery.grep(WOM_userList, function (item, index) {
                                return (item.UserId == userDetails.UserId);
                            });
                            if (filtered.length == 0)
                                WOM_userList.push(userDetails);
                        }
                        else {
                            WOM_userList.push(userDetails);
                        }
                    }
                    else {
                        var filtered = jQuery.grep(WOM_userList, function (item, index) {
                            return (item.UserId == userDetails.UserId);
                        });
                        if (filtered.length > 0) {
                            userList = jQuery.grep(WOM_userList, function (item, index) {
                                return (item.UserId != userDetails.UserId);
                            });
                            WOM_userList = userList;
                        }
                    }
                    if ($jq("#executorsContainer input:checked").length == this.data.length)
                        MarkCheckAllBox("TA_checkAllBox");
                    else
                        UnMarkCheckAllBox("TA_checkAllBox");
                }
            },
            addorRemoveAllUserAttributes: function () {
                var executerList = this.data;
                if ($('TA_checkAllBox').checked) {
                    for (var i = 0; i < this.data.length; i++) {
                        if (WOM_userList && WOM_userList.length > 0) {
                            var filtered = jQuery.grep(WOM_userList, function (item, index) {
                                return (item.UserId == executerList[i].UserId);
                            });
                            if (filtered.length == 0)
                                WOM_userList.push(executerList[i]);
                        }
                        else
                            WOM_userList.push(executerList[i]);
                        $('TAL_checkboxDiv_' + i).checked = true;
                    }
                }
                else {
                    $jq("#executorsContainer input:checked").each(function () {
                        $jq(this).prop('checked', false);
                    });
                    WOM_userList = [];
                }
            },
            addorRemoveTaskAttributes: function (e) {
                var model = e.model;
                var index = model.TaskNum;
                var taskId = model.mainobject.TaskId;
                var selected = [];
                $jq('#taskBlock input:checked').each(function () {
                    selected.push($(this));
                });
                if ($('TAR_checkboxDiv_' + index).checked) {
                    $jq('#taskRow_' + index).addClass("selectedTask");
                    WOM_SelectTaskAssignment(taskId);
                    if (selected.length <= 2)
                        MakeAllCheckBoxesVisible('#TAR_checkboxMainDiv_', this.taskdata.length);
                }
                else {
                    $jq('#taskRow_' + index).removeClass("selectedTask");
                    if (selected.length <= 2)
                        HideAllCheckBoxesVisiblity('#TAR_checkboxMainDiv_', this.taskdata.length);
                    WOM_DeselectTaskAssignment(taskId);
                }
            },
            addorRemoveAllTaskAttributes: function () {
                var selected = [];
                $jq('#taskBlock input:checked').each(function () {
                    selected.push($(this));
                });
                if (selected.length != WOM_taskList.length)
                    WOM_SelectTaskAssignment(null);
                else {
                    $jq(".selectedTask").each(function () {
                        $jq(this).removeClass("selectedTask");
                    });
                    WOM_DeselectTaskAssignment(null)
                }
            },
            displayExecterBlockMsg: function (data) {
                if (data && (data.length >= 1 || (WOM_taskList.length == 1 && data.length < 1))) {
                    $jq('#MultiTaskSelectedDiv').addClass('hide');
                    $jq('#ExtraExecutersBlock').show();
                }
                return "No more resources available for this task.";
            },
            getUserDetailsObject: function (details, taskObj) {
                return GetUserDetailsObject(details, taskObj);
            },
            removeUser: function (taskUser, userTaskDetails) {
                RemoveUserFromComponent(taskUser, userTaskDetails);
            },
            moveUserToRightPanel: function (e) {
                moveSingleUserToRightPanel(e);
            },
            getDefaultCheckValue: function (index) {
                if (index == 0) {
                    return "checked";
                }
            },
            getClassForTA_tasks: function (index) {
                if (index == 0)
                    return "linked selectedTask";

                else
                    return "linked";
            },
            renderSearchableText: function (name) {
                return renderSearchableText(name, 'TA_Search');
            }
        });
    </script>
</dom-module><dom-module id="PFT-TaskboardAssignmentComponent" assetpath="Components/Task/">

    <template>
        <template is="dom-if" if="{{isTransferBlockRequired(status, activetransferstatusacronym, activetransfergroupid, userdetails)}}">
            <!--Component for TransferStatus-->
            <pft-transferstatuscomponent taskstatus="{{status}}" activetransferstatus="{{activetransferstatusacronym}}" usergroupid="{{usergroupid}}" activetransfergroupid="{{activetransfergroupid}}" userdetails="{{userdetails}}" usertags="{{usertags}}" usergroupname="{{usergroupname}}" activetransfergroupname="{{activetransfergroupname}}" taskid="{{taskid}}" objtenantid="{{objtenantid}}" activetransferinitiatedby="{{activetransferinitiatedby}}"></pft-transferstatuscomponent>
        </template>
        <template is="dom-if" if="{{isBlockRequired(status, activetransferstatusacronym, activetransfergroupid)}}">
            <pft-taskboardusercomponent taskid="{{taskid}}" userdata="{{getUserDetailsObject(userdetails)}}" issplittable="{{issplittable}}"></pft-taskboardusercomponent>
            <div actionfor="ASSIGNTASK" on-tap="taskAssignmentPopUp">                
                <span class$="{{getAssignmentClass(userdetails,status)}}" title="Click here to assign"></span>
                <span class$="{{getAssignmentwrapClass(userdetails,status)}}" title="Click here to assign"></span>
            </div>
            <!--Component for TransferStatus-->
            <pft-transferstatuscomponent taskstatus="{{status}}" activetransferstatus="{{activetransferstatusacronym}}" usergroupid="{{usergroupid}}" activetransfergroupid="{{activetransfergroupid}}" userdetails="{{userdetails}}" usertags="{{usertags}}" usergroupname="{{usergroupname}}" activetransfergroupname="{{activetransfergroupname}}" taskid="{{taskid}}" objtenantid="{{objtenantid}}" activetransferactedby="{{activetransferactedby}}" activetransferinitiatedby="{{activetransferinitiatedby}}"></pft-transferstatuscomponent>
        </template>
    </template>
    <script>
        Polymer({
            is: "PFT-TaskboardAssignmentComponent",
            properties: {
                userdetails: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                details: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                taskid:
                      {
                          type: Array,
                          value: function () {
                              return "";
                          }
                      },
                tasktype: {
                    type: String,
                    value: ""
                },
                skill: {
                    type: String,
                    value: ""
                },
                objTenantId: {
                    type: String,
                    value: ""
                },
                userGroupId: {
                    type: String,
                    value: ""
                },
                totalusercount: {
                    type: Number
                },
                status: {
                    type: String,
                    value: ""
                },
                taskduedate: {
                    type: Date
                },
                taskestimate: {
                    type: Number
                },
                tasktype: {
                    type: String,
                    value: ""
                },
                activetransferstatusacronym: {
                    type: String,
                    value: function () {
                        return "";
                    }
                },
                activetransfergroupid: {
                    type: Number
                },
                usertags: {
                    type: String,
                    value: function () {
                        return "";
                    }
                    //value: ""
                },
                activetransferactedby: {
                    type: String,
                    value: function () {
                        return "";
                    }
                },
                iscompletionstatus: {
                    type: String,
                    value: function () {
                        return "";
                    }
                },
                taskTenantId: {
                    type: String,
                    value: ""
                },
                issplittable: {
                    type: String,
                    value: function () {
                        return "";
                    }
                },
                activetransferinitiatedby: {
                    type: String,
                    value: function () {
                        return "";
                    }
                }
            },
            getAssignmentClass: function (userdetails, status) {
                return GetAssignmentClassForUserComponent(userdetails, status, this.activetransfergroupid, this.activetransferstatusacronym);
            },
            getAssignmentwrapClass: function (userdetails, status) {
                return GetAssignmentwrapClassForUserComponent(userdetails, status, this.activetransfergroupid, this.activetransferstatusacronym);
            },
            taskAssignmentPopUp: function (e) {
                if (this.status != 'ABORTED' && e.target && !e.target.classList.contains('disableAction')) {
                    var userDetails = this.userdetails == "[]" ? new Array() : this.userdetails;
                    HandleDashboardCheckBox();
                    AddAssignTaskDetailsData(this.taskid, this.tasktype, this.skill, this.objtenantid, this.usergroupid, this.taskduedate, this.taskestimate, JSON.parse(userDetails), "", "", "", 0, this.activetransferstatusacronym, this.status, this.iscompletionstatus,this.taskTenantId);
                    LaunchAssignmentTool(true);
                }
            },
            getUserDetailsObject: function (details) {
                return GetUserDetailsObjectWithAssignmentStatus(details, 'true');
            },
            isBlockRequired: function (taskstatus, activetransferstatusacronym, activetransfergroupid) {
                return IsUserBlockRequiredInUserComponent(taskstatus, activetransferstatusacronym, activetransfergroupid);
            },
            isTransferBlockRequired: function (taskstatus, activetransferstatusacronym, activetransfergroupid, userdetails) {
                return IsTransferBlockRequiredInTaskUserComponent(taskstatus, activetransferstatusacronym, activetransfergroupid, userdetails);
            }
        });

    </script>
</dom-module><dom-module id="PFT-TaskboardUserComponent" assetpath="Components/Task/">
    <template>
        <template is="dom-repeat" items="{{getObject(userdata)}}" as="userlist" index-as="o_index">
            <div class$="{{getNameBubbleClass(userlist)}}" id$="{{generateIdForNameBubble(userlist,o_index)}}">
                <span class="UserNameAbr" title="{{getTooltipForUserName(userlist,issplittable)}}">
                    {{getNameAbbreviation(userlist.UserDisplayName)}}
                </span>
                <div class$="{{getStatusAssignmentBubble(userlist)}}" title="{{getTitle(userlist)}}"></div>
            </div>
        </template>
        <div class="clr"></div>
        <template is="dom-if" if="{{IsnMoreDetailsDivRequired(userdata)}}">
            <pft-nmoreusers userdata="{{userdata}}" taskid="{{taskid}}" isassignmentstatusrequired="true" details="{{details}}" totalusercount="{{totalusercount}}"></pft-nmoreusers>
        </template>
    </template>
    <script>
        Polymer({
            is: "PFT-TaskboardUserComponent",
            properties: {
                userdata: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                details: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                totalusercount: {
                    type: Number
                },
                taskid: {
                    type: Number
                },
                issplittable: {
                    type: String,
                    value: function () {
                        return "";
                    }
                }
            },
            getStatusAssignmentBubble: function (object) {
                return GetStatusAssignmentBubbleClass(object);
            },
            getNameAbbreviation: function (userName) {
                return getNameAbbreviation(userName);
            },
            getUserCountBubble: function (totalUsers) {
                return GetUserCountBubble(totalUsers);
            },
            getObject: function (details) {
                this.totalusercount = 0;
                if (this.userdata && this.userdata.length > 0) {
                    this.details = this.userdata;
                    this.details = jQuery.grep(this.details, function (item, index) {
                        return (item.UserId != 0);
                    });
                    if (this.details.length >= 1 && this.details[(this.details.length) - 1].AssignmentStatusAcronym != "UNASSIGNED") {
                        this.totalusercount = this.details.length;
                        if (this.details.length >= 3)
                            this.details.length = 3;
                    }
                    else if (this.details.length > 1 && this.details[(this.details.length) - 1].AssignmentStatusAcronym == "UNASSIGNED") {
                        this.totalusercount = this.details.length;
                        this.details.length = 1;
                    }
                    else {
                        this.details = [];
                        this.details.length = 0;
                        this.totalusercount = this.details.length;
                    }
                    return this.details;
                }
            },
            getTitle: function (object) {
                return GetTitle(object);
            },
            getNameBubbleClass: function (object) {
                return GetNameBubbleClass(object);
            },
            generateIdForNameBubble: function (object, index) {
                return GenerateIdForNameBubble(object, index)
            },
            getTooltipForUserName: function (object, issplittable) {
                var isSplittable = (issplittable.toString() == "" || issplittable == null || issplittable == undefined || issplittable.toString() == "True") ? true : false;
                return GetTooltipForUserName(object, isSplittable);
            },
            IsnMoreDetailsDivRequired: function (objectdata) {
                if (this.details && this.details.length == 3 && this.totalusercount && this.totalusercount > 3) {
                    return true;
                }
                return false;
            }
        });

    </script>
</dom-module><dom-module id="PFT-TaskCalender" assetpath="Components/Task/">
    <template>
        <div id="GroupCalenderContainer" class="">
            <ul id="CalenderTabContainer" class="CalTAbCntnr">
                <li id="CalenderWorkingTab" class="activeState" on-tap="loadWorkingTimePage">Working Time</li>
                <li id="CalenderExceptionTab" on-tap="loadExceptionPage">Exceptions</li>
            </ul>
            <div id="CalenderBodyContainer" class="tskcalBody"></div>


        </div>
    </template>
    <script>
        Polymer({
            is: "PFT-TaskCalender",
            isGroup: "",
            ready: function () {
                this.isGroup = checkGroupOrUserCalendar();
               
                loadWorkingTimePage(this.isGroup);
            },
            attached: function () {
                loadScroll('');
                initializeAllDateTimeCalendars();
                this.isGroup = checkGroupOrUserCalendar();
            },
            loadExceptionPage: function () {
                loadExceptionPage(this.isGroup);
            },
            loadWorkingTimePage: function () {
                loadWorkingTimePage(this.isGroup);
            },
            checkGroupOrUserCalendar: function () {
                return checkGroupOrUserCalendar();
            }
        });
    </script>

</dom-module>
<dom-module id="PFT-TaskTransfer" assetpath="Components/Task/">
    <template>        
        <div id="TaskTypeContainer" class="TransferTasksDescription">
            <table width="100%" height="100%">
                <tbody><tr style="height:70%">
                    <td align="center" class="TransferIcon vAlignM" width="50%">
                        <div id="iconHolder" class="clear-tasks" style="display:none"></div>
                        <div id="thumbHolder" class="marT10 marL10" style="display:none"><pft-image value="{{thumbnailurl}}"></pft-image></div>
                    </td>
                    <td class="TransferIconRHS vAlignM">
                        <div id="multiTaskTransfer" style="display:none">
                            <div><span class="boldText vAlignB">{{nooftasks}}</span>&nbsp;Tasks</div>
                            <div class="taskSubText">{{tasktype}}</div>                        
                        </div>
                        <div id="singleTaskTransfer" style="display:none" class="container metadataDiv">
                            <div class="content">
                                <div class="">{{tasktitle}}</div>
                                <div class="taskSubText">{{tasktype}}</div>                                
                                <div id="conditionMetaData" class="taskSubText"></div>
                            </div>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td colspan="2" class="UserTagSearchPanel">
                        <!----------Search Part--------->
                        <div class="posRel taskSrchBox">
                            <div id="TA_SearchCntrlWrap" class="searchCntrlWrap">
                                <input type="text" id="TA_Search" autocomplete="off" title="Search" placeholder="Search for manager, team name" class="srchControl" on-keyup="loadSearchData">
                                <div class="srchReset clear-cross" title="clear search" style="display: none;" id="TA_resetReviewDashBoard" on-tap="resetSearchForReview"></div>
                            </div>
                            <div class="clear-search marR10 WCsrchIcon" id="TA_WCsrchIcon" title="Search" on-tap="loadSearchData"></div>
                            <div class="style-scope pft-tasktransfer taskSrchBorder"></div>                            
                        </div>
                        <!----------Search Part--------->
                    </td>
                </tr>
            </tbody></table>
        </div>
        <div id="UserTagListContainer" class="UserTagList container">
            <p class="noData" style="display:none" id="noTeamFound">No Team(s) Found.</p><table class="transferListTable content" id="transferListTable">
                <tbody>
                    <template is="dom-if" if="{{CheckForData(grouplist)}}">
                        <p class="noData">No Team(s) Found.</p>
                    </template>
                    <template is="dom-repeat" items="{{grouplist}}" as="object" index-as="Group_Index">
                        <tr id$="{{object.GroupId}}" class="TransferGroupRow">
                            <!--<td id$="{{object.GroupId}}" class="TransferGroupRow" on-tap="PerformTransferTask" title="Click here to transfer task(s)">trans
        </td>-->
                            <td class="TXTCntrAlign vAlignM CmmTbox  transferCol1" align="center">
                                <div class="transferNameBubble marL10">
                                    <span class="UserNameAbr">{{object.GroupAbbreviation}}</span>
                                </div>
                            </td>
                            <td class="vAlignM transferCol2">
                                <div class="boldText">{{object.GroupName}}</div>
                                <div id="MembersNameTD" class="taskSubText SearchTextHighlight" title="{{GetMemberNames(object.Members)}}">
                                    {{GetMemberNames(object.Members)}}
                                </div>
                                <div id$="CommntBoxId_{{object.GroupId}}" class="TaskCmmntBox">
                                    <input type="text" id$="CmmntboxId_{{object.GroupId}}" class="TranfrTskCmtField" placeholder="Write your comment here" on-keypress="TransferTskEventListener" autocomplete="off">
                                    <span class="clear-cross TransTskcommentReset" title=" Click here to reset comment" on-tap="ResetComment"></span>
                                    <span class="clear-sendNow TransTskcommentsend" title="Click here to transfer task" on-tap="PerformTransferTask"></span>
                                    
                                </div>
                            </td>
                            <td class="TXTCntrAlign vAlignM transferCol3">
                                <!--<div id="TransferBtn" class="TransferWrap"></div>-->
                                <div id$="{{object.GroupId}}" class="TransferWrap" on-tap="AddComment"></div>
                            </td>
                        </tr>
                    </template>                    
                    
                </tbody>                
            </table>
        </div>        
    </template>
    <script>
        Polymer({
            is: "PFT-TaskTransfer",
            ready: function () {
                PopulateTransferMetadata();
            },
            attached: function () {
                loadScroll('UserTagListContainer');
                this.grouplist;
            },

            properties: {                
                skillAcronym:
                      {
                          type: String,
                          value: function () {
                              return "";
                          }
                      },
                grouplist: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                noOfTasks: {
                    type: Number
                },
                TransferTaskId: {
                    type: String,
                    value: ""
                },
                listeners: {
                    'keydown': 'keyPressed'
                },
            },
            CheckForData: function (data) {                
                if (data === null || data.length == 0)
                    return true;
            },
            AddComment: function (e) {
               
                $jq(".TaskCmmntBox").each(function (index) {
                    var id = $jq(".TaskCmmntBox")[index].id;
                    document.getElementById(id).hide();
                    jQuery('.TransferWrap').css('display', 'block');
                });
                
                if (jQuery('#CommntBoxId_' + e.target.id).css('display') == 'block') {
                    jQuery('#CommntBoxId_' + e.target.id).css('display', 'none');
                }
                else {
                    jQuery('#CommntBoxId_' + e.target.id).css('display', 'block');
                    jQuery('#CommntBoxId_' + e.target.id).addClass('CmmTbox');
                    jQuery(".TranfrTskCmtField").focus();
                    $jq('#' + e.target.id + '.TransferWrap').css('display', 'none')
                }
            },
            keyPressed: function (e) {
                if (e.keyCode === 13) 
                    this.PerformTransferTask(e);
            },
            ResetComment: function (e) {
                jQuery(this).find('input').val("");
                jQuery(jQuery(this).find('.TranfrTskCmtField')).focus();
            },
            PerformTransferTask: function (e)
            {
                var groupId = e.model.__data__.object.GroupId;
                var groupName = e.model.__data__.object.GroupName;
                var Comment = document.getElementById("CmmntboxId_" + e.target.parentNode.id.split('_')[1]).value;
                TransferTaskConfirmation(groupId, groupName, Comment);
            },
            TransferTskEventListener: function(e)
            {
                this.keyPressed(e);
            },
           
            //---------search part starts----------//
            loadSearchData: function (e) {
                var textInput = this.$.TA_Search.value;
                if (textInput != null && textInput != '') {
                    this.$.TA_resetReviewDashBoard.style.display = '';
                    this.$.TA_WCsrchIcon.style.display = 'none';
                }
                else if (textInput != null && textInput == '') {
                    this.$.TA_resetReviewDashBoard.style.display = 'none';
                    this.$.TA_WCsrchIcon.style.display = '';
                }

                var charCode;

                if (e.which)
                    charCode = e.which;

                if (e.keyCode)
                    charCode = e.keyCode;

                if (charCode == 13 || (e.currentTarget.id == 'TA_WCsrchIcon' && e.detail.sourceEvent.which == 1 && e.type == 'tap') || textInput.length > 2) {
                    GetSearchGroupsForTransfer(this.grouplist);
                    return false;
                }
                return true;
            },
            resetSearchForReview: function () {
                if (this.$.TA_Search.value != null) {
                    this.$.TA_Search.value = '';
                    this.$.TA_resetReviewDashBoard.style.display = 'none';
                    this.$.TA_WCsrchIcon.style.display = '';
                }
                GetSearchGroupsForTransfer(this.grouplist);


            },
            WCSearchShow: function () {
                var x = document.getElementById('TA_SearchCntrlWrap');
                x.classList.toggle("srchExpand");
                document.getElementById('TA_Search').focus();
                var x = document.getElementById('TA_WCsrchIcon');
                document.body.addEventListener('click', TA_WCSearchHide, false);

            },
            //----------search part ends----------//
            GetMemberNames: function (member) {
                var output = '';
                if (member != null && member != undefined)
                {
                    return member.map(function (elem) { return elem.Name; }).join(", ");
                }
            }
        });
    </script>
</dom-module><dom-module id="PFT-TaskUserAssignment" assetpath="Components/Task/">
    <template>
        <div id="TaskExecutors" class="content taskExecutorMainWrap">
            <template is="dom-repeat" items="{{data}}" as="object" index-as="RP">
                <div id="TaskDetail_[[RP]]" class="TaskExecutorsWrapper">
                    <table id$="DetailsDataTable_[[RP]]" class="DetailsDataTable">
                        <tbody><tr>
                            <td class="DetailsDataTabletd">
                                <div class="UserBlockTitle">
                                    <pft-textcomponentvt data="{{object.TaskUsers.UserDisplayName}};{{object.TaskUsers.UserEmail}}"></pft-textcomponentvt>
                                </div>
                                <div class="starRating">
                                    <pft-rating id="pft_rating" rating="{{object.TaskUsers.Rating}}"></pft-rating>
                                    <pft-bargraph id="PFT_barChart_[[taskid]]_[[object.TaskUsers.UserId]]" items="{{getArrayvalue(object.TaskUsers.AllocationData.ChartData)}}" graph-id="Resource_[[block_id]]" user-index="[[RP]]"></pft-bargraph>
                                </div>
                            </td>
                            <td class="DetailsDataTableCol2">
                                <pft-text value="Due Date "></pft-text>
                                <div id="CalenderDiv_[[RP]]" class="DetailsDataTableCol DetailsDataTableCol1 marB40 posRel">
                                    <input type="text" class="DetailsDataTableCol1 " id="DueDate_[[taskid]]_[[object.TaskUsers.UserId]]" value="{{getDisplayFormat(object.TaskUsers.UserDueDate,defaultDisplayFormat)}}" onchange="ResourceValidation()" __datatype__="datetime" actualvalue="{{object.TaskUsers.UserDueDate}}" on-tap="initializeCalendar">

                                </div>
                                <pft-text value="Estimate"></pft-text>
                                <div class="DetailsDataTableCol DetailsDataTableCol1">
                                    <input type="text" class="DetailsDataTableCol1 estimateMask" id="estimate_[[block_id]]_[[RP]]" value="{{convertTime(object.TaskUsers.Estimation)}}" maxlength="5" onkeyup="ResourceValidation(event)">
                                </div>
                            </td>
                            <td class$="{{getTcInClass(object.TaskUsers)}}">
                                <pft-text value="TC In"></pft-text>
                                <div class="DetailsDataTableCol time marB40"><input class="timeCodeMask" type="text" id="TCIN_[[block_id]]_[[RP]]" maxlength="11" value="{{getTcinTcoutvalue(object.TaskUsers.TcIn)}}"></div>
                                <pft-text value="TC Out"></pft-text>
                                <div class="DetailsDataTableCol time"><input class="timeCodeMask" type="text" id="TCOUT_[[block_id]]_[[RP]]" maxlength="11" value="{{getTcinTcoutvalue(object.TaskUsers.TcOut)}}"></div>
                            </td>
                            <td class="DetailsDataTableCol2">
                                <pft-text value="Remarks"></pft-text>
                                <div class="DetailsDataTableCol DetailsDataTableCol3"><textarea class$="{{getRemarksClass(object.TaskUsers)}}" id="remarks_[[block_id]]_[[RP]]" value="{{object.TaskUsers.Remarks}}"></textarea></div>
                            </td>
                            <td id="DetailsDataTableCol4" class="DetailsDataTableCol4" on-tap="removeUser">
                                <div class="clear-cross" title="click here to remove the user"></div>
                            </td>

                        </tr>

                    </tbody></table>
                </div>

            </template>
        </div>

    </template>

    <script>
        Polymer({
            is: "PFT-TaskUserAssignment",
            attached: function () {
                this.data;
            },
            properties: {
                data:
                      {
                          type: Array,
                          value: function () {
                              return [];
                          }
                      },
                block_id: Number,
                taskid: Number,
                isSplit: {
                    type: String,
                    value: ""
                },
                defaultDisplayFormat: {
                    type: String,
                    value: "hhh:nn - ddd, dd MMM yyyy"
                },
            },
            removeUser: function (e) {
                if (WOM_DeleteTaskExecuter(e.model.object.TaskUsers)) {
                    var userTaskDetails = GetTotaltasksAssignedTouser();
                    document.getElementById('AssignmentContainer').removeUser(e.model.object.TaskUsers, userTaskDetails);
                    if (this.data == null || this.data.length == 0) {
                        $jq("#emptyUser_" + this.taskid).removeClass('hide').addClass('show');
                    }
                }
            },
            calenderPopup: function (e) {
                var userId = e.model.object.TaskUsers.UserId;
                initializeAllDateTimeCalendarsv2(true, false, userId);
            },
            getDisplayFormat: function (value, dateFormat) {
                var dateTimeInUserPreferedTZ = SUT_USR(value, dateFormat);
                return dateTimeInUserPreferedTZ;
            },
            getArrayvalue: function (obj) {
                return GetArrayvalue(obj);
            },
            updateResource: function (obj) {
                this.data = obj;
            },
            logdata: function (graphdata) {
                this.graphdetails = graphdata;
                console.log(graphdata);
                return graphdata;
            },
            getTcinTcoutvalue: function (val) {
                return GetTcinTcoutvalue(val);
            },
            convertTime: function (time) {
                return ConvertTime(time);
            },
            getTcInClass: function (taskUser) {
                var IsSplittable = WOM_taskList[this.block_id].IsSplittable;
                if (!IsSplittable)
                    return "DetailsDataTableCol DetailsDataTableCol2 hide";
                else
                    return "DetailsDataTableCol DetailsDataTableCol2";
            },
            getRemarksClass: function (taskUser) {
                var IsSplittable = WOM_taskList[this.block_id].IsSplittable;
                if (!IsSplittable)
                    return "remarksInputTxt remarksSplittable";
                else
                    return "remarksInputTxt";
            },
            initializeCalendar: function (event) {
                //params: sourceId, targetId, format, showTime, userId, isExcptnDateDisableRequired, isTooltipForHolidayRequired, isDisableLessThanCurDateRequired, onChangeCallBack, onSelectCallBack
                initializeDateTimeCalendarV2ById(event.target.id, event.target.id, "%H:%M - %a, %d %b %Y", true, event.model.object.TaskUsers.UserId, false, true, true, true, ResourceValidation, ResourceValidation);
            }
        });
    </script>
</dom-module>
<dom-module id="PFT-TransferAction" assetpath="Components/Task/">
    <template>        
        <template is="dom-if" if="{{!isActionTextRequired(actionConfig)}}">
            <div id="transferAction" title="Click here to transfer task(s)" class="linked" title$="{{actionConfig.ActionTooltip}}" on-tap="Invokefunction" actionname$="{{actionConfig.ActionName}}">
                <span class="FL transferObject taskAssignIcon clear-shuffle"></span>
            </div>
        </template>
        <template is="dom-if" if="{{isActionTextRequired(actionConfig)}}">
            <div id="transferAction" title="Click here to transfer task(s)" class="actionWrap" title$="{{actionConfig.ActionTooltip}}" on-tap="Invokefunction" actionname$="{{actionConfig.ActionName}}">
                <span class="actionIcon clear-shuffle"></span>
                <span class="actionLabel">{{actionConfig.ActionDisplayText}}</span>
            </div>
        </template>
    </template>
    <script>
        Polymer({

            is: 'PFT-TransferAction',
            properties: {
                actionConfig: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                }
            },
            Invokefunction: function () {                
                if (IsActionDisabled(this.id))
                    return false;
                else {
                    this.domHost.dataHost.InvokeTransferActionMethod(this.actionConfig.ActionOnClickFunction);
                }
            },
            isActionTextRequired: function (actionConfig) {
                return IsToolbarActionTextRequired(actionConfig);
            }
        });
    </script>

</dom-module>
<dom-module id="PFT-TransferStatusComponent" assetpath="Components/Task/">
    <template>
        <!--if transferstatus is inprogress and taskstatus is notstarted and userdetails.count = 0-->
        <template is="dom-if" if="{{isTransferComponentRequired(taskstatus,activetransferstatus,activetransfergroupid,userdetails)}}">
            <div>
                <!--if usertags contain usergroupid, transferstatus is inprogress, taskstatus is notstrated-->
                <template is="dom-if" if="{{isSectionRequired(usergroupid, activetransfergroupid, usertags, 'SENDER', activetransferinitiatedby)}}" id="CancelBlock">
                    <div id="TransferText" class="">
                        <span title=" {{GetTransferTooltip(activetransfergroupname, 'SENDER' )}}">
                            <!--<span class="clear-shuffle DashboardTransferIcon"></span>-->
                            <span class="metadata transferMsg">{{GetTransferDisplayText(activetransfergroupname, 'SENDER')}}</span>
                            <span class="groupName">{{getNameAbbreviation(activetransfergroupname)}} </span>
                        </span>
                    </div>
                    <div class="TransferActionDiv">
                        <span class="TransferCancelWrap" title="Click here to cancel transfer request" taskid="{{taskid}}" objtenantid="{{objtenantid}}" on-tap="CancelTransfer"></span>
                    </div>
                </template>
                <!--if usertags contain activetransfergroupid, transferstatus is inprogress, taskstatus is notstarted -->
                <template is="dom-if" if="{{isSectionRequired(usergroupid, activetransfergroupid, usertags, 'RECEIVER', activetransferinitiatedby)}}">
                    <div id="TransferText" class="TransferLabel">
                        <span title="{{GetTransferTooltip(usergroupname, 'RECEIVER')}}">
                            <!--<span class="clear-shuffle DashboardTransferIcon"></span>-->
                            <span class="metadata transferMsg">{{GetTransferDisplayText(usergroupname, 'RECEIVER')}}</span>
                            <span class="groupName">{{getNameAbbreviation(usergroupname)}} </span>
                        </span>
                    </div>
                    <div class="TransferActionDiv">
                        <span class="TransferAcceptWrap" title="Click here to accept transfer request" taskid="{{taskid}}" objtenantid="{{objtenantid}}" on-tap="AcceptTransfer"></span>
                        <span class="pipeseparator"> | </span>
                        <span class="TransferRejectWrap" title="Click here to reject transfer request" taskid="{{taskid}}" objtenantid="{{objtenantid}}" on-tap="RejectTransfer"></span>
                    </div>
                </template>
            </div>
        </template>
        <!--if transferstatus is Rejected-->
        <template is="dom-if" if="{{isTransferRejectTextBlockRequired(activetransferstatus)}}">
            <div title$="Transfer request rejected by {{activetransferactedby}} ({{activetransfergroupname}})" class="TransferRejectDiv">
                <span class="metadata transferMsg">Transfer request rejected by </span>
                <span class="groupName">{{getNameAbbreviationForRejectedTransferTask(activetransferactedby)}}</span>
            </div>
        </template>
    </template>
</dom-module>
<script>
    Polymer({
        is: 'PFT-TransferStatusComponent',

        properties: {
            taskstatus:
                      {
                          type: String,
                          value: function () {
                              return "";
                          }
                      },
            activetransferstatus:
                      {
                          type: String,
                          value: function () {
                              return "";
                          }
                      },
            usergroupid: {
                type: Number
            },
            activetransfergroupid: {
                type: Number
            },
            userdetails: {
                type: Array,
                value: function () {
                    return [];
                }
            },
            usertags: {
                type: String,
                value: function () {
                    return "";
                }
                //value: ""
            },
            taskid: {
                type: Number
            },
            objtenantid: {
                type: Number
            },
            usergroupname: {
                type: String,
                value: function () {
                    return "";
                }
            },
            activetransfergroupname: {
                type: String,
                value: function () {
                    return "";
                }
            },
            activetransferactedby: {
                type: String,
                value: function () {
                    return "";
                }
            },
            activetransferinitiatedby: {
                type: String,
                value: function () {
                    return "";
                }
            }
        },
        isTransferComponentRequired: function (taskstatus, activetransferstatus, activetransfergroupid, userdetails) {
            var userDetails = JSON.parse(userdetails);
            if (taskstatus.toUpperCase() == 'NOTSTARTED' &&
                activetransferstatus != null && activetransferstatus != undefined && activetransferstatus.toUpperCase() == 'INPROGRESS' &&
                activetransfergroupid != null && activetransfergroupid != undefined && activetransfergroupid != 0 &&
                userDetails != null && userDetails != undefined &&
                    (userDetails.length == 0 || (userDetails.length == 1 && userDetails[0].AssignmentStatusAcronym == "UNASSIGNED")))
                return true;
            else
                return false;
        },
        GetTransferDisplayText: function (groupName, context) {
            if (context.toUpperCase() == 'SENDER') {
                return 'Transferred to ';
            }
            else if (context.toUpperCase() == 'RECEIVER') {
                return 'Transfer request from ';
            }
        },
        GetTransferTooltip: function (groupName, context) {
            if (context.toUpperCase() == 'SENDER') {
                return 'Transferred to ' + groupName;
            }
            else if (context.toUpperCase() == 'RECEIVER') {
                return 'Transfer request from ' + groupName;
            }
        },
        isSectionRequired: function (usergroupId, activetransfergroupid, usertags, context, activetransferinitiatedby) {
            if (!activetransferinitiatedby || isNaN(activetransferinitiatedby) || parseInt(activetransferinitiatedby) <= 0) {
                var isSenderOnPriority = false;
                if (usertags.indexOf(usergroupId) != -1 && usertags.indexOf(activetransfergroupid) != -1) {
                    isSenderOnPriority = true;
                }

                if (context == 'SENDER') {
                    if (usertags.indexOf(usergroupId) != -1) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
                else if (context == 'RECEIVER' && isSenderOnPriority == false) {
                    if (usertags.indexOf(activetransfergroupid) != -1) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
            }
            else {
                var loggedInUserId;
                if (MasterVar && MasterVar.userId)
                    loggedInUserId = MasterVar.userId;
                var isReceiverOnPriority = false;
                if (usertags.indexOf(usergroupId) != -1 && usertags.indexOf(activetransfergroupid) != -1) {
                    isReceiverOnPriority = true;
                }

                if (context == 'SENDER') {
                    if ((isReceiverOnPriority == false && usertags.indexOf(usergroupId) != -1) ||
                        (isReceiverOnPriority == true && loggedInUserId == activetransferinitiatedby)) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
                else if (context == 'RECEIVER') {
                    if ((isReceiverOnPriority == false && usertags.indexOf(activetransfergroupid) != -1) ||
                        (isReceiverOnPriority == true && loggedInUserId != activetransferinitiatedby)) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
            }
        },
        AcceptTransfer: function (e) {
            UpdateTaskTransferConfirmation(e.target.taskid, e.target.objtenantid, 'ACCEPTED', this.usergroupname);
        },
        RejectTransfer: function (e) {
            UpdateTaskTransferConfirmation(e.target.taskid, e.target.objtenantid, 'REJECTED', this.usergroupname);
        },
        CancelTransfer: function (e) {
            UpdateTaskTransferConfirmation(e.target.taskid, e.target.objtenantid, 'CANCELLED', this.activetransfergroupname);
        },
        getNameAbbreviation: function (name) {
            return getNameAbbreviation(name);
        },
        isTransferRejectTextBlockRequired: function (activetransferstatus) {
            return IsTaskTransferRejectBlockRequiredInUserComponent(activetransferstatus);
        },
        getNameAbbreviationForRejectedTransferTask: function (name) {
            if (name)
                return getNameAbbreviation(name).toString().toUpperCase();
            else
                return "NA";
        }
    });
</script><dom-module id="PFT-NMoreUsers" assetpath="Components/Task/">
    <template>
        <div class="showMoreUsersDivWrapper">
             <div id="showMoreUsersDiv" class="showMoreUsersWrapper">
            <span id$="{{generateId(taskid, 'showMoreUsers_')}}" class="nMoreText" on-tap="toggleDataForNMore" title="Click here to view more users">{{displayUserCount(totalusercount)}}</span>
        </div>
        <div id$="{{generateId(taskid, 'nMoreDetails_')}}" style="display:none;" class="nMoreDetailsUserComponent">
            <div id$="{{generateId(taskid, 'div_nMoreDetails_')}}" class="container showMoreUsersDiv">
                <div class="content">
                    <table class="nMoreTable">
                        <template is="dom-repeat" items="{{getObjectForNMore(details, totalusercount)}}" as="nMoreObj" index-as="n_Index">
                            <tr>
                                <td class="nMoreDetailsTD1">
                                    <div class$="{{getNameBubbleClass(nMoreObj)}}">
                                        <span class="UserNameAbr" userid="{{nMoreObj.UserId}}">
                                            {{getNameAbbreviation(nMoreObj.UserDisplayName)}}
                                        </span>
                                        <template is="dom-if" if="{{isAssignmentStatusIconRequired(isassignmentstatusrequired)}}">
                                            <div class$="{{getStatusAssignmentBubble(nMoreObj)}}" title="{{getTitle(nMoreObj)}}"></div>
                                        </template>
                                    </div>
                                </td>
                                <td class="nMoreDetailsTD2">
                                    <span class="nMoreDetailsUserComponentBoldText">Assigned To:</span>&nbsp;{{nMoreObj.UserDisplayName}}
                                    <br>
                                    <span class="nMoreDetailsUserComponentBoldText">Due:</span>&nbsp;{{getActualDueDate(nMoreObj.ActualDueDate)}}
                                    <template is="dom-if" if="{{isTCRequired(nMoreObj)}}">
                                        <br>
                                        <span class="nMoreDetailsUserComponentBoldText">Tc:</span>&nbsp;{{getTc(nMoreObj.TcIn, nMoreObj.TcOut)}}
                                    </template>
                                </td>
                                <template is="dom-if" if="{{isUserTaskStatusRequired(taskid)}}">
                                    <td class="nMoreDetailsTD3">
                                        <span>
                                            <pft-statusicon status="{{getUserTaskStatus(nMoreObj.UserTaskStatusAcronym)}}" tooltip="{{getUserTaskStatus(nMoreObj.UserTaskStatus)}}"></pft-statusicon>
                                        </span>
                                    </td>
                                </template>
                            </tr>
                        </template>
                    </table>
                </div>
            </div>
        </div>
</div>
    </template>
    <script>
        Polymer({
            is: "PFT-NMoreUsers",
            properties: {
                userdata: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                taskid: {
                    type: Number
                },
                details: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                totalusercount: {
                    type: Number
                },
                isassignmentstatusrequired: {
                    type: Boolean
                }
            },            
            getObjectForNMore: function (userdetails, totalusercount) {
                var callout = new Array();
                var userDataObj;
                if (userdetails && totalusercount && totalusercount > 3) {
                    var noofrecordsneeded = totalusercount - 3;
                    if (isJSONText(this.userdata)) {
                        userDataObj = JSON.parse(this.userdata);
                    }
                    else if (this.userdata.constructor === Array) {
                        userDataObj = this.userdata;
                    }
                    callout = userDataObj.reverse();
                    callout.length = noofrecordsneeded;
                    callout = callout.reverse();
                }
                return callout;
            },
            getNameBubbleClass: function (object) {
                return GetNameBubbleClass(object);
            },
            getNameAbbreviation: function (userName) {
                return getNameAbbreviation(userName);
            },
            getStatusAssignmentBubble: function (object) {
                return GetStatusAssignmentBubbleClass(object);
            },
            getTitle: function (object) {
                return GetTitle(object);
            },
            toggleDataForNMore: function (e) {
                var element;                
                element = $jq('#' + this.generateId(this.taskid, 'nMoreDetails_'));

                if ($jq(element).is(":visible")) {
                    $jq(element).hide();
                }
                else {
                    $jq(element).show();
                    loadScroll(this.generateId(this.taskid));
                }
                document.body.addEventListener('click', showHideNMoreDetailsPanel, false);
            },
            displayUserCount: function (totalusercount) {
                return DisplayUserCount(totalusercount);
            },            
            getActualDueDate: function (duedate) {
                if (duedate)
                    return DateFormat24Hour(duedate, "hhh:nn") + ' - ' + DateFormat24Hour(duedate, 'ddd\, dd MMM');                    
                else {
                    //return Date_Format(duedate, "hhh:nn") + ' - ' + Date_Format(duedate, 'ddd\, dd MMM');
                    return "NA";
                }
            },
            getTc: function (TcIn, TcOut) {
                if (!TcIn)
                    TcIn = "00:00:00:00";
                if (!TcOut)
                    TcOut = "00:00:00:00";
                return TcIn + '-' + TcOut;
            },
            getUserTaskStatus: function (status) {
                if (status)
                    return status;
                else
                    return "NA";
            },
            isAssignmentStatusIconRequired: function (isassignmentstatusrequired) {
                if (isassignmentstatusrequired && isassignmentstatusrequired == true)
                    return true;
                else
                    return false;
            },
            generateId: function (taskId, genericNameString) {                
                return GenerateIdForNMoreUsersComponent(taskId, genericNameString);
            },
            isTCRequired: function (userList)
            {
                if (userList.AssignmentStatusAcronym && userList.AssignmentStatusAcronym == 'COLLABORATED')
                    return false;
                else
                    return true;
            },
            isUserTaskStatusRequired: function (taskId) {
                //required for taskboard only
                return IsUserTaskStatusRequired();
            }
        });
     </script>
</dom-module><dom-module id="PFT-ManualQc" assetpath="Components/Task/">
    <template>
        <template is="dom-if" if="{{validation(rowData)}}">
            <div class="FL posRel marT12">            
                <div class="ManualQC" id$="markStatus_{{rowData.StdAttributes.TaskId}}" name="markStatus">
                    <textarea id$="textArea_{{rowData.StdAttributes.TaskId}}" class="commentArea" placeholder="Add Comments..." autofocus="">{{rowData.StdAttributes.Remarks}}</textarea>

                    <div id="taskPassOrFail" class="popFooter marT10" name$="{{rowData.StdAttributes.TaskStatus}}">
                        <div id$="taskPassComplete_{{rowData.StdAttributes.TaskId}}" class="promptBtn FR" action="{{setPassClickAttribute(rowData)}}">Pass </div>
                        <div id$="taskFailComplete_{{rowData.StdAttributes.TaskId}}" class="promptBtn FR" action="{{setFailClickAttribute(rowData)}}">Fail</div>
                    </div>

                </div>

            </div>
        </template>
    </template>
    <script>
        Polymer({
            is: "PFT-ManualQc",
            properties: {
                rowData: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                },
                passclickAttribute: {
                    type: String,
                    value: ""
                },
                failclickAttribute: {
                    type: String,
                    value: ""
                },
            },
            attached: function (e) {
                this.async(function () {
                    
                    if (($jq("#taskPassOrFail").attr("name")).toLowerCase() != 'inprogress') {  
                        var taskId = $jq("textarea").attr("id").split('_')[1];
                        $jq("#ManualQc_" + taskId + " textarea").attr("disabled", true)
                        $jq("#taskPassComplete_" + taskId + "").parent().remove()
                   

                    }

                });
            },
          
         
            validation: function (rowData) {
                try {
                    if (rowData.PFTRow && rowData.PFTRow[0].PFTColumn[2].PFTCell[0]) {
                        var taskAssignmentDetails = JSON.parse(rowData.PFTRow[0].PFTColumn[2].PFTCell[0].Value);
                        var filtered = jQuery.grep(taskAssignmentDetails, function (item, index) {
                            return (item.UserId == MasterVar.userId);
                        });
                        if (filtered.length > 0) {
                            if (filtered[0].IsCompletionStatus == false && filtered[0].UserTaskStatusAcronym.toUpperCase() != "NOTSTARTED")
                                return true;
                        }
                    }
                    else {
                        return true;
                    }
                    return false;
                }
                catch (insertErr) {
                    console.log("Error while parsing");
                }
            },            
            setPassClickAttribute: function (rowData) {
                var taskId = '';
                var objTenantId = '';

                if (rowData.StdAttributes.TaskId != undefined && rowData.StdAttributes.TaskId != "")
                    taskId = rowData.StdAttributes.TaskId;
                if (rowData.StdAttributes.ObjTenantId != undefined && rowData.StdAttributes.ObjTenantId != "")
                    objTenantId = rowData.StdAttributes.ObjTenantId;
                if (rowData.StdAttributes.TaskTenantId != undefined && rowData.StdAttributes.TaskTenantId != "")
                    objTenantId = rowData.StdAttributes.TaskTenantId;
                var passtaskStatus = "Completed";
                this.passclickAttribute = "";
                this.passclickAttribute = "HandleClick('', '', 'PassorFailCommentPopUp', 'taskId+" + taskId + "&&objTenantId+" + objTenantId + "&&taskStatus+" + passtaskStatus + "')";
                this.async(function () {
                    var attr = '';
                    if (this.passclickAttribute != null) {
                        attr = document.createAttribute('OnClick');
                        attr.value = this.passclickAttribute;
                        this.$$('#taskPassComplete_' + this.rowData.StdAttributes.TaskId).setAttributeNode(attr);
                    }
                }, 1);
            },
            setFailClickAttribute: function (rowData) {
                var taskId = '';
                var objTenantId = '';

                if (rowData.StdAttributes.TaskId != undefined && rowData.StdAttributes.TaskId != "")
                    taskId = rowData.StdAttributes.TaskId;
                if (rowData.StdAttributes.ObjTenantId != undefined && rowData.StdAttributes.ObjTenantId != "")
                    objTenantId = rowData.StdAttributes.ObjTenantId;
                if (rowData.StdAttributes.TaskTenantId != undefined && rowData.StdAttributes.TaskTenantId != "")
                    objTenantId = rowData.StdAttributes.TaskTenantId;
                 var taskStatus = "Rejected";
                 this.failclickAttribute = "";
                 this.failclickAttribute = "HandleClick('', '', 'PassorFailCommentPopUp', 'taskId+" + taskId + "&&objTenantId+" + objTenantId + "&&taskStatus+" + taskStatus + "')";
                this.async(function () {
                    var attr = '';
                    if (this.failclickAttribute != null) {
                        attr = document.createAttribute('OnClick');
                        attr.value = this.failclickAttribute;
                        this.$$('#taskFailComplete_' + this.rowData.StdAttributes.TaskId).setAttributeNode(attr);
                    }
                }, 1);
            },
            GetTaskDetails: function (wfstepsInfo) {
                var wfStepsObj;
                if (wfstepsInfo != undefined && wfstepsInfo != "") {
                    wfStepsObj = JSON.parse(wfstepsInfo);
                }
                return wfStepsObj;
            },
          
        });
    </script>
</dom-module><dom-module id="PFT-SkipAction" assetpath="Components/Task/">
    <template>                
        <div id="skipAction" title="Click here to skip task(s)" class="actionWrap" title$="{{actionConfig.ActionTooltip}}" on-tap="Invokefunction" actionname$="{{actionConfig.ActionName}}">
            <span class="actionIcon clear-skip"></span>
            <span class="actionLabel">{{actionConfig.ActionDisplayText}}</span>
        </div>        
    </template>
    <script>
        Polymer({

            is: 'PFT-SkipAction',
            properties: {
                actionConfig: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                }
            },
            Invokefunction: function () {
                if (IsActionDisabled(this.id))
                    return false;
                else {
                    LaunchSkipTaskTool(this.actionConfig);
                }
            }
        });
    </script>

</dom-module>
<dom-module id="PFT-CloneProfile" assetpath="Components/DistributionCloud/">
    <template>
        <!--<template is="dom-if" if="{{!isActionTextRequired(actionConfig)}}">
            <div id="cloneAction" class="" title$="{{actionConfig.ActionTooltip}}" on-tap="Invokefunction" actionname$="{{actionConfig.ActionName}}">
                <span class="clear-anotation taskEditor marL10 FL" id="tskEditIcon"></span>
            </div>
        </template>

        <template is="dom-if" if="{{isActionTextRequired(actionConfig)}}">
            <div id="cloneAction" class="actionWrap" title$="{{actionConfig.ActionTooltip}}" on-tap="Invokefunction" actionname$="{{actionConfig.ActionName}}">
                <span class="actionIcon clear-anotation" id="tskEditIcon"></span>
                <span class="actionLabel">{{actionConfig.ActionDisplayText}}</span>
            </div>
        </template>-->


        <template is="dom-if" if="{{!isActionTextRequired(actionConfig)}}">
            <div id="cloneAction" class="startAction" title$="{{actionConfig.ActionTooltip}}" actionname$="{{actionConfig.ActionName}}">
            </div>
        </template>
        <template is="dom-if" if="{{isActionTextRequired(actionConfig)}}">
            <div id="cloneAction" class="actionWrap" title$="{{actionConfig.ActionTooltip}}" startactionconfig="{{SetClickAttribute(actionConfig.ActionOnClickFunction,actionConfig.ActionDefaultParams)}}" actionname$="{{actionConfig.ActionName}}" on-tap="Invokefunction">
                <span class="actionIcon exporttAction clear-copy2"></span>
                <span class="actionLabel">{{actionConfig.ActionDisplayText}}</span>

            </div>
        </template>
    </template>
    <script>
        Polymer({

            is: 'PFT-CloneProfile',

            properties: {
                actionConfig: {
                    type: Array,
                    value: function () {
                        return [];
                    }
                }
            },
            Invokefunction: function () {
                if (IsActionDisabled(this.id))
                    return false;
                else {
                    if (this.actionConfig && this.actionConfig.DashboardActionType) {
                            HandleDistributionClick(this.actionConfig.DashboardContext, this.actionConfig.ActionName);
                    }
                }
            },
            isActionTextRequired: function (actionConfig) {
                return IsToolbarActionTextRequired(actionConfig);
            }
        });
    </script>

</dom-module>
</div></body></html>